<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>kotlin 语义语法分析原理</title>
    <url>/2019/08/26/Kotlin-%E8%AF%AD%E4%B9%89%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>kotlin 语义语法分析原理</p>
<a id="more"></a>

<h3 id="kotlin-语义语法分析原理"><a href="#kotlin-语义语法分析原理" class="headerlink" title="kotlin 语义语法分析原理"></a>kotlin 语义语法分析原理</h3><p>语义相关源码路径：compiler:psi-&gt;lexer</p>
<p>kotlin 语义分析使用的是JFlex，<a href="https://jflex.de/" target="_blank" rel="noopener">JFlex</a>是Java的词法分析器。</p>
<p>kotlin是自定义了语义分析说明文件，利用JFlex做词法分析。</p>
<p>说明文件路径：lexer-&gt;Kotlin.flex，里面自定义了用户代码、参数设置、词法规则等。最后生成的文件为：_JetLexer，KotlinLexer引用了 _JetLexer ，所以具体的词法分析就是通过KotlinLexer去分析。</p>
<p>KotlinLexer被引用在PsiBuilder，而PsiBuilder是用在PsiParser接口中用来解析并生成语法树的，实现PsiParser接口的具体类为：KotlinParser，所以入口在这，代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KotlinParser</span> <span class="title">implements</span> <span class="title">PsiParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> KotlinParser(Project project) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> ASTNode parse(<span class="meta">@NotNull</span> IElementType iElementType, <span class="meta">@NotNull</span> PsiBuilder psiBuilder) &#123;</span><br><span class="line">        <span class="keyword">throw</span> new IllegalStateException(<span class="string">"use another parse"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we need this method because we need psiFile</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> ASTNode parse(IElementType iElementType, PsiBuilder psiBuilder, PsiFile psiFile) &#123;</span><br><span class="line">        KotlinParsing ktParsing = KotlinParsing.createForTopLevel(new SemanticWhitespaceAwarePsiBuilderImpl(psiBuilder));</span><br><span class="line">        String extension = FileUtilRt.getExtension(psiFile.getName());</span><br><span class="line">        <span class="keyword">if</span> (extension.isEmpty() || extension.equals(KotlinFileType.EXTENSION) || (psiFile instanceof KtFile &amp;&amp; ((KtFile) psiFile).isCompiled())) &#123;</span><br><span class="line">            ktParsing.parseFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ktParsing.parseScript();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> psiBuilder.getTreeBuilt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> static ASTNode parseTypeCodeFragment(PsiBuilder psiBuilder) &#123;</span><br><span class="line">        KotlinParsing ktParsing = KotlinParsing.createForTopLevel(new SemanticWhitespaceAwarePsiBuilderImpl(psiBuilder));</span><br><span class="line">        ktParsing.parseTypeCodeFragment();</span><br><span class="line">        <span class="keyword">return</span> psiBuilder.getTreeBuilt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> static ASTNode parseExpressionCodeFragment(PsiBuilder psiBuilder) &#123;</span><br><span class="line">        KotlinParsing ktParsing = KotlinParsing.createForTopLevel(new SemanticWhitespaceAwarePsiBuilderImpl(psiBuilder));</span><br><span class="line">        ktParsing.parseExpressionCodeFragment();</span><br><span class="line">        <span class="keyword">return</span> psiBuilder.getTreeBuilt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> static ASTNode parseBlockCodeFragment(PsiBuilder psiBuilder) &#123;</span><br><span class="line">        KotlinParsing ktParsing = KotlinParsing.createForTopLevel(new SemanticWhitespaceAwarePsiBuilderImpl(psiBuilder));</span><br><span class="line">        ktParsing.parseBlockCodeFragment();</span><br><span class="line">        <span class="keyword">return</span> psiBuilder.getTreeBuilt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> static ASTNode parseLambdaExpression(PsiBuilder psiBuilder) &#123;</span><br><span class="line">        KotlinParsing ktParsing = KotlinParsing.createForTopLevel(new SemanticWhitespaceAwarePsiBuilderImpl(psiBuilder));</span><br><span class="line">        ktParsing.parseLambdaExpression();</span><br><span class="line">        <span class="keyword">return</span> psiBuilder.getTreeBuilt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> static ASTNode parseBlockExpression(PsiBuilder psiBuilder) &#123;</span><br><span class="line">        KotlinParsing ktParsing = KotlinParsing.createForTopLevel(new SemanticWhitespaceAwarePsiBuilderImpl(psiBuilder));</span><br><span class="line">        ktParsing.parseBlockExpression();</span><br><span class="line">        <span class="keyword">return</span> psiBuilder.getTreeBuilt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新中…</p>
]]></content>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>完全公平调度器</title>
    <url>/2019/08/25/%E5%AE%8C%E5%85%A8%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>读书笔记，Linux 系统编程 第六章高级进程管理</p>
<a id="more"></a>

<h3 id="完全公平调度器"><a href="#完全公平调度器" class="headerlink" title="完全公平调度器"></a>完全公平调度器</h3><p>Linux调度器为完全公平调度器，简称为CFS。和最近华为鸿蒙提出的确定时延调度相反。</p>
<p>完全公平调度器和传统的Unix调度器有很大的区别。在大多数Unix系统中，包括引入CFS之前的Linux系统，在进程调度中存在两个基本的基于进程的因素：优先级和时间片。在传统的进程调度器中，会给每个就绪进程分配一个时间片。进程可能会一直运行直到消耗完分配给它的时间片。调度器会给每个进程分配优先级。进程调度器会先调度优先级高的进程，再调度优先级低的进程。这个调度算法非常简单，而且对于早期的基于时间片共享的Unix系统效果良好。但对于交互和公平性的系统而言，如现代计算机的桌面和移动设备，该算法就有些差强人意了。</p>
<p>完全公平调度器引入了一种不同的算法，成为公平调度，它消除了时间片作为处理器分配单元，而是给每个进程分配了处理器的分配比例。</p>
<p>算法逻辑如下：CFS最初给N个进程分别分配1/N的处理器时间。然后CFS通过优先级（nice值）权衡每个进程的比例，调整分配。默认的优先级为0，权值是1，则比例不变。优先级的值设置的越小（优先级越高），权值就越高，就增加给该进程的处理器比例值；优先级的值设置的越高（优先级越低），权值越低，就减少分配给该进程的比例值。</p>
<p>通过这种方式，CFS就基于权值分配给了每个进程处理器比例。要确定每个进程真正的执行时间，CFS需要把比例划分为一个固定周期，这个周期叫目标延迟，表示系统的调度延迟。</p>
<p>举个例子：假设目标延迟设置为20ms，有两个优先级相同的进程，那每个进程分配到的时间就是10ms。这样CFS就会先执行一个进程运行10ms，再执行另一个进程运行10ms，不断反复。</p>
<p>如果当前有200个进程怎么办，延迟如果是20ms，那每个进程只能分配到100微秒。这样大部分时间就会浪费在切换进程的上下文，CFS引入最小粒度解决这个问题。</p>
<p>“最小粒度”是指任意进程运行时间的基准值。所有进程，不管分配到处理器的时间比例是多少，都会至少运行最小粒度的时间。这种机制可以保证不会大部分时间浪费在进程切换上。</p>
<p>通过给进程分配处理器资源比例，而不是固定的时间片，CFS可以实现公平性。CFS也支持可配置的时间延迟。CFS中，进程按配额运行，时间片是根据系统可运行的进程数动态变化的，解决了传统调度器对于交互进程和IO约束性进程所面临的很多问题。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ApkBus开发者千人大会演讲记录</title>
    <url>/2019/05/05/ApkBus%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%83%E4%BA%BA%E5%A4%A7%E4%BC%9A%E6%BC%94%E8%AE%B2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>里程碑记录。</p>
<a id="more"></a>

<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/FE19CA41-2761-4467-AAB1-ADCEB3A805AA-7755-0000069DE2C01374.jpg" alt></p>
<p>4.20号被安卓巴士社区邀请做了一场千人演讲，今天把演讲内容记录下。</p>
<p>大家上午好，今天我分享的主题是关于Android工程效率方面的，仓库依赖管理器。</p>
<p><strong>个人简介</strong></p>
<p>我先简单介绍下，我常用的网络ID是墨镜猫和JackyWang，我在github的star，java方面的话有四千七百多，总的star在一万两千多，在深圳java分类排名应该可以排到前三。我之前在滴滴和乐视工作过，现在在TCL·雷鸟。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/3075B99B-C450-40F7-9569-395D22CFF2E0-7755-0000069E6D1837AE.jpg" alt></p>
<p><strong>开源贡献</strong></p>
<p>给大家说下我这几年对开源社区的贡献，原创的项目有7个，贡献的代码有39.4w行，和8个国家12个地区的开发者一起维护其中的3个项目，其中两个仓库在各自的类别里面排到了前三。</p>
<p>我是从14年开始做开源，一直到现在，中间换了一次ID，所以你们看到我的账号是从16年开始的。我14年开始做开源的时候，当时是做了一个小项目放了上去，后来就过了一年多时间，突然有一天有一个爱尔兰的程序员给我发邮件，说你做的这个开源项目还可以，正好我们这有一个可以合作的项目，后来我们就聊了聊，大概意思就是想让我根据我那个开源项目给他们做下定制，价钱大概是三千美金。这件事对我触动还是非常大的，开源社区就像你和世界上其他人沟通的一个窗口一样，可以把你和任意位置的人连接起来，并产生价值。从那之后就一直做开源到现在，收获的远比我之前想象的要多得多，认识了很多有趣的人、见识到了世界级的项目是什么样的还认识了像Facebook、微软这种级别企业的Hr，开源社区的价值还是非常大的。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/4201EA5C-5ACC-43FC-B270-BB558E67437B-7755-000006A10AA5814E.jpg" alt></p>
<p><strong>仓库维护的痛点</strong></p>
<p>接下来说下依赖管理器，我们先看下这张图，一个常见的依赖关系图，这个就像一个倒立的大树一样，每一个叶子都是一个仓库，树根就是主客户端，树里面每个叶子之间也有很复杂的依赖关系，如果这个时候监控这个叶子出现了问题，就像这样，依赖他的上面的十几个叶子都会受到影响。</p>
<p>假如你改动了一个仓库，比如这个监控仓库，受影响的有依赖他的十几个仓库，就是这个图里面红色箭头指的地方，每个受影响的仓库都得升级到修复过后的版本，去一一验证，而且这个过程非常容易反复，比如你修复了一个问题，对日志生效了，但对图像又产生了问题，再修复，再发版本，还要再把十几个仓库升级再去验证，不停的重复这个过程，浪费很多时间。</p>
<p>那怎么去提升仓库的维护效率，减少验证的次数？</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201634.png" alt></p>
<p><strong>解决方案</strong></p>
<p>那有没有更彻底更高效的方式，在主工程里面把十几个受影响的仓库一次性验证完，只验证一次行不行。</p>
<p>那怎么才能实现只验证一次呢？就是把受影响的线上仓库，转为本地的可修改可编辑的源码仓库。比如我现在要修复监控仓库，我把线上监控仓库转为本地源码仓库。</p>
<p>上面受影响的十几个仓库依赖的都是本地的源码仓库，而不是线上地址。这样有问题只需要在本地监控仓库修复，改完后对依赖监控的十几个仓库同时有效。这样就可以了，对吧？</p>
<p>那关键是怎么把线上仓库转为源码仓库，最原始的方式就是把线上的地址在工程里面注释掉，把源码工程include进来。这种方式对于较复杂的项目来说，成本太高，也不可维护。</p>
<p>我们是希望只需要一个开关，就可以灵活的切换线上线下依赖。打开就是本地源码工程，关闭就是线上依赖。我们看下该怎么去实现。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201708.png" alt></p>
<p><strong>关键点</strong></p>
<p><strong>配置语言怎么选？</strong></p>
<p>首先配置该怎么选？配置可选的方式有很多种，json、xml、dsl或者其他的配置语言。json、xml在结构化扩展方面还是挺强的，但是一旦结构变得复杂，可读性就会比较差，我们看下这个对比图，左边是DSL，右边是同样结构的JSON描述，很显然json阅读起来还是挺困难的，关于DSL有一句话挺有意思，“你以为这是一句话，其实这是一段脚本”</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201732.png" alt></p>
<p><strong>动态加载DSL</strong></p>
<p>解析json和xml其实都比较简单，就是读文件就好了，但是对于dsl这种怎么办？</p>
<p>关于dsl文件其实本质上还是一个脚本，关于dsl有句话也是这么说的，你以为这是一句话 其实这是一个脚本。所以我们首先还是去动态加载这个脚本，在groovy里面提供了groovyshell，可以加载任意的groovy脚本，调用evaluate方法就可以加载独立的groovy 脚本，evaluate方法可以接受脚本字符、文件、Uri都可以。加载脚本之后，我们还需要拿到我们在dsl里面配置的信息，就是pod里面的东西，就是在定义脚本的地方，定义一个接受闭包的函数，函数名为pod，当groovyshell去加载脚本的时候，遇到pod配置，就会被这个函数接收，然后就可以把我们在项目中配置的dsl信息拿到。</p>
<p>简单来讲，就是通过groovyshell去执行这个dsl脚本，每一个pod可以看成是一个函数调用，括号里面的就是传进去的参数值，调用这个函数的声明就是这样写，然后我们就可以拿到我们在项目中的配置。这样就完成了dsl的动态加载。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201757.png" alt></p>
<p><strong>动态包含任意地址本地仓库</strong></p>
<p>首先，包含进来的项目才能依赖，所以第一步我们需要能动态的include本地任意路径的源码模块。在gradle 初始化阶段加载settings.gradle 时候，去apply我们的插件，这个时候可以拿到settings实例，这个和配置阶段拿到的project是不一样的，settings里面有个很重要的接口include，include里面填上我们配置的项目名称就可以了，和我们直接在settings.gradle里面直接写include是一样的，不一样的是我们这个是动态的。然后需要对我们刚刚include进去的project指定路径，settings里面可以通过project拿到我们指定名称的项目描述，在这个描述里面可以配置路径，任意的本地路径。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201818.png" alt></p>
<p><strong>动态去除线上、添加本地仓库</strong></p>
<p>经过之前的准备，终于到了最后一步，按照我们的配置去修改这个依赖关系了。</p>
<p>第一步，怎么把线上的依赖去除掉？在gradle配置阶段，我们每一个project都会apply我们的插件，apply的时候我们就可以拿到当前project实例，这和上面那个初始化阶段是不一样的，那个拿的是settings实例，我们通过project里面的configuration，可以去配置我们需要去除的线上依赖信息，configuration的exclude接口接收的是一个map，在这个map里配置我们在DSL里面配置的name和group就可以了。</p>
<p>下一步，我们需要把我们之前include进来的project，添加到我们的项目中去，通过我们当前的project实例，拿到当前工程的依赖关系，这个依赖是一个DependencyHandler，这个handler使用来描述依赖关系的，通过handler的add接口就可以把我们的本地仓库依赖动态添加进去，add接口接收buildtype和project实例，buildtype就是我们平常依赖使用的compile api implementation这些东西。</p>
<p>总的来说，通过配置信息把我们需要去除的依赖填进去，通过DependencyHandler把我们本地的project依赖添加进去，这样就实现了动态替换，线上依赖切换为线下依赖。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201840.png" alt></p>
<p><strong>流程</strong></p>
<p>然后我们看下实现流程，大概分为两个流程，初始化阶段和配置阶段，在gradle初始化阶段会先解析dsl，然后把需要调试的模块include 进来，在这中间可以做很多事情，比如我想依赖的是问题修复的分支，那就配置下分支名称就可以，执行自定义的hook命令。在gradle配置阶段，根据我们dsl的配置信息，去在依赖树里去寻找需要替换的节点，就像一个毛毛虫一样，去反复的去查找需要替换的叶子，找到后发现需要替换，就把需要调试的线上模块替换成本地的模块。因为仓库变多后，dsl的配置变多，所以我这还有一个辅助生成dsl的任务，他会自动扫描当前哪些是我们可以调试的，比如我们内部的maven仓库，把依赖树的信息转换为dsl，这个功能目前还在测试阶段，还没开源出来。</p>
<p>总的来说，大致分为两个流程，初始化阶段先把工程include进来，配置阶段再把线上依赖去除，添加本地依赖。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201901.png" alt></p>
<p>我们回顾下，这个插件解决的是什么问题？解决的是maven仓库依赖复杂，修复的过程繁琐。那是怎么去做的？用DSL配置仓库的基本信息，在gradle初始化阶段插件动态include仓库的源码工程，在配置阶段插件动态去除线上依赖、动态添加本地依赖，这样就做到了动态替换的效果，提升我们的维护效率，对吧。</p>
<p><strong>效果</strong></p>
<p>我们看下效果，首先我们现在的主工程是monitor sample，在项目根目录配置一个dsl文件，内容的话就是这样，每一个仓库对应一个pod，pod里面有开关，项目的name和group就是对应一个线上地址（图里面线上地址和pod对应）然后把需要调试的模块打开，重新sync工程，这时候上面就会出现本地的源码仓库，然后线上仓库就会被转为线下源码仓库，这时候可以对需要修复的仓库编辑、调试、验证功能、发布，只需要验证一次，节省很多时间。</p>
<p>我在举一个实际的例子吧，比如说我们现在有一个30人的团队，这三十人分成6个业务线，每个业务线都依赖了我们底层的网络库，网络库针对每个业务线都有相应的缓存及加密策略。如果这时候需要修改网络库的缓存策略，先在网络库的源工程里面去做修改，然后再发布到内网的maven服务器，然后再升级各个业务线的网络库版本号，再去验证，如果修改的功能不能满足需求，还得重新走上面的流程，浪费很多时间。那把网络库的依赖通过插件转为本地依赖，是不是就可以一次验证完了？对各个业务线验证完成之后再发布，不会重复的去走发布-验证这个流程，节省很多时间。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201921.png" alt></p>
<p>今天分享基本就是这些，然后这些是我的联系方式github、个人网站和我的微信，大家如果有疑问在交流群里或微信问我都可以，谢谢大家。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201940.png" alt></p>
<h4 id="花絮"><a href="#花絮" class="headerlink" title="花絮"></a>花絮</h4><p>这张图片是上午场的讲师们的合影。</p>
<p>左三是gityuan，其余都是一线公司的大牛们。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/IMG_1668.jpg" alt></p>
]]></content>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin 实践及原理</title>
    <url>/2019/01/30/Kotlin-%E5%AE%9E%E8%B7%B5%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于Kotlin在项目中的实践经验，及在Android平台的编译原理</p>
<a id="more"></a>

<h3 id="Kotlin-实践及原理"><a href="#Kotlin-实践及原理" class="headerlink" title="Kotlin 实践及原理"></a>Kotlin 实践及原理</h3><h4 id="语法回顾"><a href="#语法回顾" class="headerlink" title="语法回顾"></a>语法回顾</h4><h6 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = <span class="string">"Amit Shekhar"</span>;</span><br><span class="line"><span class="keyword">final</span> String name = <span class="string">"Amit Shekhar"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Amit Shekhar"</span></span><br><span class="line"><span class="keyword">val</span> name = <span class="string">"Amit Shekhar"</span></span><br></pre></td></tr></table></figure>

<h6 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> length = text.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> length = text?.length()</span><br></pre></td></tr></table></figure>

<h6 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String firstName = <span class="string">"Amit"</span>;</span><br><span class="line">String lastName = <span class="string">"Shekhar"</span>;</span><br><span class="line">String message = <span class="string">"My name is: "</span> + firstName + <span class="string">" "</span> + lastName;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> firstName = <span class="string">"Amit"</span></span><br><span class="line"><span class="keyword">val</span> lastName = <span class="string">"Shekhar"</span></span><br><span class="line"><span class="keyword">val</span> message = <span class="string">"My name is: <span class="subst">$firstName</span> <span class="subst">$lastName</span>"</span></span><br></pre></td></tr></table></figure>

<h6 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text = x &gt; <span class="number">5</span> ? <span class="string">"x &gt; 5"</span> : <span class="string">"x &lt;= 5"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> text = <span class="keyword">if</span> (x &gt; <span class="number">5</span>) <span class="string">"x &gt; 5"</span> <span class="keyword">else</span> <span class="string">"x &lt;= 5"</span></span><br></pre></td></tr></table></figure>

<h6 id="更灵活的case语句"><a href="#更灵活的case语句" class="headerlink" title="更灵活的case语句"></a>更灵活的case语句</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="comment">// some score;</span></span><br><span class="line">String grade;</span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        grade = <span class="string">"Excellent"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        grade = <span class="string">"Good"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        grade = <span class="string">"OK"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        grade = <span class="string">"Fail"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        grade = <span class="string">"Fail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="comment">// some score</span></span><br><span class="line"><span class="keyword">var</span> grade = <span class="keyword">when</span> (score) &#123;</span><br><span class="line">    <span class="number">9</span>, <span class="number">10</span> -&gt; <span class="string">"Excellent"</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">6.</span><span class="number">.8</span> -&gt; <span class="string">"Good"</span></span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">"OK"</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span> -&gt; <span class="string">"Fail"</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">"Fail"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as a single-expression function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">()</span></span>: <span class="built_in">Int</span> = score</span><br></pre></td></tr></table></figure>

<h6 id="Get-Set-构造器"><a href="#Get-Set-构造器" class="headerlink" title="Get Set 构造器"></a>Get Set 构造器</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Developer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Developer developer = (Developer) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != developer.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(developer.name) : developer.name == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Developer&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure>

<h6 id="类继承、实现接口"><a href="#类继承、实现接口" class="headerlink" title="类继承、实现接口"></a>类继承、实现接口</h6><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> <span class="keyword">implements</span> <span class="title">IHome</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">Parent</span></span>(), IHome &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="与Java互操作"><a href="#与Java互操作" class="headerlink" title="与Java互操作"></a>与Java互操作</h4><h6 id="相互调用"><a href="#相互调用" class="headerlink" title="相互调用"></a>相互调用</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(source: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = ArrayList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="comment">// “for”-循环用于 Java 集合：</span></span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">        list.add(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作符约定同样有效：</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.source.size - <span class="number">1</span>) &#123;</span><br><span class="line">        list[i] = source[i] <span class="comment">// 调用 get 和 set</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="空安全与平台类型"><a href="#空安全与平台类型" class="headerlink" title="空安全与平台类型"></a>空安全与平台类型</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = ArrayList&lt;String&gt;() <span class="comment">// 非空（构造函数结果）</span></span><br><span class="line">list.add(<span class="string">"Item"</span>)</span><br><span class="line"><span class="keyword">val</span> size = list.size <span class="comment">// 非空（原生 int）</span></span><br><span class="line"><span class="keyword">val</span> item = list[<span class="number">0</span>] <span class="comment">// 推断为平台类型（普通 Java 对象）</span></span><br><span class="line">item.substring(<span class="number">1</span>) <span class="comment">// 允许，如果 item == null 可能会抛出异常</span></span><br></pre></td></tr></table></figure>

<h6 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件 example.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Obj &#123;</span><br><span class="line">    const <span class="keyword">val</span> CONST = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        const <span class="keyword">val</span> VERSION = <span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="keyword">val</span> MAX = <span class="number">239</span></span><br><span class="line"></span><br><span class="line">int c = Obj.CONST;</span><br><span class="line">int d = ExampleKt.MAX;</span><br><span class="line">int v = C.VERSION;</span><br></pre></td></tr></table></figure>

<h4 id="kotlin-实践经验"><a href="#kotlin-实践经验" class="headerlink" title="kotlin 实践经验"></a>kotlin 实践经验</h4><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul>
<li>语法简洁，能比java减少40%的代码，也能节约大量的时间</li>
<li>语法级别的安全</li>
<li>目前版本已较为稳定</li>
</ul>
<h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul>
<li>可能会有额外的开销</li>
<li>少量的特性支持的还不健全，尤其在与Java互操作上，比如lateinit特性</li>
</ul>
<h5 id="坑、隐藏开销"><a href="#坑、隐藏开销" class="headerlink" title="坑、隐藏开销"></a>坑、隐藏开销</h5><p>kotlin代码是很简洁，但是简洁下面有时候会隐藏较大的开销。</p>
<p><strong>伴生对象</strong></p>
<p>如果我们需要创建类似Java中的静态成员，需要创建伴生对象，伴生对象通过<code>companion object</code> 创建，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> version = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转换为同等的Java代码，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> version = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Test.Companion Companion = <span class="keyword">new</span> Test.Companion((DefaultConstructorMarker)<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Companion</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Test.version;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">Companion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Companion</span><span class="params">(DefaultConstructorMarker $constructor_marker)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是会多产生一次的函数调用开销，不过可以把<code>val version</code> 改为 <code>const val version</code> 避免这个问题</p>
<p><strong>装箱拆箱</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> a: IntArray = intArrayOf(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> b: Array&lt;<span class="built_in">Int</span>&gt; = arrayOf(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> c: Array&lt;<span class="built_in">Int</span>?&gt; = arrayOf(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转为Java如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer[] b = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer[] c = <span class="keyword">new</span> Integer[]&#123;(Integer)<span class="keyword">null</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>后两种产生了装箱处理，产生开销</p>
<p><strong>For循环</strong></p>
<p>kotlin 提供了downTo step until reversed函数简单使用循环，但这些函数组合使用也有可能产生较多的临时对象。</p>
<h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>Tools -&gt;Kotlin -&gt;Show Kotlin Bytecode -&gt; Decompile</p>
<h4 id="Kotlin-编译原理"><a href="#Kotlin-编译原理" class="headerlink" title="Kotlin 编译原理"></a>Kotlin 编译原理</h4><p>我们对kotlin比较大的疑问可能是kotlin是怎么和java混编的？或者说kotlin是怎么生成字节码的</p>
<p>kotlin整个都是开源的，可以从github clone下来，地址：<a href="https://github.com/JetBrains/kotlin" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin</a></p>
<p>整个工程很庞大，源代码大概有四百多万行，可以使用 IntelliJ IDEA查看整个工程，具体操作可以看github 项目主页的建议。</p>
<p><strong>编译流程图：</strong></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200651.png" alt></p>
<p>kotlin的maven id 为kotlin-gradle-plugin，我们做下全局搜索，发现路径为：root/libraries/tools/kotlin-gradle-plugin</p>
<p>每个插件都会有入口类，我们在module配置时都会添加：apply plugin: ‘kotlin-android’，kotlin-android代表的就是配置入口类文件的名字，所以我们看下下kotlin-android.properties文件内容，如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation-<span class="class"><span class="keyword">class</span>=<span class="title">org</span>.<span class="title">jetbrains</span>.<span class="title">kotlin</span>.<span class="title">gradle</span>.<span class="title">plugin</span>.<span class="title">KotlinAndroidPluginWrapper</span></span></span><br></pre></td></tr></table></figure>

<p>我们看到插件入口类为 KotlinAndroidPluginWrapper，接下来我们就从这个入口类分析下kotlin编译过程。</p>
<p>KotlinAndroidPluginWrapper 源码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">KotlinAndroidPluginWrapper</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    fileResolver: FileResolver,</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> registry: ToolingModelBuilderRegistry</span><br><span class="line">) : KotlinBasePluginWrapper(fileResolver) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPlugin</span><span class="params">(project: <span class="type">Project</span>, kotlinGradleBuildServices: <span class="type">KotlinGradleBuildServices</span>)</span></span>: Plugin&lt;Project&gt; =</span><br><span class="line">        KotlinAndroidPlugin(kotlinPluginVersion, registry)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真正的实现是在 KotlinAndroidPlugin 中，源码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">KotlinAndroidPlugin</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> kotlinPluginVersion: String,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> registry: ToolingModelBuilderRegistry</span><br><span class="line">) : Plugin&lt;Project&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(project: <span class="type">Project</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> androidTarget = KotlinAndroidTarget(<span class="string">""</span>, project)</span><br><span class="line">        <span class="keyword">val</span> tasksProvider = AndroidTasksProvider(androidTarget.targetName)</span><br><span class="line"></span><br><span class="line">        applyToTarget(</span><br><span class="line">            project, androidTarget, tasksProvider,</span><br><span class="line">            kotlinPluginVersion</span><br><span class="line">        )</span><br><span class="line">        registry.register(KotlinModelBuilder(kotlinPluginVersion, androidTarget))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">applyToTarget</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            kotlinTarget: <span class="type">KotlinAndroidTarget</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            tasksProvider: <span class="type">KotlinTasksProvider</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            kotlinPluginVersion: <span class="type">String</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span> &#123;</span><br><span class="line">			<span class="comment">// 省略无关代码</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">val</span> variantProcessor = <span class="keyword">if</span> (compareVersionNumbers(version, legacyVersionThreshold) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LegacyAndroidAndroidProjectHandler(kotlinTools)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> android25ProjectHandlerClass = Class.forName(<span class="string">"org.jetbrains.kotlin.gradle.plugin.Android25ProjectHandler"</span>)</span><br><span class="line">                <span class="keyword">val</span> ctor = android25ProjectHandlerClass.constructors.single &#123;</span><br><span class="line">                    it.parameterTypes.contentEquals(arrayOf(kotlinTools.javaClass))</span><br><span class="line">                &#125;</span><br><span class="line">                ctor.newInstance(kotlinTools) <span class="keyword">as</span> AbstractAndroidProjectHandler&lt;*&gt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            variantProcessor.handleProject(project, kotlinTarget)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插件加载首先执行的是apply函数，跟进applyToTarget函数，省略掉无关代码，重点在最后一句handleProject</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handleProject</span><span class="params">(project: <span class="type">Project</span>, kotlinAndroidTarget: <span class="type">KotlinAndroidTarget</span>)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ignore ..</span></span><br><span class="line">  forEachVariant(project) &#123;</span><br><span class="line">         processVariant(</span><br><span class="line">            it, kotlinAndroidTarget, project, ext, plugin, kotlinOptions, kotlinConfigurationTools.kotlinTasksProvider</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">// ignore ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略掉无关代码，可以代码在processVariant，跟进去看下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">processVariant</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    variantData: <span class="type">V</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    target: <span class="type">KotlinAndroidTarget</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    androidExt: <span class="type">BaseExtension</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    androidPlugin: <span class="type">BasePlugin</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    rootKotlinOptions: <span class="type">KotlinJvmOptionsImpl</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    tasksProvider: <span class="type">KotlinTasksProvider</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    <span class="comment">// 创建 kotlin 任务</span></span><br><span class="line">    <span class="keyword">val</span> kotlinTask = tasksProvider.createKotlinJVMTask(project, kotlinTaskName, compilation)</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    wireKotlinTasks(project, compilation, androidPlugin, androidExt, variantData, javaTask, kotlinTask)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中会创建 kotlin 任务，创建任务入口先留意一下，先看下 wireKotlinTasks 实现：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">wireKotlinTasks</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    compilation: <span class="type">KotlinJvmAndroidCompilation</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    androidPlugin: <span class="type">BasePlugin</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    androidExt: <span class="type">BaseExtension</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    variantData: <span class="type">BaseVariantData</span>&lt;<span class="type">out</span> <span class="type">BaseVariantOutputData</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    javaTask: <span class="type">AbstractCompile</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    kotlinTask: <span class="type">KotlinCompile</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    kotlinTask.dependsOn(*javaTask.dependsOn.toTypedArray())</span><br><span class="line">    </span><br><span class="line">    configureJavaTask(kotlinTask, javaTask, logger)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>configureJavaTask 比较可疑，跟进去看下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureJavaTask</span><span class="params">(kotlinTask: <span class="type">KotlinCompile</span>, javaTask: <span class="type">AbstractCompile</span>, logger: <span class="type">Logger</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    javaTask.dependsOn(kotlinTask)</span><br><span class="line">	<span class="comment">// ignore ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到函数核心是定义了kotlin task在java task之前执行，ok，那我们接下来跟进kotlin task的实现，我们返回上面的创建kotlin task的地方：<code>tasksProvider.createKotlinJVMTask(project, kotlinTaskName, compilation)</code>，跟进去：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">createKotlinJVMTask</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    name: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    compilation: <span class="type">KotlinCompilation</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: KotlinCompile &#123;</span><br><span class="line">    <span class="keyword">val</span> properties = PropertiesProvider(project)</span><br><span class="line">    <span class="keyword">val</span> taskClass = taskOrWorkersTask&lt;KotlinCompile, KotlinCompileWithWorkers&gt;(properties)</span><br><span class="line">    <span class="keyword">return</span> project.tasks.create(name, taskClass).apply &#123;</span><br><span class="line">        configure(<span class="keyword">this</span>, project, properties, compilation)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致意思就是根据任务名称创建任务，任务名称就来自泛型中定义的两个，那我们选择KotlinCompileWithWorkers，看下是如何定义的。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">KotlinCompileWithWorkers</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="meta">@Suppress(<span class="meta-string">"UnstableApiUsage"</span>)</span> <span class="keyword">private</span> <span class="keyword">val</span> workerExecutor: WorkerExecutor</span><br><span class="line">) : KotlinCompile() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compilerRunner</span><span class="params">()</span></span> = GradleCompilerRunnerWithWorkers(<span class="keyword">this</span>, workerExecutor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看来是覆写了父类的compilerRunner，我们跟进去看看GradleCompilerRunnerWithWorkers的实现：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">GradleCompilerRunnerWithWorkers</span></span>(</span><br><span class="line">    task: Task,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> workersExecutor: WorkerExecutor</span><br><span class="line">) : GradleCompilerRunner(task) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">runCompilerAsync</span><span class="params">(workArgs: <span class="type">GradleKotlinCompilerWorkArguments</span>)</span></span> &#123;</span><br><span class="line">        project.logger.kotlinDebug &#123; <span class="string">"Starting Kotlin compiler work from task '<span class="subst">$&#123;task.path&#125;</span>'"</span> &#125;</span><br><span class="line">        <span class="comment">// todo: write tests with Workers enabled;</span></span><br><span class="line">        workersExecutor.submit(GradleKotlinCompilerWork::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>) </span>&#123; config -&gt;</span><br><span class="line">            config.isolationMode = IsolationMode.NONE</span><br><span class="line">            config.forkMode = ForkMode.NEVER</span><br><span class="line">            config.params(workArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心是提交了一个  runnable，这就比较明确了，我们看下GradleKotlinCompilerWork的实现，重点看run的实现：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    <span class="keyword">val</span> exitCode = <span class="keyword">try</span> &#123;</span><br><span class="line">        compileWithDaemonOrFallbackImpl()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">        clearLocalStateDirectories(log, localStateDirectories, <span class="string">"exception when running compiler"</span>)</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (buildFile != <span class="literal">null</span> &amp;&amp; System.getProperty(DELETE_MODULE_FILE_PROPERTY) != <span class="string">"false"</span>) &#123;</span><br><span class="line">            buildFile.delete()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// ignore ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>run 里面的核心就是compileWithDaemonOrFallbackImpl函数，跟进去：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">compileWithDaemonOrFallbackImpl</span><span class="params">()</span></span>: ExitCode &#123;</span><br><span class="line">		<span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">if</span> (executionStrategy == DAEMON_EXECUTION_STRATEGY) &#123;</span><br><span class="line">            <span class="keyword">val</span> daemonExitCode = compileWithDaemon()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>核心代码为：compileWithDaemon()，跟进去：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">compileWithDaemon</span><span class="params">()</span></span>: ExitCode? &#123;</span><br><span class="line">	<span class="comment">// ignore</span></span><br><span class="line">    <span class="keyword">val</span> targetPlatform = <span class="keyword">when</span> (compilerClassName) &#123;</span><br><span class="line">        KotlinCompilerClass.JVM -&gt; CompileService.TargetPlatform.JVM</span><br><span class="line">        KotlinCompilerClass.JS -&gt; CompileService.TargetPlatform.JS</span><br><span class="line">        KotlinCompilerClass.METADATA -&gt; CompileService.TargetPlatform.METADATA</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Unknown compiler type <span class="subst">$compilerClassName</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> exitCode = <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> res = <span class="keyword">if</span> (isIncremental) &#123;</span><br><span class="line">            incrementalCompilationWithDaemon(daemon, sessionId, targetPlatform)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nonIncrementalCompilationWithDaemon(daemon, sessionId, targetPlatform)</span><br><span class="line">        &#125;</span><br><span class="line">        exitCodeFromProcessExitCode(log, res.<span class="keyword">get</span>())</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">        log.warn(<span class="string">"Compilation with Kotlin compile daemon was not successful"</span>)</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ignore</span></span><br><span class="line">    <span class="keyword">return</span> exitCode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择编译平台，根据编译方式执行不同函数，我们选择nonIncrementalCompilationWithDaemon跟进去看下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">nonIncrementalCompilationWithDaemon</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    daemon: <span class="type">CompileService</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    sessionId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    targetPlatform: <span class="type">CompileService</span>.<span class="type">TargetPlatform</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: CompileService.CallResult&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ignore</span></span><br><span class="line">    <span class="keyword">return</span> daemon.compile(sessionId, compilerArgs, compilationOptions, servicesFacade, compilationResults = <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续，目前跟进到CompileServiceImpl#compile，忽略无关重点如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">doCompile(sessionId, daemonReporter, tracer = <span class="literal">null</span>) &#123; _, _ -&gt;</span><br><span class="line">            <span class="keyword">val</span> compiler = <span class="keyword">when</span> (targetPlatform) &#123;</span><br><span class="line">                CompileService.TargetPlatform.JVM -&gt; K2JVMCompiler()</span><br><span class="line">                CompileService.TargetPlatform.JS -&gt; K2JSCompiler()</span><br><span class="line">                CompileService.TargetPlatform.METADATA -&gt; K2MetadataCompiler()</span><br><span class="line">            &#125; <span class="keyword">as</span> CLICompiler&lt;CommonCompilerArguments&gt;</span><br><span class="line">                                                     </span><br><span class="line">            compiler.exec(messageCollector, Services.EMPTY, k2PlatformArgs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续，忽略意义不大的跳转到K2JVMCompiler#doExecute，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doExecute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    arguments: <span class="type">K2JVMCompilerArguments</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    configuration: <span class="type">CompilerConfiguration</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    rootDisposable: <span class="type">Disposable</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    paths: <span class="type">KotlinPaths</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: ExitCode &#123;</span><br><span class="line">  <span class="comment">// ignore</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arguments.buildFile != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            KotlinToJVMBytecodeCompiler.configureSourceRoots(configuration, moduleChunk.modules, buildFile)</span><br><span class="line"></span><br><span class="line">            KotlinToJVMBytecodeCompiler.compileModules(environment, buildFile, moduleChunk.modules)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arguments.script) &#123;</span><br><span class="line">            <span class="keyword">return</span> KotlinToJVMBytecodeCompiler.compileAndExecuteScript(environment, scriptArgs)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            KotlinToJVMBytecodeCompiler.compileBunchOfSources(environment)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: CompilationException) &#123;</span><br><span class="line">        messageCollector.report(</span><br><span class="line">            EXCEPTION,</span><br><span class="line">            OutputMessageUtil.renderException(e),</span><br><span class="line">            MessageUtil.psiElementToMessageLocation(e.element)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> INTERNAL_ERROR</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的KotlinToJVMBytecodeCompiler看起来是比较重要，跟进去其中一个分支看下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">compileBunchOfSources</span><span class="params">(environment: <span class="type">KotlinCoreEnvironment</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">	<span class="comment">// 词法 语法 分析</span></span><br><span class="line">    <span class="keyword">val</span> generationState = analyzeAndGenerate(environment) ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	<span class="comment">// 查找主类</span></span><br><span class="line">    <span class="keyword">val</span> mainClass = findMainClass(generationState, environment.getSourceFiles())</span><br><span class="line">	<span class="comment">// 写入文件</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writeOutput(environment.configuration, generationState.factory, mainClass)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        generationState.destroy()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看来已经找到关键函数入口了，跟进去analyzeAndGenerate，转到KotlinCodegenFacade#doGenerateFiles，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> static void doGenerateFiles(</span><br><span class="line">        <span class="meta">@NotNull</span> Collection&lt;KtFile&gt; files,</span><br><span class="line">        <span class="meta">@NotNull</span> GenerationState state,</span><br><span class="line">        <span class="meta">@NotNull</span> CompilationErrorHandler errorHandler</span><br><span class="line">) &#123;</span><br><span class="line">    state.getCodegenFactory().generateModule(state, files, errorHandler);</span><br><span class="line"></span><br><span class="line">    CodegenFactory.Companion.doCheckCancelled(state);</span><br><span class="line">    state.getFactory().done();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进去CodegenFactory，关注generate开头的函数，又经过无数跳转到，MemberCodegen#genSimpleMember：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void genSimpleMember(<span class="meta">@NotNull</span> KtDeclaration declaration) &#123;</span><br><span class="line">    <span class="keyword">if</span> (declaration instanceof KtNamedFunction) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            functionCodegen.gen((KtNamedFunction) declaration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ProcessCanceledException | CompilationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new CompilationException(<span class="string">"Failed to generate function "</span> + declaration.getName(), e, declaration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (declaration instanceof KtProperty) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            propertyCodegen.gen((KtProperty) declaration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ProcessCanceledException | CompilationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new CompilationException(<span class="string">"Failed to generate property "</span> + declaration.getName(), e, declaration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的生成细节，如果是function就由functionCodegen生成，如果属性就由propertyCodegen生成，跟进去functionCodegen：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void gen(<span class="meta">@NotNull</span> KtNamedFunction function) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (owner.getContextKind() != OwnerKind.DEFAULT_IMPLS || function.hasBody()) &#123;</span><br><span class="line">	<span class="comment">// ignore</span></span><br><span class="line">        generateMethod(JvmDeclarationOriginKt.OtherOrigin(function, functionDescriptor), functionDescriptor, strategy);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// ignore</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>忽略无关的跳转，转到：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> void generateMethodBody(</span><br><span class="line">        <span class="meta">@NotNull</span> JvmDeclarationOrigin origin,</span><br><span class="line">        <span class="meta">@NotNull</span> FunctionDescriptor functionDescriptor,</span><br><span class="line">        <span class="meta">@NotNull</span> MethodContext methodContext,</span><br><span class="line">        <span class="meta">@NotNull</span> FunctionGenerationStrategy strategy,</span><br><span class="line">        <span class="meta">@NotNull</span> MethodVisitor mv,</span><br><span class="line">        <span class="meta">@NotNull</span> JvmMethodSignature jvmSignature,</span><br><span class="line">        boolean staticInCompanionObject</span><br><span class="line">) &#123;</span><br><span class="line">    OwnerKind contextKind = methodContext.getContextKind();</span><br><span class="line">    <span class="keyword">if</span> (!state.getClassBuilderMode().generateBodies || isAbstractMethod(functionDescriptor, contextKind)) &#123;</span><br><span class="line">        generateLocalVariableTable(</span><br><span class="line">                mv,</span><br><span class="line">                jvmSignature,</span><br><span class="line">                functionDescriptor,</span><br><span class="line">                getThisTypeForFunction(functionDescriptor, methodContext, typeMapper),</span><br><span class="line">                new Label(),</span><br><span class="line">                new Label(),</span><br><span class="line">                contextKind,</span><br><span class="line">                typeMapper,</span><br><span class="line">                Collections.emptyList(),</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        mv.visitEnd();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!functionDescriptor.isExternal()) &#123;</span><br><span class="line">        generateMethodBody(mv, functionDescriptor, methodContext, jvmSignature, strategy, memberCodegen, state.getJvmDefaultMode(),</span><br><span class="line">                           state.getLanguageVersionSettings().supportsFeature(LanguageFeature.ReleaseCoroutines));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (staticInCompanionObject) &#123;</span><br><span class="line">        <span class="comment">// native @JvmStatic foo() in companion object should delegate to the static native function moved to the outer class</span></span><br><span class="line">        mv.visitCode();</span><br><span class="line">        FunctionDescriptor staticFunctionDescriptor = JvmStaticInCompanionObjectGenerator</span><br><span class="line">                .createStaticFunctionDescriptor(functionDescriptor);</span><br><span class="line">        Method accessorMethod = typeMapper.mapAsmMethod(memberCodegen.getContext().accessibleDescriptor(staticFunctionDescriptor, <span class="literal">null</span>));</span><br><span class="line">        Type owningType = typeMapper.mapClass((ClassifierDescriptor) staticFunctionDescriptor.getContainingDeclaration());</span><br><span class="line">        generateDelegateToStaticMethodBody(<span class="literal">false</span>, mv, accessorMethod, owningType.getInternalName(), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    endVisit(mv, <span class="literal">null</span>, origin.getElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中有几个地方 visitor 还有 visitEnd，我们看下具体的引用：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.*;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.commons.InstructionAdapter;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.commons.Method;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.util.TraceMethodVisitor;</span><br></pre></td></tr></table></figure>

<p>看来是利用ASM框架去生成字节码，例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果生成一个类使用ClassWriter</span></span><br><span class="line">ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 定义类的方法</span></span><br><span class="line">cw.visitMethod(Opcodes.ACC_PUBLIC+Opcodes.ACC_ABSTRACT, <span class="string">"compareTo"</span>, <span class="string">"(Ljava/lang/Object;)I"</span>,<span class="keyword">null</span>, <span class="keyword">null</span>).visitEnd();</span><br><span class="line"><span class="comment">// 完成</span></span><br><span class="line">cw.visitEnd(); </span><br><span class="line"><span class="comment">// 将cw转换成字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] data = cw.toByteArray();</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"/Users/test/Comparable.class"</span>);</span><br><span class="line">FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">fout.write(data);</span><br><span class="line">fout.close();</span><br></pre></td></tr></table></figure>

<p>ok，kotlin的编译过程基本就是，插件 - kotlin任务 - 编译器 - 生成方法、属性 - 利用ASM生成字节码</p>
<h4 id="Kotlin-跨平台"><a href="#Kotlin-跨平台" class="headerlink" title="Kotlin 跨平台"></a>Kotlin 跨平台</h4><p>kotlin 在语法上是支持跨平台的，是编译期跨平台，而不是容器类跨平台，目前支持JS、iOS、Server。</p>
]]></content>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>加固</title>
    <url>/2018/10/30/%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>加固需要什么样的知识？</p>
<a id="more"></a>

<h3 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h3><p>近期有机会研究了下加固技术，发现涉及的知识面非常广泛，专门记录下。</p>
<p>加固技术通常按代来分。</p>
<p>第一代就是我们通常可见的混淆，把代码转换为a b c d 这样的字符，这样做的目的就是增加阅读难度，看到的代码和实际的代码结构是有区别的，但是这样关键源码还是可以获取到的。</p>
<p>后来，想着能不能对代码进行加密，在运行时在解密，这样就有了第二代技术，就是针对Dex的加密或者变形，让破坏者得到的是坏掉的文件或者加密过的文件，相当于在第一代的时候，我们是把钱撕成几段，但是还是可以被别人拼成完好的钱的，后来我们就把钱锁到了保险柜里面，这样比第一代安全了些。</p>
<p>这个时候的关键就是该把保险柜的钥匙放在哪？加密算法如果放在Java层面还是容易被人反编拿到，放在C层看起来好像是安全了些，但是其他人还是可以试探性的获取相应的密钥，就像你是把钥匙放在门口的垫子下面，还是交给保姆，交给保姆也没办法保证熟人花言巧语把钥匙骗过来，对吧。但是相比把钱直接摆在外边已经安全了很多。</p>
<p>第二代的通用做法就是加壳，简单的理解就是打包的时候放进去的是加密的Dex文件，在运行的时候在动态解密，再用classloader动态加载，达到加密的目的。</p>
<p>涉及到的技术</p>
<ol>
<li>JVM 原理</li>
<li>Dalvik 原理</li>
<li>Art 优化原理</li>
<li>Api 各个版本的兼容性</li>
<li>等等</li>
</ol>
<h4 id="VMP技术"><a href="#VMP技术" class="headerlink" title="VMP技术"></a>VMP技术</h4><p>持续更新。。。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux I/O 多路复用</title>
    <url>/2018/09/10/Linux-I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>神秘的多路复用，我们看看在系统层级是怎么实现的？</p>
<a id="more"></a>
<blockquote>
<p> 读书笔记，Linux 系统编程第二章，I/O 多路复用</p>
</blockquote>
<p>Linux 提供了三种I/O多路复用方案：select、poll和epoll。</p>
<h3 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h3><p>更新中。。。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 引用搜索原理</title>
    <url>/2018/05/22/IntelliJ%20IDE%20%E6%90%9C%E7%B4%A2%E5%BC%95%E7%94%A8%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>IntelliJ IDEA 如何实现引用搜索？</p>
<a id="more"></a>
<p>IntelliJ IDEA 我们都很熟悉，强大的开源IDE。Android Studio 就是基于IDEA社区版开发的。平常我们会经常使用到Find Usage 功能，查找一个类或者方法的引用，那我们看看它内部是如何实现的？</p>
<p>IDEA 在Github上是开源的，地址：<a href="https://github.com/JetBrains/intellij-community" target="_blank" rel="noopener">https://github.com/JetBrains/intellij-community</a>。clone 下来可以直接用它自己打开，感觉很奇妙，自己可以开发自己:-D</p>
<p>IDEA整个源码量是非常庞大的，只是Java和Python源代码加起来就有<strong>四百多万行</strong>。从这样庞大的项目中找到某个功能的入口，寻找相应的测试用例是个比较好的方法，那我们试着搜下有没有Find Usage的测试用例，果然在com.intellij.java.psi.search包下有个类是FindUsagesTest，继续看下这个类里面有没有我们想要的入口，测试用例里面大部分都引用了一个函数：<code>ReferencesSearch.search</code>，看来感觉有点像，跟进去看看这个函数的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Searches for references to the specified element in the scope in which such references are expected to be found, according to</span></span><br><span class="line"><span class="comment"> * dependencies and access rules.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element the element (declaration) the references to which are requested.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the query allowing to enumerate the references.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query&lt;PsiReference&gt; <span class="title">search</span><span class="params">(@NotNull PsiElement element)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> search(element, GlobalSearchScope.allScope(PsiUtilCore.getProjectInReadAction(element)), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概就是根据搜索的范围，去找到这个element的引用，注意这个函数返回的是一个Query接口。</p>
<p>搜索引用大概就是这个函数了，继续跟进去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query&lt;PsiReference&gt; <span class="title">search</span><span class="params">(@NotNull PsiElement element, @NotNull SearchScope searchScope, <span class="keyword">boolean</span> ignoreAccessScope)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> search(<span class="keyword">new</span> SearchParameters(element, searchScope, ignoreAccessScope));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>根据上一步的参数组成搜索参数，忽略无关紧要的细节，继续。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Searches for references to the specified element according to the specified parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameters the parameters for the search (contain also the element the references to which are requested).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the query allowing to enumerate the references.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Query&lt;PsiReference&gt; <span class="title">search</span><span class="params">(@NotNull <span class="keyword">final</span> SearchParameters parameters)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Query&lt;PsiReference&gt; result = INSTANCE.createQuery(parameters);</span><br><span class="line">  <span class="keyword">if</span> (parameters.isSharedOptimizer) &#123;</span><br><span class="line">    <span class="keyword">return</span> uniqueResults(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> SearchRequestCollector requests = parameters.getOptimizer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> PsiElement element = parameters.getElementToSearch();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> uniqueResults(<span class="keyword">new</span> MergeQuery&lt;&gt;(result, <span class="keyword">new</span> SearchRequestQuery(PsiUtilCore.getProjectInReadAction(element), requests)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一步大概就是，创建了两个Query，然后进行了合并，返回UniqueResultsQuery，这里面的SearchRequestQuery感觉比较重要，先着重留意下。返回的Query，肯定是为了让上层调用查找接口，那我们看下这个Query里面的查找接口是如何实现的，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;T&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;T&gt; result = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">  Processor&lt;T&gt; processor = Processors.cancelableCollectProcessor(result);</span><br><span class="line">  forEach(processor);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个意思就比较清楚了，把一个结果的List作为引用经过处理，最后返回给上层。Processor只是把结果List进行暂存，处理还是在forEach里面，forEach里面还是调用了myOriginal的Query的forEach，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(@NotNull Set&lt;M&gt; processedElements, @NotNull Processor&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> myOriginal.forEach(<span class="keyword">new</span> MyProcessor(processedElements, consumer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>myOriginal就是刚刚的MergeQuery，那看下MergeQuery里面的forEach做了什么，最后调用了processSubQuery，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;V extends T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">processSubQuery</span><span class="params">(@NotNull Query&lt;V&gt; subQuery, @NotNull <span class="keyword">final</span> Processor&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> subQuery.forEach(consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是MergeQuery最后调用了各个子Query的forEach，上面我们注意到SearchRequestQuery嫌疑比较大，先跟进去看下，forEach最后调用到了processResults，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">processResults</span><span class="params">(@NotNull Processor&lt;? <span class="keyword">super</span> PsiReference&gt; consumer)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> PsiSearchHelper.getInstance(myProject).processRequests(myRequests, consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面调用到了PsiSearchHelper的processRequests，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processRequests</span><span class="params">(@NotNull SearchRequestCollector collector, @NotNull Processor&lt;? <span class="keyword">super</span> PsiReference&gt; processor)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="keyword">if</span> (!processGlobalRequestsOptimized(globals, progress, localProcessors)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RequestWithProcessor local : locals) &#123;</span><br><span class="line">      progress.checkCanceled();</span><br><span class="line">      <span class="keyword">if</span> (!processSingleRequest(local.request, local.refProcessor)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中省略掉了一些无关代码，注意到有个processGlobalRequestsOptimized还有个processSingleRequest，先看下processGlobalRequestsOptimized的实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processGlobalRequestsOptimized</span><span class="params">(@NotNull MultiMap&lt;Set&lt;IdIndexEntry&gt;, RequestWithProcessor&gt; singles,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               @NotNull ProgressIndicator progress,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               @NotNull <span class="keyword">final</span> Map&lt;RequestWithProcessor, Processor&lt;PsiElement&gt;&gt; localProcessors)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (singles.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> Collection&lt;? extends RequestWithProcessor&gt; requests = singles.values();</span><br><span class="line">    <span class="keyword">if</span> (requests.size() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> RequestWithProcessor theOnly = requests.iterator().next();</span><br><span class="line">      <span class="keyword">return</span> processSingleRequest(theOnly.request, theOnly.refProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>忽略掉无关代码，发现当请求为1的时候，还是调用了上层的processSingleRequest，那我们就先分析简单情况，跟进去看下实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processSingleRequest</span><span class="params">(@NotNull PsiSearchRequest single, @NotNull Processor&lt;? <span class="keyword">super</span> PsiReference&gt; consumer)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> EnumSet&lt;Options&gt; options = EnumSet.of(Options.PROCESS_ONLY_JAVA_IDENTIFIERS_IF_POSSIBLE);</span><br><span class="line">  <span class="keyword">if</span> (single.caseSensitive) options.add(Options.CASE_SENSITIVE_SEARCH);</span><br><span class="line">  <span class="keyword">if</span> (shouldProcessInjectedPsi(single.searchScope)) options.add(Options.PROCESS_INJECTED_PSI);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bulkProcessElementsWithWord(single.searchScope, single.word, single.searchContext, options, single.containerName,</span><br><span class="line">                                     adaptProcessor(single, consumer)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先配置了请求参数，然后调用了bulkProcessElementsWithWord，先看下adaptProcessor实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BulkOccurrenceProcessor <span class="title">adaptProcessor</span><span class="params">(@NotNull PsiSearchRequest singleRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     @NotNull Processor&lt;? <span class="keyword">super</span> PsiReference&gt; consumer)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">final</span> RequestResultProcessor wrapped = singleRequest.processor;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> BulkOccurrenceProcessor() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(@NotNull PsiElement scope, @NotNull <span class="keyword">int</span>[] offsetsInScope, @NotNull StringSearcher searcher)</span> </span>&#123;</span><br><span class="line">      ......</span><br><span class="line">        <span class="keyword">return</span> LowLevelSearchUtil.processElementsAtOffsets(scope, searcher, !ignoreInjectedPsi,</span><br><span class="line">                                                           getOrCreateIndicator(), offsetsInScope,</span><br><span class="line">                                                           (element, offsetInElement) -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (ignoreInjectedPsi &amp;&amp; element <span class="keyword">instanceof</span> PsiLanguageInjectionHost) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">return</span> wrapped.processTextOccurrence(element, offsetInElement, consumer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>adaptProcessor最后还是调用了wrapped.processTextOccurrence调用，先留意下这个地方，从上一层继续向下看，bulkProcessElementsWithWord的实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bulkProcessElementsWithWord</span><span class="params">(@NotNull SearchScope searchScope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            @NotNull <span class="keyword">final</span> String text,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">final</span> <span class="keyword">short</span> searchContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            @NotNull EnumSet&lt;Options&gt; options,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            @Nullable String containerName, @NotNull <span class="keyword">final</span> BulkOccurrenceProcessor processor)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (searchScope <span class="keyword">instanceof</span> GlobalSearchScope) &#123;</span><br><span class="line">    StringSearcher searcher = <span class="keyword">new</span> StringSearcher(text, options.contains(Options.CASE_SENSITIVE_SEARCH), <span class="keyword">true</span>,</span><br><span class="line">                                                 searchContext == UsageSearchContext.IN_STRINGS,</span><br><span class="line">                                                 options.contains(Options.PROCESS_ONLY_JAVA_IDENTIFIERS_IF_POSSIBLE));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processElementsWithTextInGlobalScope((GlobalSearchScope)searchScope, searcher, searchContext,</span><br><span class="line">                                                options.contains(Options.CASE_SENSITIVE_SEARCH), containerName, progress, processor);</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> JobLauncher.getInstance().invokeConcurrentlyUnderProgress(Arrays.asList(scopeElements), progress, localProcessor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进去看下processElementsWithTextInGlobalScope的实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processElementsWithTextInGlobalScope</span><span class="params">(@NotNull <span class="keyword">final</span> GlobalSearchScope scope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     @NotNull <span class="keyword">final</span> StringSearcher searcher,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     <span class="keyword">final</span> <span class="keyword">short</span> searchContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     <span class="keyword">final</span> <span class="keyword">boolean</span> caseSensitively,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     @Nullable String containerName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     @NotNull ProgressIndicator progress,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     @NotNull <span class="keyword">final</span> BulkOccurrenceProcessor processor)</span> </span>&#123;</span><br><span class="line">  progress.pushState();</span><br><span class="line">  <span class="keyword">boolean</span> result;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    progress.setText(PsiBundle.message(<span class="string">"psi.scanning.files.progress"</span>));</span><br><span class="line"></span><br><span class="line">    String text = searcher.getPattern();</span><br><span class="line">    Set&lt;VirtualFile&gt; fileSet = <span class="keyword">new</span> THashSet&lt;&gt;();</span><br><span class="line">    getFilesWithText(scope, searchContext, caseSensitively, text, fileSet);</span><br><span class="line"></span><br><span class="line">    progress.setText(PsiBundle.message(<span class="string">"psi.search.for.word.progress"</span>, text));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Processor&lt;PsiElement&gt; localProcessor = localProcessor(progress, searcher, processor);</span><br><span class="line">    ......</span><br><span class="line">    result = fileSet.isEmpty() || processPsiFileRoots(<span class="keyword">new</span> ArrayList&lt;&gt;(fileSet), fileSet.size(), <span class="number">0</span>, progress, localProcessor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    progress.popState();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>localProcessor比较可疑，跟进去看下，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Processor&lt;PsiElement&gt; <span class="title">localProcessor</span><span class="params">(@NotNull <span class="keyword">final</span> ProgressIndicator progress,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    @NotNull <span class="keyword">final</span> StringSearcher searcher,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    @NotNull <span class="keyword">final</span> BulkOccurrenceProcessor processor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReadActionProcessor&lt;PsiElement&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processInReadAction</span><span class="params">(PsiElement scopeElement)</span> </span>&#123;</span><br><span class="line">      ......</span><br><span class="line">      <span class="keyword">return</span> scopeElement.isValid() &amp;&amp;</span><br><span class="line">             processor.execute(scopeElement, LowLevelSearchUtil.getTextOccurrencesInScope(scopeElement, searcher, progress), searcher);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终于，看到了processor的execute调用的地方，这个processor就是adaptProcessor返回的，执行的就是wrapped.processTextOccurrence，wrapped指向的processor就是SingleTargetRequestResultProcessor。</p>
<p>那这个wrapped是什么时候注入进来的呢？还记得在新建MergeQuery时有两个Query一个是Search，另一个就是ExecutorsQuery，<br>这个Query在执行时会根据参数通过一系列流程把wrapped指向SingleTargetRequestResultProcessor类型的Processor</p>
<p>所以，最后是执行的SingleTargetRequestResultProcessor的processTextOccurrence，看下实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processTextOccurrence</span><span class="params">(@NotNull PsiElement element, <span class="keyword">int</span> offsetInElement, @NotNull <span class="keyword">final</span> Processor&lt;? <span class="keyword">super</span> PsiReference&gt; consumer)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">final</span> List&lt;PsiReference&gt; references = ourReferenceService.getReferences(element,</span><br><span class="line">                                                                          <span class="keyword">new</span> PsiReferenceService.Hints(myTarget, offsetInElement));</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进去getReferences实现，一路跳转…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PsiReferenceRegistrarImpl <span class="title">createRegistrar</span><span class="params">(Language language)</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  List&lt;PsiReferenceProviderBean&gt; referenceProviderBeans = REFERENCE_PROVIDER_EXTENSION.allForLanguageOrAny(language);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> PsiReferenceProviderBean providerBean : referenceProviderBeans) &#123;</span><br><span class="line">    <span class="keyword">final</span> ElementPattern&lt;PsiElement&gt; pattern = providerBean.createElementPattern();</span><br><span class="line">    <span class="keyword">if</span> (pattern != <span class="keyword">null</span>) &#123;</span><br><span class="line">      registrar.registerReferenceProvider(pattern, <span class="keyword">new</span> PsiReferenceProvider() &#123;</span><br><span class="line"></span><br><span class="line">        PsiReferenceProvider myProvider;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PsiReference[] getReferencesByElement(<span class="meta">@NotNull</span> PsiElement element, <span class="meta">@NotNull</span> ProcessingContext context) &#123;</span><br><span class="line">          <span class="keyword">if</span> (myProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            myProvider = providerBean.instantiate();</span><br><span class="line">            <span class="keyword">if</span> (myProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">              myProvider = NULL_REFERENCE_PROVIDER;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> myProvider.getReferencesByElement(element, context);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registrar.markInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> registrar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终调用的是PsiReferenceProvider的getReferencesByElement，myProvider又是通过PsiReferenceProviderBean转化而来的，看下这里面做了什么事情，然后发现如下注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a &#123;<span class="doctag">@link</span> PsiReferenceProvider&#125; in plugin.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PsiReferenceProviderBean</span> <span class="keyword">extends</span> <span class="title">AbstractExtensionPointBean</span> <span class="keyword">implements</span> <span class="title">KeyedLazyInstance</span>&lt;<span class="title">PsiReferenceProviderBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExtensionPointName&lt;PsiReferenceProviderBean&gt; EP_NAME =</span><br><span class="line">    <span class="keyword">new</span> ExtensionPointName&lt;&gt;(<span class="string">"com.intellij.psi.referenceProvider"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Attribute</span>(<span class="string">"language"</span>)</span><br><span class="line">  <span class="keyword">public</span> String language = Language.ANY.getID();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Attribute</span>(<span class="string">"providerClass"</span>)</span><br><span class="line">  <span class="keyword">public</span> String className;</span><br></pre></td></tr></table></figure>

<p>原来是在plugin.xml 里面注册PsiReferenceProvider类型的Class，用时再去反射实例化调用，那我们现在看看有哪些类继承了PsiReferenceProvider，其中的JavaClassReferenceProvider应该是我们想要的实现，跟进getReferencesByElement，又是一路跳转到JavaClassReferenceSet的reparse，终于找到了类引用搜索最核心的东西，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reparse</span><span class="params">(@NotNull String str, @NotNull PsiElement element, <span class="keyword">final</span> <span class="keyword">boolean</span> isStaticImport, JavaClassReferenceSet context)</span> </span>&#123;</span><br><span class="line">  myElement = element;</span><br><span class="line">  myContext = context;</span><br><span class="line">  List&lt;JavaClassReference&gt; referencesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">int</span> currentDot = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> referenceIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">boolean</span> allowDollarInNames = isAllowDollarInNames();</span><br><span class="line">  <span class="keyword">boolean</span> allowSpaces = isAllowSpaces();</span><br><span class="line">  <span class="keyword">boolean</span> allowGenerics = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> allowWildCards = JavaClassReferenceProvider.ALLOW_WILDCARDS.getBooleanValue(getOptions());</span><br><span class="line">  <span class="keyword">boolean</span> allowGenericsCalculated = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> parsingClassNames = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (parsingClassNames) &#123;</span><br><span class="line">    <span class="keyword">int</span> nextDotOrDollar = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> curIndex = currentDot + <span class="number">1</span>; curIndex &lt; str.length(); ++curIndex) &#123;</span><br><span class="line">      <span class="keyword">char</span> ch = str.charAt(curIndex);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ch == DOT || ch == DOLLAR &amp;&amp; allowDollarInNames) &#123;</span><br><span class="line">        nextDotOrDollar = curIndex;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ch == LT || ch == COMMA) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allowGenericsCalculated) &#123;</span><br><span class="line">          allowGenerics = !isStaticImport &amp;&amp; PsiUtil.isLanguageLevel5OrHigher(element);</span><br><span class="line">          allowGenericsCalculated = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (allowGenerics) &#123;</span><br><span class="line">          nextDotOrDollar = curIndex;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextDotOrDollar == -<span class="number">1</span>) &#123;</span><br><span class="line">      nextDotOrDollar = currentDot + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = nextDotOrDollar; i &lt; str.length() &amp;&amp; Character.isJavaIdentifierPart(str.charAt(i)); ++i) nextDotOrDollar++;</span><br><span class="line">      parsingClassNames = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">int</span> j = skipSpaces(nextDotOrDollar, str.length(), str, allowSpaces);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (j &lt; str.length()) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = str.charAt(j);</span><br><span class="line">        <span class="keyword">boolean</span> recognized = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'['</span>) &#123;</span><br><span class="line">          j = skipSpaces(j + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">          <span class="keyword">if</span> (j &lt; str.length() &amp;&amp; str.charAt(j) == <span class="string">']'</span>) &#123;</span><br><span class="line">            j = skipSpaces(j + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">            recognized = j == str.length();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Boolean aBoolean = JavaClassReferenceProvider.JVM_FORMAT.getValue(getOptions());</span><br><span class="line">        <span class="keyword">if</span> (!recognized &amp;&amp; (aBoolean == <span class="keyword">null</span> || !aBoolean.booleanValue())) &#123;</span><br><span class="line">          nextDotOrDollar = -<span class="number">1</span>; <span class="comment">// abort resolve</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextDotOrDollar != -<span class="number">1</span> &amp;&amp; nextDotOrDollar &lt; str.length()) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = str.charAt(nextDotOrDollar);</span><br><span class="line">      <span class="keyword">if</span> (c == LT) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> recognized = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> start = skipSpaces(nextDotOrDollar + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">        <span class="keyword">int</span> j = str.lastIndexOf(GT);</span><br><span class="line">        <span class="keyword">int</span> end = skipSpacesBackward(j, <span class="number">0</span>, str, allowSpaces);</span><br><span class="line">        <span class="keyword">if</span> (end != -<span class="number">1</span> &amp;&amp; end &gt; start) &#123;</span><br><span class="line">          <span class="keyword">if</span> (myNestedGenericParameterReferences == <span class="keyword">null</span>) myNestedGenericParameterReferences = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">          myNestedGenericParameterReferences.add(<span class="keyword">new</span> JavaClassReferenceSet(</span><br><span class="line">            str.substring(start, end), myElement, myStartInElement + start, isStaticImport, myProvider, <span class="keyword">this</span>));</span><br><span class="line">          parsingClassNames = <span class="keyword">false</span>;</span><br><span class="line">          j = skipSpaces(j + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">          recognized = j == str.length();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!recognized) &#123;</span><br><span class="line">          nextDotOrDollar = -<span class="number">1</span>; <span class="comment">// abort resolve</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (c == COMMA &amp;&amp; myContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (myContext.myNestedGenericParameterReferences == <span class="keyword">null</span>) myContext.myNestedGenericParameterReferences = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> start = skipSpaces(nextDotOrDollar + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">        myContext.myNestedGenericParameterReferences.add(<span class="keyword">new</span> JavaClassReferenceSet(</span><br><span class="line">          str.substring(start), myElement, myStartInElement + start, isStaticImport, myProvider, <span class="keyword">this</span>));</span><br><span class="line">        parsingClassNames = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxIndex = nextDotOrDollar &gt; <span class="number">0</span> ? nextDotOrDollar : str.length();</span><br><span class="line">    <span class="keyword">int</span> beginIndex = skipSpaces(currentDot + <span class="number">1</span>, maxIndex, str, allowSpaces);</span><br><span class="line">    <span class="keyword">int</span> endIndex = skipSpacesBackward(maxIndex, beginIndex, str, allowSpaces);</span><br><span class="line">    <span class="keyword">boolean</span> skipReference = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (allowWildCards &amp;&amp; str.charAt(beginIndex) == QUESTION) &#123;</span><br><span class="line">      <span class="keyword">int</span> next = skipSpaces(beginIndex + <span class="number">1</span>, endIndex, str, allowSpaces);</span><br><span class="line">      <span class="keyword">if</span> (next != beginIndex + <span class="number">1</span>) &#123;</span><br><span class="line">        String keyword = str.startsWith(EXTENDS, next) ? EXTENDS : str.startsWith(SUPER, next) ? SUPER : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (keyword != <span class="keyword">null</span>) &#123;</span><br><span class="line">          next = skipSpaces(next + keyword.length(), endIndex, str, allowSpaces);</span><br><span class="line">          beginIndex = next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (endIndex == beginIndex + <span class="number">1</span>) &#123;</span><br><span class="line">        skipReference = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!skipReference) &#123;</span><br><span class="line">      TextRange textRange = TextRange.create(myStartInElement + beginIndex, myStartInElement + endIndex);</span><br><span class="line">      JavaClassReference currentContextRef = createReference(</span><br><span class="line">        referenceIndex, str.substring(beginIndex, endIndex), textRange, isStaticImport);</span><br><span class="line">      referenceIndex++;</span><br><span class="line">      referencesList.add(currentContextRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((currentDot = nextDotOrDollar) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myReferences = referencesList.toArray(<span class="keyword">new</span> JavaClassReference[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很长，但是基本可以理解为就是一个简单的语言Parser，和我最初的猜想也是相符的，就是基于源文件字符解析，引用相关的信息都包含在返回的PsiReference列表里面。</p>
<p>IDEA 确实有一个优秀的架构，虽然也有槽点:-D</p>
]]></content>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件I/O</title>
    <url>/2018/05/16/Linux%20%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文件如何进行读写？</p>
<a id="more"></a>

<blockquote>
<p> 读书笔记，Linux 系统编程 第二章 文件I/O</p>
</blockquote>
<p>Unix 系统主要是通过文件表示的，因此这些章节会设计Unix系统的核心。</p>
<p>在对文件进行读写操作之前，首先需要打开文件。内核会为每个进程维护一个打开文件的列表，该列表就是文件表。文件表示由一些非负整数进行索引，这些非负整数称为文件描述符。列表的每一项是一个打开文件的信息，包括指向该文件索引节点内存拷贝的指针以及关联的元数据，如文件位置指针和访问模式。用户空间和内核空间都使用文件描述符作为唯一cookies，打开文件会返回文件描述符，后续操作都把文件描述符作为基本参数。</p>
<p>文件描述符使用C 语言的int类型表示。每个Linux 进程能开发的文件数是有上限的，文件描述符的范围从0开始，到上限值减一，默认情况下，上限值为1024，也可以对它进行配置，最大为1048576。因为负数不是合法的文件描述符，所以当函数出错不能返回有效的文件描述符时，通常会返回-1。</p>
<p>通常，每个进程至少包含三个文件描述符：0、1、2，除非显式关闭这些描述符。0表示标准输入、1表示标准输出、2表示标准错误。一般而言，stdin是连接到终端的输入设备（通常是键盘），而stdout和stderr是终端的屏幕。用户可以重定向这些文件描述符，甚至可以通过管道把一个程序的输出作为另一个程序的输入。shell正是通过这种方式实现重定向和管道的。</p>
<p>实际上，文件描述符也可以访问设备文件、管道、快速用户空间互斥、先进先出缓冲区和套接字。遵循一切皆文件的理念，几乎任何能够读写的东西都可以通过文件描述符来访问。</p>
<p>默认情况下，子进程会维护一份父进程的文件表副本。在副本中，打开文件列表和其访问模式、当前文件位置以及其他元数据，都和父进程维护的文件表相同，但是存在一点区别：当子进程关闭一个文件时，不会影响到父进程的文件表。虽然一般情况下子进程会自己持有一份文件表，但是子进程和父进程也可以共享文件表。</p>
<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p><strong>系统调用open</strong><br>如果系统调用open执行成功，会返回文件描述符，指向路径名 name 所指定的文件。文件位置即文件的起始位置（0），文件打开方式是根据参数flags值来确定。</p>
<p>flags 参数是由一个或多个标志位的按位或组合。支持三种访问模式：O_RDONLY、O_WRONLY 或 O_RDWR，这三种模式分别表示为只读、只写或读写。</p>
<p>flags 参数还可以和以下的值进行按位或运算，修改打开文件的行为；</p>
<p>O_APPEND</p>
<p>文件以追加模式打开。也就是说，在每次写操作之前，将会更新文件位置指针，指向文件末尾。即使有另一个进程也在向该文件写数据，以追加模式打开的进程在最后一次写操作时，还是会更新文件位置指针，指向文件末尾。</p>
<p>O_ASYNC 这个标志位只适用于FIFO、管道、socket和终端，不适用于普通文件。</p>
<p>O_CLOEXEC  执行时关闭 标志位。在执行新的进程时，文件会自动关闭。</p>
<p>O_CREAT 当参数name指定的文件不存在时，内核自动创建。</p>
<p>O_DIRECT 打开文件用于直接I/O</p>
<p>O_DIRECTORY 如果参数name不是目录，open调用会失败。</p>
<p>O_EXCL 当和标志位O_CREAT一起使用时，如果参数name指定的文件已经存在，会导致open调用失败，用于防止创建文件时出现竞争。</p>
<p>O_LARGEFILE 文件偏移使用64位整数表示，可以支持大于2GB文件。</p>
<p>O_NOATIME 在读文件时，不会更新该文件的最后访问时间。可以避免为了更新每个文件的索引节点而导致的大量写操作。<br>等等…</p>
<p><strong>新建文件所有者</strong></p>
<p>确定新建文件的所有者很简单：文件所有者的uid即创建该文件的进程的有效uid。</p>
<p><strong>creat函数</strong></p>
<p>因为有些参数组合经常使用，因为专门有个系统调用提供这个功能：int creat(const char *name, mode_t mode); 这个函数名creat少了个e。UNIX之父Ken Thompson开玩笑说他在UNIX设计中感到最遗憾的就是漏掉了这个字母。</p>
<p><strong>返回值和错误码</strong></p>
<p>系统调用open和creat在成功时都会返回文件描述符。出错时，返回-1，并把errno设置成相应的错误值。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Pins 工程结构</title>
    <url>/2018/05/06/Android%20Pins%20%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pins 工程结构能解决什么问题？</p>
<a id="more"></a>
<p>近期我们听到一些团队在做工程化方面的事情，其中都提到了Pins 工程结构，最先提出这个概念的是微信团队：<a href="https://mp.weixin.qq.com/s/mkhCzeoLdev5TyO6DqHEdw" target="_blank" rel="noopener">微信Android模块化架构重构实践</a>，在后来看到美团外卖也做了这个事情：<a href="https://tech.meituan.com/meituan_food_delivery_android_architecture_evolution.html" target="_blank" rel="noopener">美团外卖Android平台化架构演进实践</a>。</p>
<p><strong>那Pins工程结构是什么？</strong></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195725.png" alt></p>
<p>上面这张图就是Pins工程结构。</p>
<p><strong>那有什么用？或者能解决什么问题？</strong></p>
<p>如果你的产品有多条业务线，每一期产品有上百个需求，各个业务线业务之间有非常多的交集。比如，一个业务线引用了五个业务线，其他业务线也是类似的引用，依次类推，相互引用不重复的话为5的5次方等于3125，如果业务线增长这个复杂度也是呈几何数增长，那我们在现有的工程环境下如何做呢？简单的方法就是都放在同一个Gradle Module 里面相互引用，各个业务线之间用包名做区分，但是各个包之间也是可以相互引用，久而久之就会发现，代码变成了一锅粥…变成一锅粥的后果也是显然的，不能独立拆分，代码合并非常容易冲突浪费时间等等，各种后果。下图是微信业务之间的引用情况，实际情况可能比这更糟糕。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200106.png" alt></p>
<p>Pins结构就较好的解决了上面的问题，各个业务线之间都是一个Pins模块，模块之间<strong>根据规定引用该引用的</strong>，这样业务线之间的代码边界就会比较清楚。</p>
<p>接下来我们看下如何实现，这里只提供下简单思路。</p>
<p><strong>业务构建改造</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        <span class="keyword">def</span> dirs = [<span class="string">'p_widget'</span>, <span class="string">'p_theme'</span>,</span><br><span class="line">                    <span class="string">'p_shop'</span>, <span class="string">'p_shopcart'</span>,</span><br><span class="line">                    <span class="string">'p_submit_order'</span>,<span class="string">'p_multperson'</span>,<span class="string">'p_again_order'</span>,</span><br><span class="line">                    <span class="string">'p_location'</span>, <span class="string">'p_log'</span>,<span class="string">'p_ugc'</span>,<span class="string">'p_im'</span>,<span class="string">'p_share'</span>]</span><br><span class="line">        dirs.each &#123; dir -&gt;</span><br><span class="line">            java.srcDir(<span class="string">"src/$dir/java"</span>)</span><br><span class="line">            res.srcDir(<span class="string">"src/$dir/res"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例就简单实现了Pins结构，指定各模块到路径到srcDir，p_shop、p_shopcart等Pins模块构建时会合并到主工程。上面只是一个简单示例，实际情况可以做很多动态化控制，比如动态生成以及扫描当前路径下的Pins模块、根据配置动态合成Pins模块等等。下面是一个稍微复杂的例子。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> src_dir = <span class="keyword">new</span> File(projectDir, <span class="string">'src'</span>)</span><br><span class="line"><span class="comment">// 扫描当前模块下的Pins模块，并生成List</span></span><br><span class="line"><span class="keyword">def</span> p_module_names =</span><br><span class="line">            src_dir</span><br><span class="line">                    .list()</span><br><span class="line">                    .toList()</span><br><span class="line">                    .stream()</span><br><span class="line">                    .filter(</span><br><span class="line">                    <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">boolean</span> test(String name) &#123;</span><br><span class="line">                            <span class="keyword">return</span> name == <span class="string">'main'</span> || (name.startsWith(<span class="string">'p_'</span>) &amp;&amp; <span class="keyword">new</span> File(src_dir, name).isDirectory())</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList())</span><br><span class="line"><span class="comment">// 把生成的List合成为srcDir格式</span></span><br><span class="line"><span class="keyword">def</span> p_src_dirs =</span><br><span class="line">            p_module_names</span><br><span class="line">                    .stream()</span><br><span class="line">                    .map(</span><br><span class="line">                    <span class="keyword">new</span> Function() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        Object apply(Object module) &#123;</span><br><span class="line">                            <span class="keyword">return</span> [<span class="string">'src'</span>, module, <span class="string">'java'</span>].join(<span class="string">'/'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> p_res_dirs =</span><br><span class="line">            p_module_names</span><br><span class="line">                    .stream()</span><br><span class="line">                    .map(</span><br><span class="line">                    <span class="keyword">new</span> Function() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        Object apply(Object module) &#123;</span><br><span class="line">                            <span class="keyword">return</span> [<span class="string">'src'</span>, module, <span class="string">'res'</span>].join(<span class="string">'/'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList())</span><br><span class="line"><span class="comment">// 指定路径</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            manifest.srcFile <span class="string">"src/main/AndroidManifest.xml"</span></span><br><span class="line">            java.srcDirs = p_src_dirs</span><br><span class="line">            res.srcDirs = p_res_dirs</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码边界检查</strong></p>
<p>上面只是表面上把代码进行了分割，但是各Pins模块还是可以引用到其他模块的代码，一般的操作是根据模块的配置，在<strong>编译期</strong>做代码检查，检查是否引用了不该引用的模块。</p>
<p>那如何定义项目的配置，这个配置可以是文本文件、DSL等等，微信通过project.properties来指定编译依赖关系。</p>
<p>这里简单用groovy格式文件举例：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task code_check &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="comment">// 加载pins模块依赖文件</span></span><br><span class="line">        <span class="keyword">def</span> dependenciesFile = <span class="keyword">new</span> File(projectDir, <span class="string">'src/p_module1/dependencies.groovy'</span>)</span><br><span class="line">        <span class="keyword">def</span> ref = <span class="literal">null</span></span><br><span class="line">        dependenciesFile.readLines().each &#123;</span><br><span class="line">            ref = it</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扫描pins模块内部源文件</span></span><br><span class="line">        File javaDir = <span class="keyword">new</span> File(projectDir, <span class="string">'src/p_module1/java'</span>)</span><br><span class="line">        Files.walkFileTree(javaDir.toPath(), <span class="keyword">new</span> FileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult visitFile(Path file, BasicFileAttributes attrs) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                file.readLines().each &#123;</span><br><span class="line">                    <span class="keyword">if</span> (it.endsWith(ref)) &#123;</span><br><span class="line">                        System.err.println(<span class="string">"p_module1模块引用了不能引用的模块！"</span>)</span><br><span class="line">                        <span class="keyword">return</span> FileVisitResult.TERMINATE</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult visitFileFailed(Path file, IOException exc) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult postVisitDirectory(Path dir, IOException exc) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个任务，先从p_module1的dependencies文件里读出不能包含的模块，然后检索p_module1里面的文件是不是引用了这个模块，如果检查到就终止或抛出异常。</p>
<p>这里只是列举了一个思路，实现也比较粗暴，直接匹配的字符串。</p>
<p>当然，也可以做的比较完善，这些逻辑可以做在一个插件里，插件每次读取各个Pins模块的DSL配置（根据DSL的扩展性做更细粒度的依赖关系，比如只依赖另一个模块的某个包、某个类、某个资源等等），插件根据配置可以动态合成Pins，合成完Pins再做代码边界检查，边界检查可以用字符流匹配也可以用其他方式，提高字符流匹配准确性也可以做很多事情，比如匹配import行、类定义行、以及代码内的匹配（是真的字符串还是真的引用等等）。</p>
<p>Pins 工程的基本思路就是这样。</p>
]]></content>
      <tags>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>仓库源码依赖管理器（三）</title>
    <url>/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何动态替换依赖？</p>
<a id="more"></a>
<p>前两篇我们说了下如何定义依赖描述文件，如何动态生成描述文件，那有了这些信息，我们该怎么去动态替换依赖？</p>
<p>如果要把线上依赖替换为本地Project依赖，先要把本地Project include进当前业务工程。在这之前先加载依赖描述文件进内存，如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> shell = <span class="keyword">new</span> GroovyShell(<span class="keyword">this</span>.getClass().getClassLoader())</span><br><span class="line">shell.evaluate(<span class="keyword">new</span> File(<span class="string">"依赖描述文件路径"</span>))</span><br></pre></td></tr></table></figure>

<p><strong>注：在依赖描述文件里，记得引用DSL使用的类，例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import xxx.Module</span><br><span class="line">@groovy.transform.BaseScript Module module</span><br></pre></td></tr></table></figure>

<p>然后循环迭代依赖描述 List，根据描述信息include相应的工程，如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> projectName = <span class="string">":模块名字"</span></span><br><span class="line">settings.include(projectName)</span><br><span class="line">settings.project(projectName).projectDir = <span class="keyword">new</span> File(<span class="string">"模块本地路径"</span>)</span><br></pre></td></tr></table></figure>

<p>到这一步，需要包含的Project已经包含了进来，在AS工程栏就可以看到包括进来的模块了。</p>
<p>需要替换的模块已经包含进来了，下一步就是根据依赖描述配置信息替换线上依赖，基本思路如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.afterEvaluate &#123;</span><br><span class="line">    <span class="comment">//寻找当前节点</span></span><br><span class="line">    <span class="keyword">def</span> currentItem = modules.find &#123;</span><br><span class="line">        project.name == it.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentItem == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 寻找子节点</span></span><br><span class="line">    List&lt;String&gt; seeds = currentItem.seeds</span><br><span class="line">    <span class="keyword">if</span> (seeds == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 迭代子节点</span></span><br><span class="line">    seeds.each &#123; seedName -&gt;</span><br><span class="line">        <span class="comment">// 寻找子节点对象</span></span><br><span class="line">        <span class="keyword">def</span> seed = modules.find &#123;</span><br><span class="line">            it.name == seedName</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (seed == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (seed.on_off) &#123;</span><br><span class="line">            <span class="comment">// 根据模块名字和group去除线上依赖</span></span><br><span class="line">            Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;()</span><br><span class="line">            map.put(<span class="string">"module"</span>, seed.name)</span><br><span class="line">            map.put(<span class="string">"group"</span>, <span class="string">"xxx"</span>)</span><br><span class="line">            project.configurations.compile.exclude(map)</span><br><span class="line">            <span class="comment">// 添加本地Project依赖</span></span><br><span class="line">            project.dependencies.add(<span class="string">"api"</span>, project.dependencies.project([<span class="string">path:</span> <span class="string">":"</span> + seed.name]))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在线上依赖已经替换为本地模块，在代码里点击相应模块的引用已经自动跳转到本地。</p>
<p>仓库源码依赖管理器基本的功能已经完成了，如果需要调试模块的本地代码，只需要在源码依赖描述里把相应模块开关打开即可，是不是很方便？</p>
<p>仓库源码依赖管理器大概就是这些内容。</p>
]]></content>
      <tags>
        <tag>依赖管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>仓库源码依赖管理器（二）</title>
    <url>/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何动态生成依赖描述？</p>
<a id="more"></a>

<p>上一篇我们定义了依赖描述的基本格式，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off true</span><br><span class="line">    name &quot;我是名字&quot;</span><br><span class="line">    path &quot;/path&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们想做的更通用，能让其他业务工程方便的接入仓库源码依赖，那每一次接入的时候都要编写大量的依赖描述，而且每一次依赖变了，都需要手动修改描述文件。那可不可以动态生成依赖描述？</p>
<p>我们都知道有一个androidDependencies任务，执行任务会把工程的依赖在控制台输出，如果我们实现类似的任务，可以扫描出当前的依赖关系，然后根据我们的依赖描述定义输出为DSL文件就可以解决了。</p>
<p>我们在任务执行期间可以拿到project config 信息，然后根据第一级的依赖信息生成节点依赖信息，然后递归查找当前节点的子节点，最后就可以生成类似树状的依赖关系，基本思路如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">project.configurations.each &#123; config -&gt;</span><br><span class="line">    // 这里可以添加些异常检查</span><br><span class="line">    config.resolvedConfiguration.firstLevelModuleDependencies.each &#123; dep -&gt;</span><br><span class="line">        def generateModuleDep</span><br><span class="line">        generateModuleDep = &#123; resolvedDep -&gt;</span><br><span class="line">            // 这里可以根据 resolvedDep moduleGroup moduleName 等信息生成当前依赖信息</span><br><span class="line">            resolvedDep.children.each &#123; childResolvedDep -&gt;</span><br><span class="line">                if (resolvedDep in childResolvedDep.getParents()) &#123;</span><br><span class="line">                    // 子节点递归扫描依赖</span><br><span class="line">                    generateModuleDep(childResolvedDep)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        generateModuleDep(dep)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>节点的信息可以按照实际情况存储到相应的数据结构中，我这里是把节点的对象直接存到List中。</p>
<p>现在我们已经获取到各个节点的信息了，那我们怎么把节点信息导出为文件呢？</p>
<p>groovy 支持使用模板生成字符串，生成文件当然也是可以的。</p>
<p>先定义一个依赖描述模板，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off $&#123;on_off&#125;</span><br><span class="line">    name $&#123;name&#125;</span><br><span class="line">    path $&#123;path&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下一步定义一个节点信息Map，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def binding = [</span><br><span class="line">        on_off    : true, // 节点信息的开关值</span><br><span class="line">        name      : &quot;节点信息的名字&quot;,</span><br><span class="line">        path      : &quot;节点的路径&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>最后根据上面定义的模板和节点信息Map，输出格式化的字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def template = new StreamingTemplateEngine().createTemplate(&quot;描述依赖模板&quot;)</span><br><span class="line">String response = template.make(&quot;节点信息Map&quot;)</span><br></pre></td></tr></table></figure>

<p>模板引擎的make函数返回就是已经填好内容的格式化字符串，根据输出的字符串就可以输出到依赖描述文件。</p>
<p>现在在业务工程执行当前的任务，就可以动态生成依赖描述文件。</p>
<p>下一篇我们将结合这两篇的内容说下如何动态替换依赖。</p>
<p><a href="http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="noopener">仓库源码依赖管理器（三）</a></p>
]]></content>
      <tags>
        <tag>依赖管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>仓库源码依赖管理器（一）</title>
    <url>/2018/05/03/%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这一篇我们先看下如何定义依赖描述。</p>
<a id="more"></a>
<p>如果我们平常经常维护主工程的基础仓库，经常会遇到修改仓库后无法很好的验证修改的效果，要么是把仓库工程作为单独的git submodule嵌入到业务工程，或者是简单粗暴，直接把线上依赖注释掉，添加本地仓库的路径。</p>
<p>那么有没有一种好的方法，可以做到本地源码依赖和线上依赖无缝切换。</p>
<p>了解过iOS开发的都知道，iOS依赖是直接下载依赖仓库的源码，本地依赖直接编译，依赖管理器叫CocoaPods，Android 平台是通过Gradle 从 Maven 或者JCenter 下载二进制文件。那在Android 平台上如何实现依赖仓库源码文件？</p>
<p>依赖管理器大概由几部分组成，依赖描述文件、发布规范等。依赖描述文件各个依赖管理器采用的格式都有所不同，Json 、 XML 、DSL 等等。各种表达方式各有各的优点，Json XML 结构工程表达比较丰富，但是可读性较差，当工程有几十个依赖项Json XML 简直无法直视，DSL虽然在工程结构表达上较弱，但在可读性理解上优点非常明显，cocoapods 就采用了这种表达方式，非常优美，如下。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">target <span class="string">'MyApp'</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.6'</span></span><br><span class="line">  pod <span class="string">'ORStackView'</span>, <span class="string">'~&gt; 3.0'</span></span><br><span class="line">  pod <span class="string">'SwiftyJSON'</span>, <span class="string">'~&gt; 2.3'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>看着这种依赖关系描述，心情也会舒畅好多。</p>
<p>那么在Android 平台能不能实现类似的效果？Android 构建使用的是groovy语言，而且groovy对DSL支持的还不错，所以利用groovy DSL特性描述依赖关系就可以了，你以为它是一段描述，其实它是一个可执行脚本。</p>
<p>我们需要一个模块的描述，包括开关、名字、路径等等，类似如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off <span class="literal">true</span></span><br><span class="line">    name <span class="string">"我是名字"</span></span><br><span class="line">    path <span class="string">"/path"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ok，有了定义怎么实现？</p>
<p>我们看上面的依赖描述，其实都是一个个函数调用，比如 module 就可以是一个函数，函数的参数是一个闭包，同理on_off、name等等也是函数调用，在函数后面的即为函数的参数。</p>
<p>是不是很有意思？一句话就可以作为一个脚本执行。</p>
<p>所以，我们需要定义我们依赖描述中要用到的函数，如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span> &#123;</span></span><br><span class="line">    <span class="keyword">boolean</span> on_off</span><br><span class="line">    String name</span><br><span class="line">    String path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> on_off(<span class="keyword">boolean</span> on_off) &#123;</span><br><span class="line">        <span class="keyword">this</span>.on_off = on_off</span><br><span class="line">        println(<span class="string">"module on_off:"</span> + on_off)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> name(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        println(<span class="string">"module name:"</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> path(String path) &#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path</span><br><span class="line">        println(<span class="string">"module path:"</span> + path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module module(<span class="meta">@DelegatesTo</span>(strategy = Closure.DELEGATE_FIRST, value = Module) Closure script) &#123;</span><br><span class="line">    script.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">    Module module = <span class="keyword">new</span> Module()</span><br><span class="line">    script.delegate = module</span><br><span class="line">    script()</span><br><span class="line">    <span class="keyword">return</span> script.delegate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>名为module的函数接收一个闭包，闭包代理为Module类，闭包内的函数自动执行代理类函数调用，类和函数定义完成后，然后在控制台试验下（Android Studio -&gt; Tools -&gt; Groovy Console），在定义的类和函数下面写上如下的DSL生命，执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off true</span><br><span class="line">    name &quot;我是名字&quot;</span><br><span class="line">    path &quot;我是路径&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：<br>module on_off:true<br>module name:我是名字<br>module path:我是路径</p>
<p>看来我们定义的DSL已经成功被解析。</p>
<p>依赖描述已经定义完成，下一篇会说下如何动态生成依赖描述文件。</p>
<p><a href="http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="noopener">仓库源码依赖管理器（二）</a></p>
]]></content>
      <tags>
        <tag>依赖管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>善变的架构</title>
    <url>/2018/03/08/%E5%96%84%E5%8F%98%E7%9A%84%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>架构会有多善变？</p>
<a id="more"></a>

<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195615.png" alt></p>
<p>上图是一个常见的App分层架构，之后随着业务发展，架构会如何变化呢？</p>
<p>再看微信在两个阶段结构图：</p>
<p>阶段1：</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195637.png" alt></p>
<p>阶段2：<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195658.png" alt></p>
<p>可以看到微信在阶段1架构类似于常见的App分层架构，但是随着业务不断膨胀，发展到阶段2某些模块发生了劣化。为什么会出现这种问题？架构随着业务不断发展，最上层业务模块横向进行扩展，某一个业务并不会劣化，同理，最底层的组件，也不会出现较大的劣化。随着平行的业务模块交互越来越多，依赖的业务功能按照普通做法只能下沉到中间模块，这时劣化就渐渐的开始。</p>
<p>明确了问题，那该如何解决？Gradle Module 只能一个模块依赖另一个模块，而不能再细化模块的依赖，那我们只能自定义依赖关系。<br>在Module 里面划分小模块，分离Java Res Manifest 等资源，在property文件中定义该依赖哪些东西，在编译期检查依赖的合理性。如下图：</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195725.png" alt></p>
<p>这样就可以细化模块之间的依赖范围，模块之间也可以相互依赖。依赖并保持克制。</p>
<p>良好的架构除了要保持代码和规范的良好性，还应该做到哪些事情？</p>
<p>单端单产品按业务复杂度大概分为三种规模，十人之下、三十人左右、百人团队。十人左右团队考虑的更多是怎么快速的迭代业务，架构考虑更多的是如何辅助业务发展。三十人团队考虑的更多的是怎么样保持业务的并行进展，架构考虑更多的是如何使各业务线耦合度更低、沟通更顺畅、业务性能可控，取决于架构的复用、解耦、稳定及监控能力，如果架构做不到上述几点，将会拖累业务的发展，甚至导致业务失控。百人团队考虑的更多是业务并行及可控性，架构考虑更多的会是产品整个生命周期的并行及支撑体系，例如，研发支撑：在线定位用户操作的链路，测试支撑：自动化测试脚本，运维支撑：稳定性分析、舆情监控，发布支撑：更精确的灰度验证、实时发布。</p>
<p>完整的产品生命周期包括，工程期、运行期、运维期，良好的架构应该有解决上述各个时期问题的能力。比如在工程编码期，编码规范及代码风格检查的工具。在工程编译期，检查模块之间依赖、生成辅助代码的能力。在运行期，监控App性能、压测模块的能力。在运维期，包大小预警、打包平台、在线提取用户异常业务日志、实时修复能力。</p>
<p>架构，善变。</p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>容器框架Atlas原理解析</title>
    <url>/2017/12/17/%E5%AE%B9%E5%99%A8%E6%A1%86%E6%9E%B6Atlas%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>优秀的架构在于解决产品编码期、运行期、测试期及后期运维的各种问题。</p>
<a id="more"></a>

<p>一个产品，当只有一两个工程师，这时没什么问题。当达到10人左右，沟通成本、协作效率、软件质量问题开始显现。当达到30+人，多业务线并行，开发效率、线上事故、代码合板等问题已经开始成为了产品瓶颈。那我们该怎么解决？</p>
<p>Atlas是在手淘架构不断发展演化出来的一个解决方案，比较适用于多业务线产品。Atlas把各个业务线分为多个bundle，bundle之间共享资源放在Host中，这样在编码编译期做到了天然隔离。在工程期，各bundle和host独立编译开发。运行期，按需加载bundle。运维期，动态部署业务需求、灵活精确灰度测试。</p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Android业务中间层该如何设计？</title>
    <url>/2017/10/11/Android%E4%B8%9A%E5%8A%A1%E4%B8%AD%E9%97%B4%E5%B1%82%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如果一个产品需要有多个业务线，各业务线之间如何协作才是最高效的？</p>
<a id="more"></a>

<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200345.png" alt></p>
<p>上图是比较常见的业务组装方式，如果需要添加某个业务，把相应的View直接写在Layout里，然后处理业务逻辑。但是如果业务模块多达几十个，散落的逻辑有几千行，这时该如何设计才能保证各业务的稳定和可扩展性？</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200408.png" alt></p>
<p>公共业务应该是各个业务积木堆积组成，各个积木之间是黑盒状态，只能通过“窗口”向外提供服务，以及发布需求。中间层委托、代理信息的传递。</p>
<p>中间层在Android平台该如何设计？</p>
<ul>
<li>Android平台起点及终点都是和界面的生命周期息息相关，中间层作为业务/界面的承载模型，所以应该继承自View。</li>
<li>各个业务积木之间是独立、隔离、和动态的，业务积木通过中间承载模型加载/卸载也应该是动态的。</li>
<li>中间层作为界面承载模型，所以也是有生命周期的，且依赖于外部。</li>
<li>中间层除了承载、通信职责，也应该随着外部环境变化，去影响业务积木的改变。</li>
</ul>
<p><strong>对外协议</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 委托协议</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jacky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对外暴露的协议</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBusinessDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">IBusinessDelegate <span class="title">setup</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IBusinessDelegate <span class="title">setupBusiness1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IBusinessDelegate <span class="title">setupBusiness2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IBusinessDelegate <span class="title">setupBusiness3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IBusinessDelegate <span class="title">setupBusiness4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">event1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">event2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>中间层实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 委托</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jacky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 委托，隔离各业务间的耦合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessDelegate</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> <span class="keyword">implements</span> <span class="title">IBusinessDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Context&gt; mContextReference;</span><br><span class="line">    <span class="keyword">private</span> TimingChestContract.Presenter mTimingChestPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessDelegate</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessDelegate</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessDelegate</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBusinessDelegate <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mContextReference = <span class="keyword">new</span> WeakReference&lt;&gt;(getContext());</span><br><span class="line">        removeAllViews();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- 动态加载挂件 Start ----</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBusinessDelegate <span class="title">setupBusiness1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimingChestView chestView = <span class="keyword">new</span> TimingChestView(mContextReference.get());</span><br><span class="line">        mTimingChestPresenter = <span class="keyword">new</span> TimingChestPresenter(chestView, <span class="keyword">new</span> TimingChestModel());</span><br><span class="line">        chestView.setPresenter(mTimingChestPresenter);</span><br><span class="line">        LayoutParams params = <span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);</span><br><span class="line">        addView(chestView, params);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBusinessDelegate <span class="title">setupBusiness2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBusinessDelegate <span class="title">setupBusiness3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBusinessDelegate <span class="title">setupBusiness4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---- 动态加载挂件 End ----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- 接收事件 Start ----</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">event2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---- 接收事件 End ----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- 生命周期 Start ----</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!EventBus.getDefault().isRegistered(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onCreate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onResume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onPause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onDestroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---- 生命周期 End ----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>委托作为中间层的呈现方式，动态加载业务积木，并感应外部环境变化反应到业务积木。通过这种方式，业务积木就有了很好的稳定性和扩展性。并辅以辅助手段，使委托变得异常强大。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Dalvik，我们该知道些什么？</title>
    <url>/2017/08/21/%E5%85%B3%E4%BA%8EDalvik%EF%BC%8C%E6%88%91%E4%BB%AC%E8%AF%A5%E7%9F%A5%E9%81%93%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Dalvik和JVM的区别<br>Dex文件的结构<br>Dalvik如何加载Class</p>
<a id="more"></a>

<h2 id="Dalvik和JVM的区别"><a href="#Dalvik和JVM的区别" class="headerlink" title="Dalvik和JVM的区别"></a>Dalvik和JVM的区别</h2><p>Dalvik和JVM最主要区别是它们分别具有不同的类文件格式和指令集。Dalvik使用的是dex（Dalvik Executable）格式的类文件，而Java虚拟机使用的是class格式的类文件。</p>
<p>Dalvik的指令是基于寄存器的，而JVM的指令是基于堆栈的，因此Dalvik需要更多的指令空间。这样的区别其实各有优劣，JVM需要占用更多的CPU时间，而Dalvik的数据缓冲更容易失效。</p>
<h2 id="Dex文件结构"><a href="#Dex文件结构" class="headerlink" title="Dex文件结构"></a>Dex文件结构</h2><p>先看一张Class文件和Dex文件对比图：<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195008.png" alt></p>
<p>Dex这么设计可以使文件更紧凑，减少拢余，还可以共享资源，进而减少文件大小。</p>
<p>各个字段含义如下：</p>
<table>
<thead>
<tr>
<th align="left">数据名称</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">header</td>
<td align="left">Dex文件头部，记录整个Dex文件的相关属性</td>
</tr>
<tr>
<td align="left">string_ids</td>
<td align="left">字符串数据索引，记录了每个字符串在数据区的偏移量</td>
</tr>
<tr>
<td align="left">type_ids</td>
<td align="left">类似数据索引，记录了每个类型的字符串索引</td>
</tr>
<tr>
<td align="left">proto_ids</td>
<td align="left">原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表</td>
</tr>
<tr>
<td align="left">field_ids</td>
<td align="left">字段数据索引，记录了所属类、类型以及方法名</td>
</tr>
<tr>
<td align="left">method_ids</td>
<td align="left">类方法索引，记录方法所属类名、方法声明以及方法名等信息</td>
</tr>
<tr>
<td align="left">class_defs</td>
<td align="left">类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量</td>
</tr>
<tr>
<td align="left">data</td>
<td align="left">数据区，保存了各个类的真实数据</td>
</tr>
<tr>
<td align="left">link_data</td>
<td align="left">链接数据区</td>
</tr>
</tbody></table>
<h2 id="Dalvik如何加载Class"><a href="#Dalvik如何加载Class" class="headerlink" title="Dalvik如何加载Class"></a>Dalvik如何加载Class</h2><h3 id="解析Dex"><a href="#解析Dex" class="headerlink" title="解析Dex"></a>解析Dex</h3><p>加载之前需要有一个解析过程，Dex文件大体可以分为三大部分：头部、索引、数据。通过头部可以找到索引的数目、位置和数据的起始位置。然后，Dalvik会调用dexFileParse函数对它进行分析，分析的结果放到DexFile数据结构中。</p>
<h3 id="加载Dex"><a href="#加载Dex" class="headerlink" title="加载Dex"></a>加载Dex</h3><p>存储的数据结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Object &#123;</span><br><span class="line">    ClassObject* clazz;  <span class="comment">// 类型对象</span></span><br><span class="line">    Lock lock;           <span class="comment">// 锁对象</span></span><br><span class="line">&#125; Object;</span><br></pre></td></tr></table></figure>

<p>clazz指向ClassObject对象，里面还包含一个Lock对象。如果其它线程想要获取它的锁，只有等当前线程释放掉才可以。</p>
<p>从Dex数据区读取过程中，会在内存中分配几个内存区域，用于存放directMethod、virtualMethod、sfield、ifield。等得到索引后，加载实际是由loadClassFromDex完成，它首先会先读取class的具体信息，再加载directMethod、virtualMethod、sfield、ifield，然后会为ClassObject数据结构分配内存，并读取Dex文件相关信息。等加载完成后，将加载的class放入哈希表中方便下次快速查找。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Too many classes in --main-dex-list, main dex capacity exceeded | 主Dex引用太多怎么办？</title>
    <url>/2017/06/14/Too-many-classes-in-main-dex-list-main-dex-capacity-exceeded-%E4%B8%BBDex%E5%BC%95%E7%94%A8%E5%A4%AA%E5%A4%9A%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主 dex 里面会有 Application、Activity、Service、Receiver、Provider、Instrumentation、BackupAgent 和 Annotation。当这些类以及直接引用类比较多的时候，都要塞进主 dex ，就会引发 main dex capacity exceeded build error 。</p>
<a id="more"></a>

<p>在Lollipop之前的设备上，主Dex仅仅被Framework加载。为了支持multi-dex，应用必须明确的让类加载器去加载二级Dex文件（这就是为什么要调用MultiDex#install）</p>
<p>那就是说应用的主Dex应该包含所有的即将被加载器访问的类，如果你的应用的代码试着在类加载器加载之前，去引用二级Dex里面的class就会抛出Class Not Found异常。</p>
<p><strong>那什么样的类会被包含在主Dex里面？</strong></p>
<p>会有三个顺序执行的任务将会决定哪个类应该被包含在主Dex里。</p>
<ol>
<li><code>collect{variant}MultiDexComponents task</code>，这个任务会根据manifest把所有应用组件（application, activities, services, receivers, providers）的名字写到一个文本文件。因此，如果你没有把其中的组件注册到manifest，那就不会被包含到主Dex里，也会有一些不注册的class也会被包含进去，比如注解。查看下CreateManifestKeepList.groovy 的源码就可以看到完整的包含列表。这个任务输出的文件是 manifest_keep.txt，路径为：app/build/intermediates/multi-dex。</li>
<li><code>shrink{variant}MultiDexComponents task</code>，这个任务会掉起ProGuard程序创建一个压缩过的Jar文件，这个文件里只包含manifest_keep.txt里的class，这个任务输出的文件是componentClasses.jar</li>
<li><code>create{variant}MainDexClassList task</code>，这个任务会解析componentClasses.jar文件，为每一个类文件计算直接的引用层级，具体实现请查看<a href="https://android.googlesource.com/platform/dalvik/+/master/dx/src/com/android/multidex/ClassReferenceListBuilder.java" target="_blank" rel="noopener">链接</a>。因此，如果你应用有一个注册的组件包含类X的变量，类X也会被包含进主Dex里面。这个任务输出的文件为：maindexlist.txt，包含主Dex里面所有的类。</li>
</ol>
<p><strong>如果最低版本是21会发生什么？</strong><br>如果最低版本是21上面所有的任务都不会执行，也不会有主Dex列表的计算。这是因为在应用安装期间所有的dex文件都会被ART转换为一个.oat文件。</p>
<p>所以如果这些类的引用超过了65536，构建的时候就会抛出这个<code>Too many classes in --main-dex-list, main dex capacity exceeded</code> 错误</p>
<p><strong>那到底解决方案是什么？</strong><br>升级Gradle plugin的版本到2.2.0-alpha4以上，例：<code>classpath &#39;com.android.tools.build:gradle:2.2.0&#39;</code>，可以查看关于这个问题的<a href="https://issuetracker.google.com/issues/37097145#c8" target="_blank" rel="noopener">Google Issue Tracker</a></p>
<p><strong>参考：</strong><a href="https://stackoverflow.com/questions/32721083/too-many-classes-in-main-dex-list-main-dex-capacity-exceeded" target="_blank" rel="noopener">Too many classes in –main-dex-list, main dex capacity exceeded
</a></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Kotlin</title>
    <url>/2017/06/12/Hello%20Kotlin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前世今生<br>有什么样的语法？<br>语法是怎么实现的？<br>如何编译的？<br>迁移成本<br>为我们带来什么改变？</p>
<a id="more"></a>

<h2 id="前世今生"><a href="#前世今生" class="headerlink" title="前世今生"></a>前世今生</h2><h3 id="设计出发点"><a href="#设计出发点" class="headerlink" title="设计出发点"></a>设计出发点</h3><ol>
<li>Concise — 简洁</li>
<li>Safe — 安全</li>
<li>Interoperable — 协作</li>
</ol>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>Statically typed programming language for modern multiplatform applications<br>静态类型编程语言用于现代多平台应用</p>
<h2 id="有什么样的语法？"><a href="#有什么样的语法？" class="headerlink" title="有什么样的语法？"></a>有什么样的语法？</h2><h3 id="语法对比"><a href="#语法对比" class="headerlink" title="语法对比"></a>语法对比</h3><table>
<thead>
<tr>
<th>Kotlin vs Java</th>
<th>kotlin</th>
<th>Java</th>
</tr>
</thead>
<tbody><tr>
<td>函数</td>
<td>fun sum(a: Int, b: Int): Int { return a + b }</td>
<td>public int sum(int a, int b) {return a + b;}</td>
</tr>
<tr>
<td>变量</td>
<td>var a: Int = 1</td>
<td>int a = 1;</td>
</tr>
<tr>
<td>非空判断</td>
<td>text?.let { val length = text.length }</td>
<td>if (text != null) { int length = text.length(); }</td>
</tr>
<tr>
<td>开关</td>
<td>var grade = when (score) {1, 2 -&gt; “Excellent” }</td>
<td>String grade; switch (score) { case 1: case 2: grade = “Excellent”; break; }</td>
</tr>
</tbody></table>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><strong>数字</strong></p>
<ol>
<li>数字没有隐式拓宽转换，如 Java 中 int可以隐式转换为long</li>
<li>使数字常量更易，val oneMillion = 1_000_000</li>
<li>对于位运算，没有特殊字符来表示，而只可用中缀方式调用命名函数，例如:val x = (1 shl 2) and 0x000FF000，shl:有符号左移 and:位与</li>
</ol>
<p><strong>字符</strong></p>
<ol>
<li>字符用 Char 类型表示，它们不能直接当作数字，但可以显示转换</li>
<li>模板：val i = 10  val s = “i = $i” // 求值结果为 “i = 10”</li>
</ol>
<p><strong>控制流</strong></p>
<p><strong>If</strong>：是一个表达式，即它会返回一个值，没有三元运算符，使用if表达：<code>val max = if (a &gt; b) a else b</code></p>
<p><strong>When</strong>：取代了类 C 语言的 switch 操作符，简单形式如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123; <span class="comment">// 注意这个块</span></span><br><span class="line">        print(<span class="string">"x is neither 1 nor 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>when 既可以被当做表达式使用也可以被当做语句使用。可以用任意表达式（而不只是常量）作为分支条件：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    parseInt(s) -&gt; print(<span class="string">"s encodes x"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"s does not encode x"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>返回和跳转</strong></p>
<p>跳转表达式都可以用作更大表达式的一部分：<br><code>val s = person.name ?: return</code></p>
<p>标签：我们可以用标签限制 break 或者continue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loop@ for (i in 1..100) &#123;</span><br><span class="line">    for (j in 1..100) &#123;</span><br><span class="line">        if (……) break@loop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p><strong>类</strong></p>
<p>类声明：<br>Kotlin 中所有的类默认都是 final，由类名、类头（指定其类型参数、主 构造函数等）和由大括号包围的类体构成。类头和类体都是可选的； 如果一个类没有类体，可以省略花括号。通常如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoice</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：<br><code>val invoice = Invoice()</code>，Kotlin 并没有 new 关键字。</p>
<p>覆盖：<br>Kotlin力求清晰显式。与 Java 不同，Kotlin 需要显式 标注可覆盖的成员。如：override、open</p>
<p>静态方法：<br>Kotlin 中类没有静态方法。建议简单地使用包级函数。</p>
<p><strong>属性和字段</strong></p>
<p>声明一个属性的完整语法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    [&lt;setter&gt;]</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringRepresentation: String</span><br><span class="line">    <span class="keyword">get</span>() = <span class="keyword">this</span>.toString()</span><br><span class="line">    <span class="keyword">set</span>(value) &#123;</span><br><span class="line">        setDataFromString(value) <span class="comment">// 解析字符串并赋值给其他属性</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口</strong></p>
<p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有 属性但必须声明为抽象或提供访问器实现。</p>
<p>使用关键字 interface 来定义接口</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// 可选的方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可见性修饰符</strong></p>
<p>Kotlin 中有这四个可见性修饰符：private、 protected、 internal 和 public， 默认可见性是 public。</p>
<p>可见性修饰符 internal 意味着该成员只在相同模块内可见。更具体地说， 一个模块是编译在一起的一套 Kotlin 文件：<br>        一个 IntelliJ IDEA 模块；<br>        一个 Maven 或者 Gradle 项目；<br>        一次 ＜kotlinc＞ Ant 任务执行所编译的一套文件。</p>
<p><strong>扩展</strong>        </p>
<p>Kotlin 同 C# 和 Gosu 类似，能够扩展一个类的新功能而无需继承该类或使用像装饰者这样的任何类型的设计模式。 这通过叫做 扩展 的特殊声明完成。Kotlin 支持 扩展函数 和 扩展属性。</p>
<p>声明一个扩展函数，我们需要用一个 接收者类型 也就是被扩展的类型来作为他的前缀。 下面代码为 MutableList<int> 添加一个swap 函数：</int></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> MutableList<span class="type">&lt;Int&gt;</span>.<span class="title">swap</span><span class="params">(index1: <span class="type">Int</span>, index2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tmp = <span class="keyword">this</span>[index1] <span class="comment">// “this”对应该列表</span></span><br><span class="line">    <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">    <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数据类</strong></p>
<p>我们经常创建一些只保存数据的类。在这些类中，一些标准函数往往是从 数据机械推导而来的。在 Kotlin 中，这叫做 数据类 并标记为<br><code>data：data class User(val name: String, val age: Int)</code></p>
<h3 id="语法实现原理"><a href="#语法实现原理" class="headerlink" title="语法实现原理"></a>语法实现原理</h3><p><strong>Null Safe Operator实现原理</strong><br>示例函数如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testNullSafeOperator</span><span class="params">(string: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(string?.toCharArray())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成的字节码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final testNullSafeOperator(Ljava/lang/String;)V</span><br><span class="line">    @Lorg/jetbrains/annotations/Nullable;() // invisible, parameter 0</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 15 L0</span><br><span class="line">    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span><br><span class="line">    ALOAD 1</span><br><span class="line">    DUP</span><br><span class="line">    IFNULL L1</span><br><span class="line">    ASTORE 2</span><br><span class="line">    ASTORE 3</span><br><span class="line">   L2</span><br><span class="line">    ALOAD 2</span><br><span class="line">    DUP</span><br><span class="line">    IFNONNULL L3 //非空判断</span><br><span class="line">    NEW kotlin/TypeCastException</span><br><span class="line">    DUP</span><br><span class="line">    LDC &quot;null cannot be cast to non-null type java.lang.String&quot;</span><br><span class="line">    INVOKESPECIAL kotlin/TypeCastException.&lt;init&gt; (Ljava/lang/String;)V</span><br><span class="line">    ATHROW</span><br><span class="line">   L3</span><br><span class="line">    INVOKEVIRTUAL java/lang/String.toCharArray ()[C</span><br><span class="line">    DUP</span><br><span class="line">    LDC &quot;(this as java.lang.String).toCharArray()&quot;</span><br><span class="line">    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkExpressionValueIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V</span><br><span class="line">   L4</span><br><span class="line">    ASTORE 4</span><br><span class="line">    ALOAD 3</span><br><span class="line">    ALOAD 4</span><br><span class="line">   L5</span><br><span class="line">    LINENUMBER 15 L5</span><br><span class="line">    GOTO L6</span><br><span class="line">   L1</span><br><span class="line">    POP</span><br><span class="line">    ACONST_NULL</span><br><span class="line">   L6</span><br><span class="line">    INVOKEVIRTUAL java/io/PrintStream.println ([C)V</span><br><span class="line">   L7</span><br><span class="line">    LINENUMBER 16 L7</span><br><span class="line">    RETURN</span><br><span class="line">   L8</span><br><span class="line">    LOCALVARIABLE this Ltech/jackywang/kotlindemo/Test; L0 L8 0</span><br><span class="line">    LOCALVARIABLE string Ljava/lang/String; L0 L8 1</span><br><span class="line">    MAXSTACK = 5</span><br><span class="line">    MAXLOCALS = 5</span><br></pre></td></tr></table></figure>

<p>反编译为Java代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">testNullSafeOperator</span><span class="params">(@Nullable String string)</span> </span>&#123;</span><br><span class="line">      PrintStream var10000 = System.out;</span><br><span class="line">      <span class="keyword">char</span>[] var10001;</span><br><span class="line">      <span class="keyword">if</span>(string != <span class="keyword">null</span>) &#123;</span><br><span class="line">         PrintStream var3 = var10000;</span><br><span class="line">         <span class="keyword">if</span>(string == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TypeCastException(<span class="string">"null cannot be cast to non-null type java.lang.String"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">char</span>[] var5 = string.toCharArray();</span><br><span class="line">         Intrinsics.checkExpressionValueIsNotNull(var5, <span class="string">"(this as java.lang.String).toCharArray()"</span>);</span><br><span class="line">         <span class="keyword">char</span>[] var4 = var5;</span><br><span class="line">         var10000 = var3;</span><br><span class="line">         var10001 = var4;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         var10001 = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var10000.println(var10001);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>由此可见kotlin实现的非空 <code>？</code> 语法，内部就是利用非空判断实现。</p>
<h3 id="与Java互操作"><a href="#与Java互操作" class="headerlink" title="与Java互操作"></a>与Java互操作</h3><p>Kotlin 中自然地调用现存的 Java 代码，并且在 Java 代码中也可以很顺利地调用 Kotlin 代码。</p>
<p><strong>空安全和平台类型</strong><br>Java 中的任何引用都可能是 null，这使得 Kotlin 对来自 Java 的对象要求严格空安全是不现实的。 Java 声明的类型在 Kotlin 中会被特别对待并称为平台类型。对这种类型的空检查会放宽， 因此它们的安全保证与在 Java 中相同</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = ArrayList&lt;String&gt;() <span class="comment">// 非空（构造函数结果）</span></span><br><span class="line">list.add(<span class="string">"Item"</span>)</span><br><span class="line"><span class="keyword">val</span> size = list.size() <span class="comment">// 非空（原生 int）</span></span><br><span class="line"><span class="keyword">val</span> item = list[<span class="number">0</span>] <span class="comment">// 推断为平台类型（普通 Java 对象）</span></span><br><span class="line">item.substring(<span class="number">1</span>) <span class="comment">// 允许，如果 item == null 可能会抛出异常</span></span><br></pre></td></tr></table></figure>

<p><strong>受检异常</strong><br>在 Kotlin 中，所有异常都是非受检的，这意味着编译器不会强迫你捕获其中的任何一个。 因此，当你调用一个声明受检异常的 Java 方法时，Kotlin 不会强迫你做任何事情：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">render</span><span class="params">(list: <span class="type">List</span>&lt;*&gt;, to: <span class="type">Appendable</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> list) &#123;</span><br><span class="line">        to.append(item.toString()) <span class="comment">// Java 会要求我们在这里捕获 IOException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何编译？"><a href="#如何编译？" class="headerlink" title="如何编译？"></a>如何编译？</h2><h3 id="编译入口"><a href="#编译入口" class="headerlink" title="编译入口"></a>编译入口</h3><p>从<code>kotlinc Hello.kt</code> 开始分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cygwin=false;</span><br><span class="line">case &quot;`uname`&quot; in</span><br><span class="line">    CYGWIN*) cygwin=true ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">declare -a kotlin_app</span><br><span class="line"></span><br><span class="line">//运行入口</span><br><span class="line">if [ -n &quot;$KOTLIN_RUNNER&quot; ];</span><br><span class="line">then</span><br><span class="line">    java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;-Dkotlin.home=$&#123;KOTLIN_HOME&#125;&quot;)</span><br><span class="line">    kotlin_app=(&quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-runner.jar&quot; &quot;org.jetbrains.kotlin.runner.Main&quot;)</span><br><span class="line">else</span><br><span class="line">//编译入口</span><br><span class="line">    [ -n &quot;$KOTLIN_COMPILER&quot; ] || KOTLIN_COMPILER=org.jetbrains.kotlin.cli.jvm.K2JVMCompiler</span><br><span class="line">    java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;-noverify&quot;)</span><br><span class="line">    kotlin_app=(&quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-preloader.jar&quot; &quot;org.jetbrains.kotlin.preloading.Preloader&quot; &quot;-cp&quot; &quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-compiler.jar&quot; $KOTLIN_COMPILER)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&quot;$&#123;JAVACMD:=java&#125;&quot; $JAVA_OPTS &quot;$&#123;java_args[@]&#125;&quot; -cp &quot;$&#123;kotlin_app[@]&#125;&quot; &quot;$&#123;kotlin_args[@]&#125;&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun compileBunchOfSources(environment: KotlinCoreEnvironment): Boolean &#123;</span><br><span class="line">        val moduleVisibilityManager = ModuleVisibilityManager.SERVICE.getInstance(environment.project)</span><br><span class="line"></span><br><span class="line">        val friendPaths = environment.configuration.getList(JVMConfigurationKeys.FRIEND_PATHS)</span><br><span class="line">        for (path in friendPaths) &#123;</span><br><span class="line">            moduleVisibilityManager.addFriendPath(path)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!checkKotlinPackageUsage(environment, environment.getSourceFiles())) return false</span><br><span class="line"></span><br><span class="line">        //词法、语法分析、语义分析、目标代码生成等过程</span><br><span class="line">        val generationState = analyzeAndGenerate(environment) ?: return false</span><br><span class="line"></span><br><span class="line">        // 找到运行主类</span><br><span class="line">        val mainClass = findMainClass(generationState, environment.getSourceFiles())</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //写入文件</span><br><span class="line">            writeOutput(environment.configuration, generationState.factory, mainClass)</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            generationState.destroy()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="目标代码的生成"><a href="#目标代码的生成" class="headerlink" title="目标代码的生成"></a>目标代码的生成</h3><p>在代码类生成的过程中，又包括生成类名、类体、字段、函数方法等环节，相关的生成类有ClassBodyCodegen、ClassFunctionCodegen、MemberCodegen、ExpressionCodegen、PropertyCodegen等。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KotlinCodegenFacade</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">public</span> static void doGenerateFiles(</span><br><span class="line">            <span class="meta">@NotNull</span> Collection&lt;KtFile&gt; files,</span><br><span class="line">            <span class="meta">@NotNull</span> GenerationState state,</span><br><span class="line">            <span class="meta">@NotNull</span> CompilationErrorHandler errorHandler</span><br><span class="line">    ) &#123;</span><br><span class="line">		...</span><br><span class="line">        <span class="keyword">for</span> (KtFile file : files) &#123;</span><br><span class="line">         ...</span><br><span class="line">        Set&lt;FqName&gt; obsoleteMultifileClasses = new HashSet&lt;FqName&gt;(state.getObsoleteMultifileClasses());</span><br><span class="line">        <span class="keyword">for</span> (FqName multifileClassFqName : Sets.union(filesInMultifileClasses.keySet(), obsoleteMultifileClasses)) &#123;</span><br><span class="line">            doCheckCancelled(state);</span><br><span class="line">            <span class="comment">//目标代码类生成</span></span><br><span class="line">            generateMultifileClass(state, multifileClassFqName, filesInMultifileClasses.<span class="keyword">get</span>(multifileClassFqName), errorHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;FqName&gt; packagesWithObsoleteParts = new HashSet&lt;FqName&gt;(state.getPackagesWithObsoleteParts());</span><br><span class="line">        <span class="keyword">for</span> (FqName packageFqName : Sets.union(packagesWithObsoleteParts, filesInPackages.keySet())) &#123;</span><br><span class="line">            doCheckCancelled(state);</span><br><span class="line">            <span class="comment">//目标代码类包生成</span></span><br><span class="line">            generatePackage(state, packageFqName, filesInPackages.<span class="keyword">get</span>(packageFqName), errorHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        doCheckCancelled(state);</span><br><span class="line">        <span class="comment">//生成结束</span></span><br><span class="line">        state.getFactory().done();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Kotlin在目标代码生成环节做了更多的处理，在该环节实现了自动生成Getter、Setter的代码。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyCodegen</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> void gen(</span><br><span class="line">            <span class="meta">@Nullable</span> KtProperty declaration, <span class="comment">// 属性声明</span></span><br><span class="line">            <span class="meta">@NotNull</span> PropertyDescriptor descriptor,  <span class="comment">//描述，包括权限修饰符、注解、类型等。</span></span><br><span class="line">            <span class="meta">@Nullable</span> KtPropertyAccessor getter, <span class="comment">// 决定是否生成getter</span></span><br><span class="line">            <span class="meta">@Nullable</span> KtPropertyAccessor setter  <span class="comment">//决定是否生成setter</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        assert kind == OwnerKind.PACKAGE || kind == OwnerKind.IMPLEMENTATION || kind == OwnerKind.DEFAULT_IMPLS</span><br><span class="line">                : <span class="string">"Generating property with a wrong kind ("</span> + kind + <span class="string">"): "</span> + descriptor;</span><br><span class="line">		  <span class="comment">//生成注解信息</span></span><br><span class="line">        genBackingFieldAndAnnotations(declaration, descriptor, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">		  <span class="comment">//根据注解和权限修饰符等信息判断是否自动生成Getter代码</span></span><br><span class="line">        <span class="keyword">if</span> (isAccessorNeeded(declaration, descriptor, getter)) &#123;</span><br><span class="line">            generateGetter(declaration, descriptor, getter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据注解和权限修饰符等信息判断是否自动生成Setter代码</span></span><br><span class="line">        <span class="keyword">if</span> (isAccessorNeeded(declaration, descriptor, setter)) &#123;</span><br><span class="line">            generateSetter(declaration, descriptor, setter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Kotlin到Java的迁移成本"><a href="#Kotlin到Java的迁移成本" class="headerlink" title="Kotlin到Java的迁移成本"></a>Kotlin到Java的迁移成本</h2><ol>
<li>文件自动转换，点击菜单栏 Code | Convert Java File to Kotlin File</li>
<li>语法兼容性</li>
<li>第三方库兼容性</li>
</ol>
<h2 id="Kotlin为Android开发者带来什么改变？"><a href="#Kotlin为Android开发者带来什么改变？" class="headerlink" title="Kotlin为Android开发者带来什么改变？"></a>Kotlin为Android开发者带来什么改变？</h2><ol>
<li>效率</li>
<li>多平台</li>
</ol>
<p><strong>参考：</strong><a href="http://shinelw.com/2017/03/19/kotlin-compiler-process-analysis/" target="_blank" rel="noopener">Kotlin编译过程分析</a>、<a href="http://droidyue.com/blog/2017/05/08/how-to-study-kotlin/" target="_blank" rel="noopener">研究学习Kotlin的一些方法</a></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 答疑解惑</title>
    <url>/2017/05/11/JVM-%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JVM是什么？<br>平常接触的东西都存在哪里？<br>类如何加载？<br>怎么运行？<br>清洁工怎么工作？</p>
<a id="more"></a>

<h2 id="JVM是什么？"><a href="#JVM是什么？" class="headerlink" title="JVM是什么？"></a>JVM是什么？</h2><p>Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>
<p>Java 虚拟机就像一个熟悉多个国家语言的导游，你只要向他说出自己的语言，他就能带着你在多个国家无障碍的玩耍。比如说，你说“我要吃肉夹馍”，无论到了哪个国家，你只需要和导游说这句话就可以，寻找和本地人交流导游就会帮你办好，最后结果是相同的：吃的都是肉夹馍。</p>
<p>可以参考如下Java技术体系图：<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200527.png" alt></p>
<h2 id="平常接触的东西都存在哪里？"><a href="#平常接触的东西都存在哪里？" class="headerlink" title="平常接触的东西都存在哪里？"></a>平常接触的东西都存在哪里？</h2><p>先看一下Java虚拟机运行时数据区：<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200546.png" alt></p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器：是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。每个线程都有自己的独立的程序计数器。</p>
<p>如果线程正在执行的是Java方法，那么这个计数器的值就是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值为空（undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。<br>局部变量表存放了编译期可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用和returnAddress类型（指向了一条字节码指令的地址）。<br>其中64位长度的long和double类型的数据会占用2个局部变量空间（slot），其余的数据类型占1个。局部变量表所需的内存空间在编译期间分配完成，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。<br>如果线程请求栈的深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；无法申请到内存抛出OutOfMemoryError异常。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行java方法，而本地栈则为虚拟机使用到的Native方法服务。</p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆是线程共享的，在虚拟机启动时创建。此区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。<br>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称作“GC堆”。由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。<br>在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。</p>
<h3 id="方法区（永久代）"><a href="#方法区（永久代）" class="headerlink" title="方法区（永久代）"></a>方法区（永久代）</h3><p>线程共享，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br>这区域的内存回收目标主要是针对常量池的回收和对类型的卸载！</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>他是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存不是虚拟机运行时数据区的一部分。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。<br>在JDK1.4中新加入了NIO类，引入了一种基于通道与缓存区（buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>
<h2 id="类如何加载？"><a href="#类如何加载？" class="headerlink" title="类如何加载？"></a>类如何加载？</h2><p>在加载阶段，虚拟机需要完成以下 3 件事情：</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在内存中生成一个代表这个类的 java. lang. Class 对象，作为方法区这个类的各种数据的访问入口。</li>
</ol>
<p>Class文件的获取方式：</p>
<ul>
<li>从 ZIP 包中读取，这很常见，最终成为日后 JAR、 EAR、 WAR 格式的基础。</li>
<li>从网络中获取，这种场景最典型的应用就是 Applet。</li>
<li>运行时计算生成，这种场景使用得最多的就是动态代理技术，在 java.lang.reflect.Proxy 中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为*$Proxy 的代理类的二进制字节流。由其他文件生成，典型场景是 JSP 应用，即由 JSP 文件生成对应的 Class 类。</li>
<li>从数据库中读取。</li>
</ul>
<p>一个非数组类的加载阶段（准确地说，是加载阶段中获取类的二进制字节流的动作）是开发人员可控性最强的。开发人员可以通过自定义的类加载器去控制字节流的获取方式（即重写一个类加载器的loadClass方法），这里以后可以找一些比较重要的类，分析里面所有的函数，从而知道这些东西怎么用。</p>
<p>对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（ Element Type， 指的是数组去掉所有维度的类型）最终是要靠类加载器去创建，一个数组类（下面简称为 C） 创建过程就遵循以下规则：</p>
<ol>
<li>如果数组的组件类型（ Component Type， 指的是数组去掉一个维度的类型）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组 C 将在加载该组件类型的类加载器的类名称空间上被标识（这点很重要，在 7. 4 节会介绍到，一个类必须与类加载器一起确定唯一性）。</li>
<li>如果数组的组件类型不是引用类型（例如 int[] 数组）， Java 虚拟机将会把数组 C 标记为与引导类加载器关联。</li>
<li>数组类的可见性与它的组件可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认设置为public</li>
</ol>
<p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区怎么存储由JVM自己定义。然后在内存中实例化一个java.lang.Class类的对象（并没有明确规定是在Java堆中，对于HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但是存放在方法区里面）。</p>
<p>加载阶段和连接阶段的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始。</p>
<h2 id="怎么运行？"><a href="#怎么运行？" class="headerlink" title="怎么运行？"></a>怎么运行？</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。在 Class 类文件结构一文中已经比较过了符号引用和直接引用的区别和关联，这里不再赘述。前面说解析阶段可能开始于初始化之前，也可能在初始化之后开始，虚拟机会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）。</p>
<p>对同一个符号引用进行多次解析请求时很常见的事情，虚拟机实现可能会对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标示为已解析状态），从而避免解析动作重复进行。</p>
<p>解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行，分别对应于常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info 四种常量类型。</p>
<ol>
<li>类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</li>
<li>字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的 Java 程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序指定的主观计划去初始化类变量和其他资源，或者可以从另一个角度来表达：初始化阶段是执行类构造器()方法的过程。</p>
<h2 id="清洁工怎么工作？"><a href="#清洁工怎么工作？" class="headerlink" title="清洁工怎么工作？"></a>清洁工怎么工作？</h2><p>GC要完成3件事：</p>
<p><strong>哪些内存需要回收？</strong><br>引用计数算法、根搜索算法</p>
<p><strong>什么时候回收？</strong><br>标记—清除算法、标记—整理算法</p>
<p><strong>如何回收？</strong><br>分代收集、垃圾收集器（不同厂商有不同实现）</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库到底哪家强？</title>
    <url>/2017/04/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0%E5%BA%95%E5%93%AA%E5%AE%B6%E5%BC%BA%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>目前大部分开源数据库都是基于SQLite发展而来，如SQLBrite、OrmLite、DBFlow、GreenDao等等，还有一个是Realm框架不是基于 SQLite 创建，它建立了自己独特的数据库存储引擎。那这么多框架到底有什么区别，那种更适合自己的产品呢？</p>
<a id="more"></a>

<p>我们先看基于SQLite发展而来的框架，这方面主要分成两条发展路线，一条是Rx或者叫做对象映射（OM）路线，一条是对象关系映射（ORM）路线。</p>
<h2 id="Rx-对象映射路线"><a href="#Rx-对象映射路线" class="headerlink" title="Rx/对象映射路线"></a>Rx/对象映射路线</h2><p>代表数据库有<a href="https://github.com/square/sqlbrite" target="_blank" rel="noopener">sqlbrite</a>、<a href="https://github.com/square/sqldelight" target="_blank" rel="noopener">sqldelight</a>，这两个都是Square出品。</p>
<blockquote>
<p>SqlBrite和SqlDelight都是对象映射（OM，Object Mappers）而不是对象关系映射（ORM，Object/Relational Mappers）。</p>
</blockquote>
<blockquote>
<p>ORM 其实并不是一个优秀的框架。很多平台的 ORM 实现都有性能和内存的问题。我们也不会编写ORM。 – JakeWharton</p>
</blockquote>
<p>上面这句话很好的说明了这两个框架的出发点，知道这些我们就容易理解了。</p>
<h3 id="SqlBrite"><a href="#SqlBrite" class="headerlink" title="SqlBrite"></a><a href="https://github.com/square/sqlbrite" target="_blank" rel="noopener">SqlBrite</a></h3><blockquote>
<p>SqlBrite是对 Android 系统的 SQLiteOpenHelper 的封装，对SQL操作引入了响应式语义 （Rx）（用来在 RxJava 中使用）</p>
</blockquote>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul>
<li>创建一个SqlBrite对象，该对象是该库的入口：<code>SqlBrite sqlBrite = SqlBrite.create();</code></li>
<li>提供一个 SQLiteOpenHelper实例和一个Scheduler实例来创建一个 BriteDatabase 对象：<code>BriteDatabase db = sqlBrite.wrapDatabaseHelper(openHelper, Schedulers.io());</code>，Scheduler 是指定执行查询的操作的线程，由于查询数据库是不建议在 UI 线程中执行的，所以一般指定 Schedulers.io() 。</li>
<li>BriteDatabase.createQuery方法和SQLiteDatabase.rawQuery方法相比，多了一个table(s)表参数，用于监听数据变更。当我们订阅subscribe返回的Observable的时候，立刻执行需要的查询语句。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable users = db.createQuery(<span class="string">"users"</span>, <span class="string">"SELECT * FROM users"</span>);</span><br><span class="line">users.subscribe(<span class="keyword">new</span> Action1() &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Query query)</span> </span>&#123;</span><br><span class="line">    Cursor cursor = query.run();</span><br><span class="line">    <span class="comment">// TODO parse data...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>在保证性能和复杂扩展性的同时，利用Rxjava操作Sql在易用性上有部分提高。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>还需要编写Sql语句，复杂性还是较高。</p>
<h3 id="SqlDelight"><a href="#SqlDelight" class="headerlink" title="SqlDelight"></a><a href="https://github.com/square/sqldelight" target="_blank" rel="noopener">SqlDelight</a></h3><blockquote>
<p>SqlDelight通过从 SQL 语句来生成 JAVA 模型代码。这样的好处是，所有 SQL 语句都位于同一个位置，通过查看 SQL 语句可以清楚的了解需要实现的功能和数据库的结构,也便于管理以及java类访问。</p>
</blockquote>
<h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>需要把 SQL 语句放到对应的 .sq 文件中，默认目录为和 main 目录下的 java 代码同级，例如<br>src/main/sqldelight/com/example/HockeyPlayer.sq ，其中 com/example/ 为对应 java 对象的包名字。 在该 .sq 文件中一般第一个语句是创建表的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hockey_player (</span><br><span class="line">  _id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</span><br><span class="line">  <span class="built_in">number</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他的语句通过标识符来引用。在生成的 Java 对象中会包含</span></span><br><span class="line"><span class="comment">-- 一个该标识符的常亮引用这个语句。</span></span><br><span class="line">select_by_name:</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> hockey_player</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = ?;</span><br></pre></td></tr></table></figure>

<p>上面的 SQL 语句会生成一个 HockeyPlayerModel Java 接口。该接口内有两个嵌套类分别把 Cursor 映射为 Java 对象以及把 Java 对象转换为 ContentValues 好插入数据库</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>所有的SQL statement都存在.sq文件中，便于管理</li>
<li>可以自由的使用普通SQLite的同时帮助你处理了程式化的代码</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>需要编写原生sql</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>SqlBrite方便在 RxJava 中使用 Sql 操作，并且额外添加了对数据库表数据更新通知的机制，当你对数据表进行操作的时候，其他订阅者可以在数据发生变化的时候收到通知。然后可以用 RxJava 的方式来操作数据。只是一个 SQLiteOpenHelper 的轻量级封装，并不关心你的对象是如何实现的，也不关心你的数据库。SqlBrite也不支持对象映射和类型安全的查询，SqlBrite 不是一个 ORM 框架，也不是一个类型安全的查询框架。不会提供类似Gson中对象序列化的功能，也不会提供数据库迁移的功能。</p>
<p>SqlDelight 的做法是从 SQL 语句来生成 JAVA 模型代码。 这样的好处是，所有 SQL 语句都位于同一个位置。SqlDelight 添加了对 SQL 语句的编译时验证、表名字和列名字的代码自动完成功能。让编写 SQL 语句更加快捷。在编译的时候，根据 SQL 语句生成 Java 模型接口和 builder 来把数据行和 Java 对象实现转换。SqlDelight 不会做很重的功能（比如数据懒加载、缓存 、级联删除 等 ORM 框架内常见的功能）。</p>
<h2 id="对象关系映射（ORM）路线"><a href="#对象关系映射（ORM）路线" class="headerlink" title="对象关系映射（ORM）路线"></a>对象关系映射（ORM）路线</h2><p>这部分框架在易用性上和性能上都做了很多工作，易用性上基本达到极致，在性能上接近原生Sql，这里举几个有代表性的项目。</p>
<h3 id="OrmLite"><a href="#OrmLite" class="headerlink" title="OrmLite"></a><a href="https://github.com/j256/ormlite-android" target="_blank" rel="noopener">OrmLite</a></h3><blockquote>
<p>OrmLite - Lightweight Object Relational Mapping (ORM) Java Package</p>
</blockquote>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><ul>
<li>使用注解方式标示字段，如数据库、表等</li>
<li>运行时使用反射获取相应字段拼接sql去执行</li>
</ul>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>在易用性上相比原生sql有较大提高</p>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>性能上有损失</p>
<h3 id="greenDAO"><a href="#greenDAO" class="headerlink" title="greenDAO"></a><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">greenDAO</a></h3><blockquote>
<p>greenDAO is an open source Android ORM making development for SQLite databases fun again.</p>
</blockquote>
<h4 id="基本原理、特点"><a href="#基本原理、特点" class="headerlink" title="基本原理、特点"></a>基本原理、特点</h4><ul>
<li>使用注解方式标示字段</li>
<li>在编译期生成本地sql</li>
<li>greenDAO 支持 protocol buffer(protobuf) 协议数据的直接存储，如果你通过 protobuf 协议与服务器交互，将不需要任何的映射。</li>
<li>数据加密</li>
</ul>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195758.png" alt></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195818.png" alt></p>
<p>DaoMaster保存了sqlitedatebase对象以及操作DAO classes。其提供了一些创建和删除table的静态方法，其内部类OpenHelper和DevOpenHelper实现了SQLiteOpenHelper并创建数据库的框架。</p>
<p>DaoMaster除了具有创建表和删除表的两个功能外，还有两个内部类，分别为OpenHelper和DevOpenHelper，而DevOpenHelper继承自OpenHelper，而OpenHelper继承自SQLiteOpenHelper，而重写的onCreate()方法中调用了createAllTables(db,false)；方法来创建数据表，而createAllTables()方法中是通过调用UserDao静态方法来创建表的UserDao.createTable(db, ifNotExists)；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Creates the underlying database table. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(SQLiteDatabase db, <span class="keyword">boolean</span> ifNotExists)</span> </span>&#123;</span><br><span class="line">    String constraint = ifNotExists? <span class="string">"IF NOT EXISTS "</span>: <span class="string">""</span>;</span><br><span class="line">    db.execSQL(<span class="string">"CREATE TABLE "</span> + constraint + <span class="string">"\\"</span>NOTE\\<span class="string">" ("</span> + <span class="comment">//</span></span><br><span class="line">            <span class="string">"\\"</span>_id\\<span class="string">" INTEGER PRIMARY KEY AUTOINCREMENT ,"</span> + <span class="comment">// 0: id</span></span><br><span class="line">            <span class="string">"\\"</span>TEXT\\<span class="string">" TEXT NOT NULL ,"</span> + <span class="comment">// 1: text</span></span><br><span class="line">            <span class="string">"\\"</span>COMMENT\\<span class="string">" TEXT,"</span> + <span class="comment">// 2: comment</span></span><br><span class="line">            <span class="string">"\\"</span>DATE\\<span class="string">" INTEGER);"</span>); <span class="comment">// 3: date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Drops the underlying database table. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(SQLiteDatabase db, <span class="keyword">boolean</span> ifExists)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"DROP TABLE "</span> + (ifExists ? <span class="string">"IF EXISTS "</span> : <span class="string">""</span>) + <span class="string">"\\"</span>NOTE\\<span class="string">""</span>;</span><br><span class="line">    db.execSQL(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>greenDAO的增删改查方法有一些是在Android原生的操作方法上进行了封装，对于链式查询的最终执行也是调用了Android原生的查询操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkThread();</span><br><span class="line">    Cursor cursor = dao.getDatabase().rawQuery(sql, parameters);</span><br><span class="line">    <span class="keyword">return</span> daoAccess.loadAllAndCloseCursor(cursor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 同时还有一些方法是基于SQLiteStatement实现的，SQLiteStatement相比原生的execSQL方法还要快一些，并且最终执行时也开启了事务，性能又提升了很多。下面是插入数据的最终实现方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">executeInsert</span><span class="params">(T entity, SQLiteStatement stmt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> rowId;</span><br><span class="line">    <span class="keyword">if</span> (db.isDbLockedByCurrentThread()) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (stmt) &#123;</span><br><span class="line">            bindValues(stmt, entity);</span><br><span class="line">            rowId = stmt.executeInsert();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Do TX to acquire a connection before locking the stmt to avoid deadlocks</span></span><br><span class="line">        db.beginTransaction();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (stmt) &#123;</span><br><span class="line">                bindValues(stmt, entity);</span><br><span class="line">                rowId = stmt.executeInsert();</span><br><span class="line">            &#125;</span><br><span class="line">            db.setTransactionSuccessful();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            db.endTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    updateKeyAfterInsertAndAttach(entity, rowId, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> rowId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到先执行bindValues方法，该方法是一个抽象方法，需要业务方在DAO文件中实现，跟踪至NoteDao文件查看该方法代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindValues</span><span class="params">(SQLiteStatement stmt, Note entity)</span> </span>&#123;</span><br><span class="line">    stmt.clearBindings();</span><br><span class="line"></span><br><span class="line">    Long id = entity.getId();</span><br><span class="line">    <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stmt.bindLong(<span class="number">1</span>, id);            <span class="comment">// 1为索引值，id为入库的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    stmt.bindString(<span class="number">2</span>, entity.getText());</span><br><span class="line"></span><br><span class="line">    String comment = entity.getComment();</span><br><span class="line">    <span class="keyword">if</span> (comment != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stmt.bindString(<span class="number">3</span>, comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    java.util.Date date = entity.getDate();</span><br><span class="line">    <span class="keyword">if</span> (date != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stmt.bindLong(<span class="number">4</span>, date.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就将SQLiteStatement需要的数据都进行了封装，然后执行stmt.executeInsert()方法即可完成数据库的插入操作。整个数据插入流程，greenDAO借助SQLiteStatement完成了数据的插入，避免了其他框架利用反射拼装sql语句而造成的执行效率低下的问题。</p>
<p>其他优化：</p>
<ul>
<li>避免使用注解和反射拼装sql语句</li>
<li>最终执行时开启了事务</li>
<li>支持异步查询和回调</li>
<li>查询缓存机制，使用了弱引用WeakReference，第一次查询时将数据加入SparseArray&gt;的集合中</li>
</ul>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>在易用性和性能上做到了很好的平衡</p>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>上手成本</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>ORM类型框架在易用性上面做的比原生Sql提升了很多，而且在性能上GreenDao在某些方面甚至比原生的还要出色，比较适合大部分项目的开发工作。</p>
<h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a><a href="https://realm.io/news/realm-for-android/" target="_blank" rel="noopener">Realm</a></h2><p>Realm框架不是基于 SQLite 创建，它建立了自己独特的数据库存储引擎，在某些方面有自己独特的优势。</p>
<p>GreenDao vs Realm<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195848.png" alt></p>
<h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><p>增：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Realm realm=Realm.getDefaultInstance();</span><br><span class="line"></span><br><span class="line">realm.beginTransaction();</span><br><span class="line">User user = realm.createObject(User.class); <span class="comment">// Create a new object</span></span><br><span class="line">user.setName(<span class="string">"John"</span>);</span><br><span class="line">user.setEmail(<span class="string">"john@corporation.com"</span>);</span><br><span class="line">realm.commitTransaction();</span><br></pre></td></tr></table></figure>

<p>删：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Realm  mRealm=Realm.getDefaultInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> RealmResults&lt;Dog&gt; dogs=  mRealm.where(Dog.class).findAll();</span><br><span class="line"></span><br><span class="line">        mRealm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                Dog dog=dogs.get(<span class="number">5</span>);</span><br><span class="line">                dog.deleteFromRealm();</span><br><span class="line">                <span class="comment">//删除第一个数据</span></span><br><span class="line">                dogs.deleteFirstFromRealm();</span><br><span class="line">                <span class="comment">//删除最后一个数据</span></span><br><span class="line">                dogs.deleteLastFromRealm();</span><br><span class="line">                <span class="comment">//删除位置为1的数据</span></span><br><span class="line">                dogs.deleteFromRealm(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//删除所有数据</span></span><br><span class="line">                dogs.deleteAllFromRealm();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><ul>
<li>易用</li>
<li>快速</li>
<li>跨平台</li>
<li>可视化</li>
</ul>
<h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>显著增加安装包大小，增加大概4、5兆</li>
<li>数据类型限制，必须继承RealmObject、不支持内部类、修改了部分类型、不支持键值自增长。</li>
<li>线程限制，如果在UI线程获取到了当前Realm对象，在异步线程中使用当前Realm对象进行操作，就会抛出异常。</li>
</ul>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>如果数据量没有达到SQLite的性能瓶颈的话，建议选择基于SQLite的数据库，如果不喜欢编写原生Sql语句就牺牲一点性能去适应业务快速迭代。<br>这些框架同时存在都有其道理，性能有优势兼容性和稳定性不能保证，易用性很好必然就不能做太多的定制化操作，各取所需，对于一般的业务GreenDao便是一个比较好的方案。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Android模块化与组件化--多模块区分编译</title>
    <url>/2017/02/03/Android%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%8C%BA%E5%88%86%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时我们一个项目中存在多个产品形态，且不同产品需要不同的编译环境，这是模块化组件化的基础。最普通的情况便是在主模块里面加入渠道统计，但此时如果我们有多个Library，多种产品形态的主模块需要编译多种产品形态的Library，怎么办？</p>
<a id="more"></a>

<h1 id="模块化与组件化–多模块区分编译"><a href="#模块化与组件化–多模块区分编译" class="headerlink" title="模块化与组件化–多模块区分编译"></a>模块化与组件化–多模块区分编译</h1><blockquote>
<p><strong>示例地址：<a href="https://github.com/JackyAndroid/Android-Architecture-Fairy/tree/master/multi-variants-library" target="_blank" rel="noopener">https://github.com/JackyAndroid/Android-Architecture-Fairy/tree/master/multi-variants-library</a></strong><br>Android-Architecture-Fairy开源项目重点分析主流技术与架构设计，欢迎star</p>
</blockquote>
<p>有时我们一个项目中存在多个产品形态，且不同产品需要不同的编译环境，这是模块化组件化的基础。最普通的情况便是在主模块里面加入渠道统计，但此时如果我们有多个Library，多种产品形态的主模块需要编译多种产品形态的Library，怎么办？先看下<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Library-Publication" target="_blank" rel="noopener">官方文档</a>如下：</p>
<p>By default a library only publishes its release variant. This variant will be used by all projects referencing the library, no matter which variant they build themselves. This is a temporary limitation due to Gradle limitations that we are working towards removing. You can control which variant gets published:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultPublishConfig <span class="string">"debug"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that this publishing configuration name references the full variant name. Release and debug are only applicable when there are no flavors. If you wanted to change the default published variant while using flavors, you would write:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultPublishConfig <span class="string">"flavor1Debug"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It is also possible to publish all variants of a library. We are planning to allow this while using a normal project-to-project dependency (like shown above), but this is not possible right now due to limitations in Gradle (we are working toward fixing those as well).<br>Publishing of all variants are not enabled by default. The snippet below enables this feature:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    publishNonDefault <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It is important to realize that publishing multiple variants means publishing multiple aar files, instead of a single aar containing multiple variants. Each aar packaging contains a single variant. Publishing a variant means making this aar available as an output artifact of the Gradle project. This can then be used either when publishing to a maven repository, or when another project creates a dependency on the library project.</p>
<p>Gradle has a concept of default” artifact. This is the one that is used when writing:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':libraries:lib2'</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>To create a dependency on another published artifact, you need to specify which one to use:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">flavor1Compile <span class="title">project</span><span class="params">(path: <span class="string">':lib1'</span>, configuration: <span class="string">'flavor1Release'</span>)</span></span></span><br><span class="line"><span class="function">    flavor2Compile <span class="title">project</span><span class="params">(path: <span class="string">':lib1'</span>, configuration: <span class="string">'flavor2Release'</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Important: Note that the published configuration is a full variant, including the build type, and needs to be referenced as such.<br>Important: When enabling publishing of non default, the Maven publishing plugin will publish these additional variants as extra packages (with classifier). This means that this is not really compatible with publishing to a maven repository. You should either publish a single variant to a repository OR enable all config publishing for inter-project dependencies.</p>
<p>默认Library只发布Release版本，这个是Gradle官方的限制，Google官方正在试图解决这个问题。可以使用defaultPublishConfig去设置发布的版本，通过设置publishNonDefault true可以让Library发布多个产品版本。<br>下面的这种平常书写的方式是依赖的默认发布版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':libraries:lib2'</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果想要分渠道编译多种形态的Library，需要修改如下的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">flavor1Compile <span class="title">project</span><span class="params">(path: <span class="string">':lib1'</span>, configuration: <span class="string">'flavor1Release'</span>)</span></span></span><br><span class="line"><span class="function">    flavor2Compile <span class="title">project</span><span class="params">(path: <span class="string">':lib1'</span>, configuration: <span class="string">'flavor2Release'</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>注意事项：</strong></p>
<ol>
<li>编译的配置是产品名称的全称加编译类型，如：flavor1Release</li>
<li>如果Library是Maven的公开库最好不要使用这种特性</li>
<li>产品名称首字母要小写，否则会有语法问题</li>
<li>如果Gradle里面有使用MultiDex选项会生成多个aar</li>
</ol>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌安卓浏览器项目</title>
    <url>/2017/02/03/%E8%B0%B7%E6%AD%8C%E5%AE%89%E5%8D%93%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>谷歌浏览器安卓版源码项目</li>
<li>本项目是世界级的安卓架构</li>
<li>理清本项目业务逻辑完全可以胜任国内一线公司工程师</li>
<li>本项目会长期跟进并升级谷歌浏览器内核版本，欢迎star<a id="more"></a>

</li>
</ul>
<h3 id="欢迎在GitHub或者CSDN上关注我"><a href="#欢迎在GitHub或者CSDN上关注我" class="headerlink" title="欢迎在GitHub或者CSDN上关注我"></a>欢迎在GitHub或者CSDN上关注我</h3><p>GitHub: <a href="https://github.com/JackyAndroid" target="_blank" rel="noopener">https://github.com/JackyAndroid</a></p>
<p>CSDN: <a href="http://blog.csdn.net/rain_butterfly" target="_blank" rel="noopener">http://blog.csdn.net/rain_butterfly</a></p>
<hr>
<h1 id="AndroidChromium"><a href="#AndroidChromium" class="headerlink" title="AndroidChromium"></a>AndroidChromium</h1><h4 id="AndroidChromium源码地址"><a href="#AndroidChromium源码地址" class="headerlink" title="AndroidChromium源码地址"></a><a href="https://github.com/JackyAndroid/AndroidChromium" target="_blank" rel="noopener">AndroidChromium源码地址</a></h4><p><strong>如果使用的是AndroidStudio 2.0以上版本且开启instant run功能，建议关闭后再进行调试（instant run会修改首先启动的Application导致chrome provider context 引用错误导致crash）</strong></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>谷歌浏览器安卓版源码项目</li>
<li>本项目是世界级的安卓架构</li>
<li>理清本项目业务逻辑完全可以胜任国内一线公司工程师</li>
<li>本项目会长期跟进并升级谷歌浏览器内核版本，欢迎star</li>
</ul>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510194842.png" alt></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510194919.png" alt></p>
<hr>
<h3 id="以下是升级chrome内核注意事项，如不是相关人员可以忽略"><a href="#以下是升级chrome内核注意事项，如不是相关人员可以忽略" class="headerlink" title="以下是升级chrome内核注意事项，如不是相关人员可以忽略"></a>以下是升级chrome内核注意事项，如不是相关人员可以忽略</h3><hr>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>参考<a href="https://chromium.googlesource.com/chromium/src/+/master/docs/android_build_instructions.md" target="_blank" rel="noopener">官方</a>及其他教程编译通过chromium源码，并能生成chrome.apk</p>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>使用AndroidStudio开发环境调试Chromium Android UI层。</p>
<h3 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h3><ol>
<li>采用Android Studio作为开发环境，从Chromium for Android抽取chrome模块的源码，加入Android project。</li>
<li>native代码在chromium环境中build，作为so加入Android project</li>
<li>基础模块(base, content, net等)在chromium环境build为jar包，加入Android project</li>
<li>content, chrome, ui等模块的资源文件加入Android library project</li>
</ol>
<h3 id="资源文件为什么不能直接都添加到Android-project呢？"><a href="#资源文件为什么不能直接都添加到Android-project呢？" class="headerlink" title="资源文件为什么不能直接都添加到Android project呢？"></a>资源文件为什么不能直接都添加到Android project呢？</h3><p>因为命名空间的原因，比如content模块的资源的命名空间为org.chromium.content, chrome模块的资源的命名空间为        org.chromium.chrome，所以需要建立不同的Android library project, 指定不同的包名。</p>
<h3 id="本项目和源码目录对应关系"><a href="#本项目和源码目录对应关系" class="headerlink" title="本项目和源码目录对应关系"></a>本项目和源码目录对应关系</h3><p>app/libs ———– chromium/src/out/Release/lib.java</p>
<p>app/src/main/aidl ———– chromium/src/chrome/android/java/src/android/support/customtabs/*.aidl</p>
<p>app/src/main/assets ———– chromium/src/out/Release/assets/chrome_public_apk</p>
<p>app/src/main/java ———— chromium/src/chrome/android/java/src</p>
<p>app/src/main/jniLibs ———– chromium/src/out/Release/chrome_public_apk/libs</p>
<p>app/src/main/res（app module 初始化资源）</p>
<p>libraries/androidmedia_res ———– chromium/src/third_party/android_media/java/res</p>
<p>libraries/chrome_res ———– chromium/src/chrome/android/java/res &amp; chromium/src/chrome/android/java/res_chromium</p>
<p>libraries/content_res ———– chromium/src/content/public/android/java/res</p>
<p>libraries/datausagechart_res ——— chromium/src/third_party/android_data_chart/java/res</p>
<p>libraries/ui_res ———- chromium/src/ui/android/java/res</p>
<h3 id="建议-amp-注意事项"><a href="#建议-amp-注意事项" class="headerlink" title="建议&amp;注意事项"></a>建议&amp;注意事项</h3><ol start="2">
<li>pak和dat等文件需要加入到assets目录，而且不能压缩</li>
<li>aidl文件加入到main/aidl下，android studio会自动处理</li>
<li>目前构建的chromium版本是48.0.2554.0，内核为官方版本</li>
<li>因为某些java文件是通过C文件编译生成，只存在chromium/src/out  目录下。如果按以上对应关系升级版本缺失文件，请到out/目录下去搜索，根据命名空间添加相应文件。还有一些临时生成的xml资源文件也需要从out/目录下去拷贝到相应的资源模块。</li>
<li>如果使用的是AndroidStudio 2.0以上版本且开启instant run功能，建议关闭后再进行调试（instant run会修改首先启动的Application导致chrome provider context 引用错误导致crash）</li>
</ol>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>本项目灵感来自于365browser</p>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><pre><code>Copyright 2016 Jacky Wang&lt;jacky.android@foxmail.com&gt;

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</code></pre>]]></content>
      <tags>
        <tag>开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Framework是怎么启动的？</title>
    <url>/2017/02/03/Android-Framework%E6%98%AF%E6%80%8E%E4%B9%88%E5%90%AF%E5%8A%A8%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安卓系统启动过程其实是建立一套系统运行需要的环境，就像建立一个国家首先需要一些物质基础，比如公路、工厂、建筑。</p>
<a id="more"></a>

<h2 id="Android-Framework运行环境是怎样的？"><a href="#Android-Framework运行环境是怎样的？" class="headerlink" title="Android Framework运行环境是怎样的？"></a>Android Framework运行环境是怎样的？</h2><p>安卓系统启动过程其实是建立一套系统运行需要的环境，就像建立一个国家首先需要一些物质基础，比如公路、工厂、建筑。</p>
<p>Framework运行环境如下图：</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200252.png" alt></p>
<p>安卓系统中运行的第一个Dalvik虚拟机叫做zygote，这个的意思是“卵”，那有什么卵用呢？听这个词的意思就知道是孵化的意思，接下来所有的Dalvik虚拟机进程都是这个“卵”孵化出来的。</p>
<p>zygote进程中包含两个主要模块，分别如下：</p>
<ul>
<li>Socket服务端。任务是用于接收启动新的Dalvik进程的命令。</li>
<li>Framework共享类及共享资源。当zygote进程启动后会加载一些共享的类及资源，就像营养液一样，供其他的细胞吸收。其中共享类是在preload-classes文件中被定义的，共享资源是在preload-resources中被定义的。其他Dalvik进程是被zygote卵进程孵化出来的，所以这些类和资源加载后，新的Dalvik进程就可以直接使用这些类和资源就达到了共享目的，就像一个细胞分裂成两个，共享一些基因和营养。</li>
</ul>
<p>zygote进程对应的程序是app_process,该程序在system/bin目录下。</p>
<p>zygote孵化出的第一个Dalvik进程是SystemServer，该进程对应的程序依然是app_process,因为该进程是从app_process中孵化出来的。</p>
<p>SystemServer中创建了一个Socket客户端（生产线经理），之后所有的Dalvik进程都将通过该Socket客户端间接被启动，Ams负责管理这个客户端。如果需要启动新的APK进程时，Ams会通过该Socket客户端向zygote进程的Socket服务端（生产线工人）发送一个启动命令，然后zygote会孵化出新的进程（产品生产成型）。</p>
<p>这样的架构有两个特点：</p>
<ul>
<li>每一个进程都是一个Dalvik虚拟机，Dalvik虚拟机是一种类似于java虚拟机的程序。</li>
<li>zygote进程会预先装载共享类和共享资源，提供营养液和基因，这些类和资源其实就是SDK中定义的大部分类和资源。当通过zygote孵化出新进程后，新的APK只需要去加载APK自身包含的类和资源，这样多个APK就可以共享Framework资源了。</li>
</ul>
<h2 id="和Dalvik虚拟机关系比较好的可执行程序有哪些？"><a href="#和Dalvik虚拟机关系比较好的可执行程序有哪些？" class="headerlink" title="和Dalvik虚拟机关系比较好的可执行程序有哪些？"></a>和Dalvik虚拟机关系比较好的可执行程序有哪些？</h2><h3 id="1-dalvikvm"><a href="#1-dalvikvm" class="headerlink" title="1.dalvikvm"></a>1.dalvikvm</h3><p>java程序运行时都是由一个虚拟机来解释java字节码，将这些字节码翻译成本地CPU指令码然后执行。dalvikvm的作用就是创建一个虚拟机并执行参数中指定的java类。</p>
<h3 id="2-dvz"><a href="#2-dvz" class="headerlink" title="2.dvz"></a>2.dvz</h3><p>dvz的作用是从zygote进程中孵化出一个新的进程，新进程其实就是一个Dalvik虚拟机。该进程与dalvikvm启动的虚拟机相比，区别是该进程中已经预装了Framework的大部分类和资源。</p>
<h3 id="3-app-process"><a href="#3-app-process" class="headerlink" title="3.app_process"></a>3.app_process</h3><p>Framework在启动时需要加载运行两个特定java类，一个是ZygoteInit.java，一个是SystemServer.java。为了方便使用，系统才提供了一个app_process进程，该进程会自动运行这两个类，app_process其实就是使用dalvikvm启动ZygoteInit.java，启动后会加载Framework中得大部分类和资源。</p>
<h2 id="Zygote是如何启动的？"><a href="#Zygote是如何启动的？" class="headerlink" title="Zygote是如何启动的？"></a>Zygote是如何启动的？</h2><h3 id="1-在init-rc中配置Zygote启动参数"><a href="#1-在init-rc中配置Zygote启动参数" class="headerlink" title="1.在init.rc中配置Zygote启动参数"></a>1.在init.rc中配置Zygote启动参数</h3><h3 id="2-启动Socket服务端口"><a href="#2-启动Socket服务端口" class="headerlink" title="2.启动Socket服务端口"></a>2.启动Socket服务端口</h3><p>当Zygote服务从app_process开始启动后，会启动一个Dalvik虚拟机，虚拟机第一个执行的java类就是ZygoteInit.java，该类第一个重要的工作就是启动一个Socket服务端口，该Socket端口用于接收启动新进程的命令。</p>
<h3 id="3-加载preload-classes"><a href="#3-加载preload-classes" class="headerlink" title="3.加载preload-classes"></a>3.加载preload-classes</h3><p>在Zygote类的main（）函数中，创建完Socket服务端后还不能立即孵化出新的进程，因为这个“卵”还没有必须的“基因”，这个“基因”就是指预装的Framework大部分类及资源。</p>
<h3 id="4-加载preload-resources"><a href="#4-加载preload-resources" class="headerlink" title="4.加载preload-resources"></a>4.加载preload-resources</h3><p>preload-resources包含两类资源，一类是drawable资源，一类是color资源。加载这些资源是在preloadResource（）函数中完成的，该函数调用preloadDrawable（）和preloadColorStateLists（）加载这两类资源，原理就是把这些资源读出来放到一个全局变量中，只要该类对象不被销毁，这些全局变量就会一直保存。</p>
<h3 id="5-使用fork启动新的进程"><a href="#5-使用fork启动新的进程" class="headerlink" title="5.使用fork启动新的进程"></a>5.使用fork启动新的进程</h3><p>fork是Linux系统的一个系统调用，作用就是复制当前进程产生一个新的进程，相当于生物的克隆。除了进程id不同，新进程将拥有和原始进程完全相同的进程信息。进程的信息包括该进程所打开的文件描述符列表、所分配的内存等。当新进程被创建后，两个进程将共享已经分配的内存空间，如果其中一个需要向内存中写入数据时，操作系统才复制一份目标地址空间，并将要写的数据写入到新的地址中。这种“仅当写的时候才复制”的机制可以最大限度的在多个进程中共享物理内存。</p>
<h4 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h4><p>去乌镇见一下习大大和去乌镇吃一次丁磊的猪肉，这是两个进程，但是两个进程中的很多任务是相同的，先订机票，做地铁到机场，做几小时飞机过去。到了之后不同的就是见习大大和吃猪肉。如果可以先雇一个秘书进程让它订机票、做地铁、做飞机，到乌镇。然后秘书在复制出两个秘书，一个去见习大大，一个去吃猪肉，好处是节省了大量内存。</p>
<p>Zygote进程就是本例中的“秘书进程”，那些“订机票、做地铁、乘飞机”就是Zygote进程中加载的preload-classes类的功能。</p>
<p>这样新的进程就脱离的Zygote进程的孵化成为一个真正的应用进程。</p>
<h2 id="SystemServer-进程是如何启动的？"><a href="#SystemServer-进程是如何启动的？" class="headerlink" title="SystemServer 进程是如何启动的？"></a>SystemServer 进程是如何启动的？</h2><p>SystemServer进程是Zygote孵化出的第一个进程，然后再配置SystemServer进程的环境。</p>
<h3 id="1-启动各种系统服务线程"><a href="#1-启动各种系统服务线程" class="headerlink" title="1.启动各种系统服务线程"></a>1.启动各种系统服务线程</h3><p>SystemServer进程在Android运行环境中扮演了“神经中枢”的作用，APK应用中能够直接交互的大部分系统服务都在该进程中运行，常见的有WindowManagerServer（Wms）、ActivityManagerService（Ams）、PackageManagerServer（Pms），这些系统服务都是以一个线程的方式存在于SystemServer进程中。</p>
<h3 id="2-启动第一个Activity"><a href="#2-启动第一个Activity" class="headerlink" title="2.启动第一个Activity"></a>2.启动第一个Activity</h3><p>当以上服务线程都启动后，其中Ams服务是systemReady（）调用完成最后启动的，在Ams的systemReady（）函数的最后一段代码则发出了启动任务队列中最上面一个Activity消息。</p>
<p>在Ams的startHomeActivityLocked（）中，系统发出了一个category字段包含CATEGORY_HOME的intent，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intent.setComponent(mTopComponent);</span><br><span class="line"><span class="keyword">if</span>(mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL)&#123;</span><br><span class="line">intent.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要应用声明自己能够响应该Intent，那么就可以被认为是Home程序。当系统中有多个程序能够响应该Intent时，系统会弹出一个对话框，让用户选择启动哪个程序，也允许用户记住该选择。</p>
<p>到此第一个Activity就启动了。</p>
<p><strong><em>如有问题请留言，转载请注明出处。</em></strong></p>
<p><strong>备注：以上部分思想来自于《Android内核剖析》</strong></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>Android Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 一个窗口是怎么创建出来的？</title>
    <url>/2017/02/03/Android-%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E6%98%AF%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在WmS看来窗口并不是Window类，而是一个View类。WmS收到用户消息后，需要把消息发送到窗口，View类其实并不能直接接受传递过来的消息，而接受消息的必须是IWindow类，实现IWindow类的是ViewRoot.W类，每一个W内部都包含了一个View变量。</p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在WmS看来窗口并不是Window类，而是一个View类。WmS收到用户消息后，需要把消息发送到窗口，View类其实并不能直接接受传递过来的消息，而接受消息的必须是IWindow类，实现IWindow类的是ViewRoot.W类，每一个W内部都包含了一个View变量。</p>
<p>WmS并不在意该窗口是哪个应用程序的，关心的是活跃窗口，WmS按一定得规则判断哪个窗口处于活动状态，然后把用户消息给W类，W类再把用户消息传递给内部View变量，然后再由View对象完成剩下的消息处理。</p>
<h2 id="窗户有几种类型？"><a href="#窗户有几种类型？" class="headerlink" title="窗户有几种类型？"></a>窗户有几种类型？</h2><p>Framework定义了三种窗口类型，三种窗口类型的定义在WindowManager类里面。</p>
<ul>
<li>应用窗口。应用窗口一般指该窗口对应一个Activity，由于加载Activity是由Ams完成的，所以对于应用程序创建应用类窗口只能在Activity内部完成。</li>
<li>子窗口。子窗口是指该窗口必须要有一个父窗口，父窗口可以是一个应用类窗口也可以是任何其他的窗口。</li>
<li>系统窗口。系统窗口不需要对应任何Activity，也不需要有父窗口。应用程序是没有办法创建系统窗口的，只有系统进程可以创建系统窗口。</li>
</ul>
<h2 id="那么该怎么创建应用窗口呢？"><a href="#那么该怎么创建应用窗口呢？" class="headerlink" title="那么该怎么创建应用窗口呢？"></a>那么该怎么创建应用窗口呢？</h2><p>1.每个应用类窗口都对应一个Activity对象，所以创建应用类窗口需要创建Activity对象。当AmS要启动某个Activity时就会通知客户端进程，每个客户端进程都对应一个ActivityThread类，所以需要ActivityThread启动Activity。</p>
<p>启动某个Activity实际是构造一个Activity对象，使用ClassLoader从程序文件中装载指定的Activity对应的Class文件。</p>
<p>2.创建完成Activity对象后调用Activity的attach（）方法，attach（）的作用就是为刚刚创造好的Activity设置内部变量。</p>
<p>3.为该Activity创建Window对象。</p>
<p>4.给Window对象中的mWindowManager变量赋值。</p>
<p>5.然后就需要给该窗口添加真正的View或者ViewGroup。从performLaunchActivity（）调用callActivityOnCreate（）开始，然后经一系列调用到Activity的onCreate（）方法，在onCreate（）方法中调用setContentView（）方法实际是调用了其对应的Window对象的setContentView（）方法。</p>
<p>6.接着会调用到PhoneWindow的setContentView，首先调用installDecor（）为Window类添加窗口装饰，其实就是标题栏，程序中设置的layout.xml界面被包含在窗口装饰中，就是窗口内容。窗口装饰也是ViewGroup，窗口装饰和它内部的内容加起来就是我们所说的窗口，或者叫做Window界面。</p>
<p>7.把创建的窗口通知WmS，让WmS把窗口显示在屏幕上。当Activity准备好后会通知Ams，然后Ams经过一系列调用到Activity的makeVisible（），该方法将真正完成把窗口添加进Wms中。</p>
<p>8.在makeVisible方法中，首先获得该Activity内部的WindowManager对象，然后调用该对象的addView（）方法。</p>
<p>9.调用WindowManagerImpl的addView（）方法，流程如下：</p>
<ul>
<li>检查添加的窗口是否已经添加过，不能重复添加。</li>
<li>如果添加的窗口是子窗口类型，找到父窗口并保存在临时变量panelParentView中，该变量作为后面调用ViewRoot的setView（）参数。</li>
<li>创建一个新的ViewRoot</li>
<li>调用ViewRoot的setView（）。</li>
</ul>
<p>10.完成新建一个ViewRoot对象后，需要把新建的ViewRoot对象添加到mRoots对象中。</p>
<p>11.调用ViewRoot对象的setView方法。流程如下：</p>
<ul>
<li>给ViewRoot的重要变量赋值。</li>
<li>调用requestLayout（），发出界面重绘请求。</li>
<li>调用sWindowSession.add（），通知Wms添加窗口。</li>
</ul>
<p>创建子窗口或系统窗口过程和上面的类似。</p>
<p><strong>备注：以上部分思想来自于《Android内核剖析》</strong></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>Android Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Context 到底是什么？</title>
    <url>/2017/02/03/Android-Context-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一个Context意味着一个场景，一个场景就是我们和软件进行交互的一个过程。比如和妹纸约会的月下小桥，比如当你使用微信的时候，场景包括聊天界面、通讯录、朋友圈，以及背后的一些数据。</p>
<a id="more"></a>

<h2 id="什么是Android-Context？"><a href="#什么是Android-Context？" class="headerlink" title="什么是Android Context？"></a>什么是Android Context？</h2><p>一个Context意味着一个场景，一个场景就是我们和软件进行交互的一个过程。比如和妹纸约会的月下小桥，比如当你使用微信的时候，场景包括聊天界面、通讯录、朋友圈，以及背后的一些数据。</p>
<p>那么从安卓程序的角度来看，Context是什么？其实一个Activity就是一个Context，一个Service也是一个Context。</p>
<p>一个应用程序可以认为是一个约会环境，用户在这个环境中会切换到不同的场景，比如先去有情调的饭店吃饭，再去电影院看个电影，然后再去xxx（此处省略一万字…）。</p>
<p>Activity类的确是基于Context，而Service类也是基于Context。Activity除了基于Context类外，还实现了一些其他重要的接口，从架构设计的角度看，interface仅仅是某些功能，而extends才是类的本质，即Activity的本质是一个Context，其所实现的其他接口只是为了扩充Context的功能而已，扩充后的类称之为一个Activity或Service。</p>
<h2 id="一个应用程序中应该有多少个Context对象"><a href="#一个应用程序中应该有多少个Context对象" class="headerlink" title="一个应用程序中应该有多少个Context对象"></a>一个应用程序中应该有多少个Context对象</h2><p>我们在应用程序开发中经常会调用Context的一些方法，这些方法看起来似乎会返回一些全局的对象，而不仅仅是某个Activity，可能会有点疑问，一个应用程序到底有多少个Context对象呢？比如，Context.getResources（）返回该应用程序所对应的Resource类对象，无论从哪个Activity中调用，都会返回同一个Resource对象。</p>
<ul>
<li>一个Activity就是一个场景（Context），一个Service也是一个场景，所以，应用程序中有多少个Activity或者Service就会有多少个Context对象，也就是有多少个场景。</li>
<li>getResource（）等方法返回的是同一个全局对象。</li>
</ul>
<h2 id="Context-继承关系是怎么样的呢？"><a href="#Context-继承关系是怎么样的呢？" class="headerlink" title="Context 继承关系是怎么样的呢？"></a>Context 继承关系是怎么样的呢？</h2><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200217.png" alt></p>
<p>Context类本身是一个纯abstract类。为了使用方便又定义了Context包装类-ContextWrapper，穿上了一身装备显得也比较强大，ContextWrapper构造函数中必须包含一个真正的Context引用，同时ContextWrapper中有attachBaseContext（）用于给ContextWrapper对象中指定真正的Context对象。</p>
<p>ContextThemeWrapper内部包含了与主题相关的接口，这里的主题就是指在AndroidManifest.xml中通过android：theme为Application或者Activity指定的主题。</p>
<p>只有Activity才需要主题，Service默默的后台工作者不需要穿的那么鲜艳，所以Service直接继承于ContextWrapper。</p>
<p>ContextImpl类真正实现了Context中所有的函数，真正的八块腹肌，我们所调用的各种Context类的方法其实实现均来自于该类。</p>
<h2 id="什么时候创建的Context"><a href="#什么时候创建的Context" class="headerlink" title="什么时候创建的Context?"></a>什么时候创建的Context?</h2><p>每一个应用程序在客户端都是从ActivityThread类开始的，创建Context对象也是在该类中完成，具体创建ContextImpl类的地方一共有6处：</p>
<ul>
<li>PackageInfo.makeApplication（）</li>
<li>performLaunchActivity（）</li>
<li>handleCreateBackupAgent（）</li>
<li>handleCreateService（）</li>
<li>handleBindApplication（）</li>
<li>attach（）</li>
</ul>
<p>其中attach（）方法仅在Framework进程启动时调用，应用程序运行时不会调用到该方法。</p>
<h3 id="Application对应的Context"><a href="#Application对应的Context" class="headerlink" title="Application对应的Context"></a>Application对应的Context</h3><p>程序第一次启动时，会辗转调用到makeApplication（）方法。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextImpl appContext = <span class="keyword">new</span> ContextImpl();</span><br><span class="line">appContext.init(<span class="keyword">this</span>,<span class="keyword">null</span>,mActivityThread);</span><br><span class="line">....</span><br><span class="line">appContext.setOuterContext(app);</span><br></pre></td></tr></table></figure>

<h3 id="Activity对应的Context"><a href="#Activity对应的Context" class="headerlink" title="Activity对应的Context"></a>Activity对应的Context</h3><p>启动Activity时，Ams会通过IPC调用到ActivityThread的scheduleLaunchActivity（）方法，该方法包含两种参数。一种是ActivityInfo，这是一个实现了Parcelable接口的数据类，意味着该对象是Ams创建的，并通过IPC传递到ActivityThread；另一种是其他的一些参数。</p>
<p>scheduleLaunchActivity（）方法中会根据以上两种参数构造一个本地ActivityRecord数据类，ActivityThread内部会为每一个Activity创建一个ActivityRecord对象，并使用这些数据对象来管理Activity。</p>
<p>然后会调用handleLaunchActivity（），再调用performLaunchActivity（），该方法中创建ContextImpl的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextImpl appContext = <span class="keyword">new</span> ContextImpl();</span><br><span class="line">appContext.init(r.packageInfo,r.token,<span class="keyword">this</span>);</span><br><span class="line">appContext.setOuterContext(activity);</span><br></pre></td></tr></table></figure>

<p>在performLaunchActivity（）开始执行时，会为r.packageInfo变量赋值。r.packageInfo对象的PackageInfo对象和Application对应的packageInfo对象是同一个。</p>
<h3 id="Service对应的Context"><a href="#Service对应的Context" class="headerlink" title="Service对应的Context"></a>Service对应的Context</h3><p>启动Service时，Ams会通过IPC调用到ActivityThread的scheduleCreateService（）方法，该方法也包含两种参数。第一种是ServiceInfo，这是实现了一个Parcelable接口的数据类，该对象由AmS创建，并通过IPC传递到ActivityThread内部；第二种是其他参数。</p>
<p>在scheduleCreateService（）方法中，会使用以上两种参数构造一个CreateServiceData的数据对象，ActivityThread会为其所包含的每一个Service创建该数据对象，并通过这些对象来管理Service。</p>
<p>然后在执行handleCreateService（）方法，创建ContextImpl对象代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextImpl appContext = <span class="keyword">new</span> ContextImpl();</span><br><span class="line">appContext.init(packageInfo,<span class="keyword">null</span>,<span class="keyword">this</span>);</span><br><span class="line">...</span><br><span class="line">appContext.setOuterContext(service);</span><br></pre></td></tr></table></figure>

<p>Service对应的Context对象内部的mPackageInfo与Activity、Application中是完全相同的。</p>
<h2 id="这几个Context之间的关系"><a href="#这几个Context之间的关系" class="headerlink" title="这几个Context之间的关系"></a>这几个Context之间的关系</h2><p>从以上可以看出，创建Context对象的过程基本上是相同的，不同的仅仅是针对Application、Activity、Service使用了不同的数据对象。</p>
<p>一个应用程序包含的Context个数应该为：Context个数 = Service个数+Activity个数+1，最后的1是Application类本身也会对应一个Context对象。</p>
<p>应用程序中包含多个ContextImpl对象，而内部变量mPackageInfo却指向同一个PackageInfo对象，这种设计结构一般意味着ContextImpl是一种轻量级类，而PackageInfo是一个重量级类。事实上确实是这样，ContextImpl中的大多数进行包操作的重量级函数实际上都是转向了mPackageInfo对象相应的方法，也就是事实上调用了同一个PackageInfo对象。</p>
<p><strong>备注：以上部分思想来自于《Android内核剖析》</strong></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>Android Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>我眼中的Android Framework</title>
    <url>/2017/02/03/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84Android-Framework/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在开发中我们会遇到各种各样的非常奇怪的问题，有些问题是百思不得骑姐。其实这些问题大都是因为我们不了解安卓内部运行原理，知其所以然才是我们的目的。—<strong>前言</strong></p>
<a id="more"></a>

<h1 id="我眼中的Android-Framework"><a href="#我眼中的Android-Framework" class="headerlink" title="我眼中的Android Framework"></a>我眼中的Android Framework</h1><p>在开发中我们会遇到各种各样的非常奇怪的问题，有些问题是百思不得骑姐。其实这些问题大都是因为我们不了解安卓内部运行原理，知其所以然才是我们的目的。—<strong>前言</strong></p>
<p>任何控制类程序都有一个入口，安卓应用程序肯定也是有滴。<br>Android framework包含三个小伙伴：服务端、客户端、linux驱动。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p> 服务端主要包含两个狠重要的类：WindowManagerService（WMS）和ActivityManagerService（AMS）</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端包含以下类：</p>
<ul>
<li><p>ActivityThread：是安卓应用程序的主线程类，这个小伙伴所在的线程就是UI线程或者称为主线程。</p>
</li>
<li><p>Activity：ActivityThread会根据用户的操作选择让哪个Activity对象上它的船。</p>
</li>
<li><p>PhoneWindow：富二代，继承于牛气的Window类，自己屋里住着一个DecorView对象，像它老爸喜欢制定规则提供了一些通用窗口操作API。</p>
</li>
<li><p>Window：富一代，长得比较抽象，喜欢制定规则提供了一些通用的窗口操作API。它不喜欢被人管所以呢，注意：WindowManagerService管理的窗口不是Window类，其实是View和ViewGroup。</p>
</li>
<li><p>DecorView：很能干的家伙，家产来自FrameLayout，比较注重外在喜欢打扮，DecorView是对FrameLayout进行了一些修饰，从名字就可以看出来。</p>
</li>
<li><p>ViewRoot：小管家继承于Handler，主要作用是把WMS的IPC调用转换为本地的一个异步调用。</p>
</li>
<li><p>W类：ViewRoot小助手，继承于binder，是ViewRoot内部类。主要帮助ViewRoot实现把WMS的IPC调用转换为本地的一个异步调用。</p>
</li>
<li><p>WindowManager：客户端如果想创建一个窗口得先告诉WindowManager一声，然后它再和WindowManagerService交流一下看看能不能创建，客户端不能直接和WMS交互。</p>
</li>
</ul>
<h2 id="Linux驱动"><a href="#Linux驱动" class="headerlink" title="Linux驱动"></a>Linux驱动</h2><p> Linux驱动和Framework相关的主要是两个部分：画家SurfaceFlingger和快递员Binder。</p>
<p> 每一个窗口都对应一个画Surface，SF主要是把各个Surface显示到同一屏幕上。Binder是提供跨进程的消息传递。</p>
<h2 id="从apk程序的运行过程去看看上面各个组件在啥时候干啥活的"><a href="#从apk程序的运行过程去看看上面各个组件在啥时候干啥活的" class="headerlink" title="从apk程序的运行过程去看看上面各个组件在啥时候干啥活的"></a>从apk程序的运行过程去看看上面各个组件在啥时候干啥活的</h2><p>ActivityThread从main()函数中就开始动起来，然后调用prepareMainLooper()为UI线程创建一个消息快递通道即MessageQueue。</p>
<p>接着创建ActivityThread对象，创建过程会创建一个消息装卸工Handler对象和一个快递员Binder对象，其中Binder负责接收远程Ams的IPC调用，接收到调用后让Handler把消息装到消息快递队列，UI线程很忙的都是异步的从消息快递队列中取出消息并执行相应操作，比如 start、stop、pause。</p>
<p>然后UI线程让队列调用Looper.loop()方法进入消息循环体，进入后就会不断地从消息队列中读取并处理消息。</p>
<p>当ActivityThread接收到Ams发送start某个Activity的快递后就会创建指定的Activity对象。Activity会先按窗户再去按玻璃和贴窗花，所以先创建PhoneWindow-&gt;DecorView-&gt;创建相应的View或ViewGroup。创建完成后就可以让大家欣赏了，调用WindowManager把界面显示到屏幕上，然后创建ViewRoot，然后调用Wms提供的远程接口添加一个窗口并显示到屏幕上。</p>
<p>接下来就是用户的操作，事件线程不断的把消息快递发到事件队列中去，然后事件分发线程秘书逐个取出消息，然后调用Wms中的相应函数处理该消息。</p>
<h3 id="很多线程是不是很晕？"><a href="#很多线程是不是很晕？" class="headerlink" title="很多线程是不是很晕？"></a>很多线程是不是很晕？</h3><ol>
<li><p>安卓程序中都有哪些线程？</p>
<p>  客户端小伙伴至少包含三个线程小弟，Activity启动后会创建一个ViewRoot.W对象，同时ActivityThread会创建一个ApplicationThread对象，这两个对象继承消息总管Binder，每个Binder对应一个线程，负责接收Linux Binder驱动发送的IPC调用。还有一个是UI线程呗。</p>
</li>
<li><p>UI线程是什么？</p>
<p> 一直在倾听用户的心声，所有的处理用户消息，以及绘制页面的工作都在该线程中完成。</p>
</li>
<li><p>自定义的线程和UI线程有什么区别？</p>
<p> UI线程是从ActivityThread运行的，在该类的main()方法中已经使用了Looper.prepareMainLooper()为该线程添加了Looper对象，已经为该线程创建了消息队列，是自带秘书光环的。因此，我们才可以在Activity中去定义Handler对象，因为创建Handler对象时其线程必须已经创建了消息队列，装卸工得配运输带要不然没法干活。而普通的Thread则没有默认创建消息队列，所以不能直接在Thread中直接定义Handler，这个就是我们不懂程序运行原理导致的困惑。</p>
</li>
</ol>
<p><strong>备注：以上部分思想来自于《Android内核剖析》</strong></p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>Android Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 设计模式-单例模式</title>
    <url>/2017/02/03/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么情况下需要单例模式？"><a href="#什么情况下需要单例模式？" class="headerlink" title="什么情况下需要单例模式？"></a>什么情况下需要单例模式？</h3><ul>
<li><strong>一些类提供公共功能供别人调用，本身不会处理业务逻辑</strong></li>
<li><strong>类会被许多类和线程调用</strong><a id="more"></a>

</li>
</ul>
<h1 id="Android-设计模式-单例模式"><a href="#Android-设计模式-单例模式" class="headerlink" title="Android 设计模式-单例模式"></a>Android 设计模式-单例模式</h1><h3 id="什么情况下需要单例模式？-1"><a href="#什么情况下需要单例模式？-1" class="headerlink" title="什么情况下需要单例模式？"></a>什么情况下需要单例模式？</h3><ul>
<li><strong>一些类提供公共功能供别人调用，本身不会处理业务逻辑</strong></li>
<li><strong>类会被许多类和线程调用</strong></li>
</ul>
<hr>
<h3 id="设计单例模式"><a href="#设计单例模式" class="headerlink" title="设计单例模式"></a>设计单例模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton mSingleton;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">     mSingleton = <span class="keyword">new</span> Singleton();\\A</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSingleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的做法在多线程的时候会出现问题，比如有两个线程同时调用getInstance(),这时会new两个对象出来。</p>
<h3 id="单例模式改进1"><a href="#单例模式改进1" class="headerlink" title="单例模式改进1"></a>单例模式改进1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton mSingleton;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">    <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">     mSingleton = <span class="keyword">new</span> Singleton();\\A</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSingleton;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式还是会有问题，就是高并发情况下多线程去抢夺锁，假如有几百个线程，其中有一个运气比较差，这个线程就会出现一直去getInstance，资源一直返回不回去，UI也不会得到更新。</p>
<h3 id="单例模式改进2"><a href="#单例模式改进2" class="headerlink" title="单例模式改进2"></a>单例模式改进2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton mSingleton;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)&#123;\\A</span><br><span class="line">    <span class="keyword">synchronized</span>(Singleton.class)&#123;\\C</span><br><span class="line">     <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)</span><br><span class="line">      mSingleton = <span class="keyword">new</span> Singleton();\\B</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSingleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：volatile是防止cpu进行指令重排序，防止代码顺序被更改。<br>这种方式比较好的地方在于第一次创建实例时候就会同步所有的线程，以后再获取实例就会直接返回。</p>
<h3 id="但是看代码好像还是有人会有疑问，为什么需要两次判断为null？"><a href="#但是看代码好像还是有人会有疑问，为什么需要两次判断为null？" class="headerlink" title="但是看代码好像还是有人会有疑问，为什么需要两次判断为null？"></a>但是看代码好像还是有人会有疑问，为什么需要两次判断为null？</h3><p>其实这个意义在于防止多个线程同时进入第一个if内，比如说线程A执行到A行，线程B执行到B行，线程B还没有返回。当线程A执行到C行，这时线程B初始化实例完毕，如果没有里面的再一次判断就会生成两个实例！所以两次的判断null还是有意义的。</p>
<p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png" alt></p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>国内优秀的TV桌面开源项目</title>
    <url>/2017/02/03/%E5%9B%BD%E5%86%85%E4%BC%98%E7%A7%80%E7%9A%84TV%E6%A1%8C%E9%9D%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是一个TV 桌面，包含了一个Leanback 桌面（最低版本是17）和一个普通桌面（最低版本是15），Leanback桌面是基于Leanback库开发符合Android TV官方交互规范。</p>
<a id="more"></a>

<h3 id="欢迎在GitHub或者CSDN上关注我"><a href="#欢迎在GitHub或者CSDN上关注我" class="headerlink" title="欢迎在GitHub或者CSDN上关注我"></a>欢迎在GitHub或者CSDN上关注我</h3><p>GitHub: <a href="https://github.com/JackyAndroid" target="_blank" rel="noopener">https://github.com/JackyAndroid</a></p>
<p>CSDN: <a href="http://blog.csdn.net/rain_butterfly" target="_blank" rel="noopener">http://blog.csdn.net/rain_butterfly</a></p>
<hr>
<h1 id="AndroidTVLauncher"><a href="#AndroidTVLauncher" class="headerlink" title="AndroidTVLauncher"></a>AndroidTVLauncher</h1><p>这是一个TV 桌面，包含了一个Leanback 桌面（最低版本是17）和一个普通桌面（最低版本是15），Leanback桌面是基于Leanback库开发符合Android TV官方交互规范。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>CatLauncher(Leanback风格) 目前功能已基本稳定，后续会跟进官方Leanback库的进展，Compatible桌面理论上不再维护</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><blockquote>
<ul>
<li>Leanback风格</li>
<li>图片展示</li>
<li>视频直播（节操播放器-基于ijkplayer）</li>
<li>媒体详情</li>
<li>第三方应用列表</li>
<li>桌面特殊功能</li>
</ul>
</blockquote>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195323.png" alt></p>
<h3 id="下一步的改进"><a href="#下一步的改进" class="headerlink" title="下一步的改进"></a>下一步的改进</h3><blockquote>
<ul>
<li>跟进官方Leanback库新功能</li>
</ul>
</blockquote>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>Apache License, Version 2.0</p>
]]></content>
      <tags>
        <tag>开源项目</tag>
      </tags>
  </entry>
</search>
