<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacky</title>
  
  
  <link href="http://www.jackywang.tech/atom.xml" rel="self"/>
  
  <link href="http://www.jackywang.tech/"/>
  <updated>2023-07-25T12:53:39.404Z</updated>
  <id>http://www.jackywang.tech/</id>
  
  <author>
    <name>Jacky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Android 性能引擎】文件碎片</title>
    <link href="http://www.jackywang.tech/2023/07/25/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E5%AE%89%E8%A3%85%E5%8A%A0%E9%80%9F/"/>
    <id>http://www.jackywang.tech/2023/07/25/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E5%AE%89%E8%A3%85%E5%8A%A0%E9%80%9F/</id>
    <published>2023-07-25T12:24:49.000Z</published>
    <updated>2023-07-25T12:53:39.404Z</updated>
    
    <content type="html"><![CDATA[<p>提升App安装速度。</p><span id="more"></span><p>方案：把dex文件优化流程延迟处理。</p><p>效果：大型应用2-3s即可安装完毕。</p><p>影响：dex文件未处理完成前启动应用，会略微影响启动速度。多次连续安装App安装时间可能会变长。</p><p>关键代码：</p><p>PackageDexOptimizer#performDexOpt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DexOptResult</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">performDexOpt</span><span class="params">(AndroidPackage pkg, <span class="meta">@NonNull</span> PackageStateInternal pkgSetting,</span></span><br><span class="line"><span class="params">            String[] instructionSets, CompilerStats.PackageStats packageStats,</span></span><br><span class="line"><span class="params">            PackageDexUsage.PackageUseInfo packageUseInfo, DexoptOptions options)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (PLATFORM_PACKAGE_NAME.equals(pkg.getPackageName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;System server dexopting should be done via &quot;</span></span><br><span class="line">                    + <span class="string">&quot; DexManager and PackageDexOptimizer#dexoptSystemServerPath&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pkg.getUid() == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Dexopt for &quot;</span> + pkg.getPackageName()</span><br><span class="line">                    + <span class="string">&quot; has invalid uid.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!canOptimizePackage(pkg)) &#123;</span><br><span class="line">            <span class="keyword">return</span> DEX_OPT_SKIPPED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">acquireTime</span> <span class="operator">=</span> acquireWakeLockLI(pkg.getUid());</span><br><span class="line">            <span class="keyword">try</span> &#123;<span class="comment">//此处可立即返回DEX_OPT_SKIPPED状态，并延迟处理performDexOptLI</span></span><br><span class="line">                <span class="keyword">return</span> performDexOptLI(pkg, pkgSetting, instructionSets,</span><br><span class="line">                        packageStats, packageUseInfo, options);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                releaseWakeLockLI(acquireTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;提升App安装速度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="性能引擎" scheme="http://www.jackywang.tech/tags/%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>【Android 性能引擎】文件碎片</title>
    <link href="http://www.jackywang.tech/2023/07/25/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E6%96%87%E4%BB%B6%E7%A2%8E%E7%89%87/"/>
    <id>http://www.jackywang.tech/2023/07/25/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E6%96%87%E4%BB%B6%E7%A2%8E%E7%89%87/</id>
    <published>2023-07-25T11:24:49.000Z</published>
    <updated>2023-07-25T12:53:52.654Z</updated>
    
    <content type="html"><![CDATA[<p>整理碎片，提升整机性能。</p><span id="more"></span><p>入口：</p><p>PMS#performFstrimIfNeeded</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performFstrimIfNeeded</span><span class="params">()</span> &#123;</span><br><span class="line">        PackageManagerServiceUtils.enforceSystemOrRoot(<span class="string">&quot;Only the system can request fstrim&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Before everything else, see whether we need to fstrim.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IStorageManager</span> <span class="variable">sm</span> <span class="operator">=</span> InstallLocationUtils.getStorageManager();</span><br><span class="line">            <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">doTrim</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">interval</span> <span class="operator">=</span> android.provider.Settings.Global.getLong(</span><br><span class="line">                        mContext.getContentResolver(),</span><br><span class="line">                        android.provider.Settings.Global.FSTRIM_MANDATORY_INTERVAL,</span><br><span class="line">                        DEFAULT_MANDATORY_FSTRIM_INTERVAL);</span><br><span class="line">                <span class="keyword">if</span> (interval &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeSinceLast</span> <span class="operator">=</span> System.currentTimeMillis() - sm.lastMaintenance();</span><br><span class="line">                    <span class="keyword">if</span> (timeSinceLast &gt; interval) &#123;</span><br><span class="line">                        doTrim = <span class="literal">true</span>;</span><br><span class="line">                        Slog.w(TAG, <span class="string">&quot;No disk maintenance in &quot;</span> + timeSinceLast</span><br><span class="line">                                + <span class="string">&quot;; running immediately&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (doTrim) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isFirstBoot()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mDexOptHelper.isDexOptDialogShown()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                ActivityManager.getService().showBootMessage(</span><br><span class="line">                                        mContext.getResources().getString(</span><br><span class="line">                                                R.string.android_upgrading_fstrim), <span class="literal">true</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    sm.runMaintenance();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">&quot;storageManager service unavailable!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// Can&#x27;t happen; StorageManagerService is local</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>StorageManagerService#runIdleMaint</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">runIdleMaint</span><span class="params">(Runnable callback)</span> &#123;</span><br><span class="line">        enforcePermission(android.Manifest.permission.MOUNT_FORMAT_FILESYSTEMS);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Block based checkpoint process runs fstrim. So, if checkpoint is in progress</span></span><br><span class="line">            <span class="comment">// (first boot after OTA), We skip idle maintenance and make sure the last</span></span><br><span class="line">            <span class="comment">// fstrim time is still updated. If file based checkpoints are used, we run</span></span><br><span class="line">            <span class="comment">// idle maintenance (GC + fstrim) regardless of checkpoint status.</span></span><br><span class="line">            <span class="keyword">if</span> (!needsCheckpoint() || !supportsBlockCheckpoint()) &#123;</span><br><span class="line">                mVold.runIdleMaint(mNeedGC, <span class="keyword">new</span> <span class="title class_">IVoldTaskListener</span>.Stub() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStatus</span><span class="params">(<span class="type">int</span> status, PersistableBundle extras)</span> &#123;</span><br><span class="line">                        <span class="comment">// Not currently used</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFinished</span><span class="params">(<span class="type">int</span> status, PersistableBundle extras)</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">                            BackgroundThread.getHandler().post(callback);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">&quot;Skipping idle maintenance - block based checkpoint in progress&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Slog.wtf(TAG, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Android只在手机特定场景下触发磁盘整理，未兼容到其他设备。</p><p>其他终端可在自定义场景内触发磁盘整理，提升性能，如：</p><ol><li>屏保场景</li><li>系统升级场景</li><li>开机场景</li><li>恢复出厂场景</li><li>App提供主动触发入口</li></ol><p>测试数据：</p><p>IO读写影响：提升10~20%</p><p>应用启动影响：提升5~10%</p><p>测试环境：</p><p>芯片：MTK9669</p><p>备注：不同芯片测试数据差异较大。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理碎片，提升整机性能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="性能引擎" scheme="http://www.jackywang.tech/tags/%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>【Android 性能引擎】硬件提频</title>
    <link href="http://www.jackywang.tech/2023/07/25/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E7%A1%AC%E4%BB%B6%E6%8F%90%E9%A2%91/"/>
    <id>http://www.jackywang.tech/2023/07/25/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E7%A1%AC%E4%BB%B6%E6%8F%90%E9%A2%91/</id>
    <published>2023-07-25T07:24:49.000Z</published>
    <updated>2023-07-25T12:53:58.868Z</updated>
    
    <content type="html"><![CDATA[<p>动态修改硬件频率，提高机器性能。</p><span id="more"></span><h5 id="CPU提频"><a href="#CPU提频" class="headerlink" title="CPU提频"></a>CPU提频</h5><p>cpufreq框架图：</p><p>cpufreq framework会通过cpufreq core、cpufreq governors、cpufreq stats等模块，以sysfs的形式，向用户空间提供cpu frequency的查询、控制等接口。</p><p><img src="https://p.ipic.vip/d8kp4j.jpg"></p><p>各字段解释如下：</p><p>cpuinfo_cur_freq: The current operating frequency of the cpu</p><p>cpuinfo_max_freq: This file specifies the maximum operating frequency at which the processor can run (unit: kilohertz)</p><p>cpuinfo_min_freq: This file specifies the minimum operating frequency at which the processor can run (unit: kilohertz)</p><p>cpuinfo_transition_latency: This file defines the time required for the processor to switch between two different frequencies (unit: nanoseconds)</p><p>scaling_available_frequencies: list of all supported main frequencies (unit: kilohertz)</p><p>scaling_available_governors: This file shows all cpufreq governor types supported in the current kernel</p><p>scaling_cur_freq: The current CPU operating frequency determined by the governor and cpufreq cores. This frequency is the main frequency that the kernel thinks the CPU is currently running</p><p>scaling_driver: This file shows which cpufreq driver the CPU is using</p><p>scaling_governor: Through the echo command, the governor type of the current processor can be changed</p><p>scaling_max_freq: Display the upper and lower limits of the current policy (unit: kilohertz). It should be noted that when changing the cpu policy, you need to set scaling_max_freq first, and then scaling_min_freq</p><p>scaling_setspeed: If the user selects the “userspace” governor, then the main frequency of the cpu can be set to a specified value.</p><p>可修改调频器提高频率，例：echo performance &gt; &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor；调频器可选项和CPU厂商有关。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;动态修改硬件频率，提高机器性能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="性能引擎" scheme="http://www.jackywang.tech/tags/%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>【Android 性能引擎】开篇</title>
    <link href="http://www.jackywang.tech/2023/07/24/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E5%BC%80%E7%AF%87/"/>
    <id>http://www.jackywang.tech/2023/07/24/%E3%80%90Android%20%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E%E3%80%91%E5%BC%80%E7%AF%87/</id>
    <published>2023-07-24T07:24:49.000Z</published>
    <updated>2023-07-25T12:53:44.832Z</updated>
    
    <content type="html"><![CDATA[<p>开篇。</p><span id="more"></span><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://p.ipic.vip/gzx197.jpg"></h5>]]></content>
    
    
    <summary type="html">&lt;p&gt;开篇。&lt;/p&gt;</summary>
    
    
    
    
    <category term="性能引擎" scheme="http://www.jackywang.tech/tags/%E6%80%A7%E8%83%BD%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 编译源码</title>
    <link href="http://www.jackywang.tech/2020/06/10/Kotlin-%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/"/>
    <id>http://www.jackywang.tech/2020/06/10/Kotlin-%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/</id>
    <published>2020-06-10T12:50:11.000Z</published>
    <updated>2020-07-01T12:58:35.313Z</updated>
    
    <content type="html"><![CDATA[<p>编译Kotlin源码</p><span id="more"></span><h3 id="Kotlin-编译源码"><a href="#Kotlin-编译源码" class="headerlink" title="Kotlin 编译源码"></a>Kotlin 编译源码</h3><h5 id="clone-kotlin-源码工程"><a href="#clone-kotlin-源码工程" class="headerlink" title="clone kotlin 源码工程"></a>clone kotlin 源码工程</h5><p>git clone <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:JetBrains&#x2F;kotlin.git，工程较大 保证外网通畅</p><h5 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h5><p>下载安装 Java 1.6、1.7、1.8、9</p><p>1.6可使用brew安装，其他包可在官网下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap caskroom/versions</span><br><span class="line">$ brew cask install java6</span><br></pre></td></tr></table></figure><p>配置Java路径到工程根目录的gradle.properties文件，例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/</span><br><span class="line">JDK_16=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/</span><br><span class="line">JDK_17=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line">JDK_18=/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/</span><br><span class="line">JDK_9=/Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents/Home/</span><br></pre></td></tr></table></figure><h5 id="下载IDEA"><a href="#下载IDEA" class="headerlink" title="下载IDEA"></a>下载IDEA</h5><p>地址：<a href="https://www.jetbrains.com/idea/download/#section=mac">https://www.jetbrains.com/idea/download/#section=mac</a></p><p>打开工程，第一次下载依赖会耗时较长，取决于机器配置和网络</p><p>sync完成如下，可以方便的跟踪代码走向了：</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20200701205702.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;编译Kotlin源码&lt;/p&gt;</summary>
    
    
    
    
    <category term="Kotlin" scheme="http://www.jackywang.tech/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>完全公平调度器</title>
    <link href="http://www.jackywang.tech/2019/08/25/%E5%AE%8C%E5%85%A8%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    <id>http://www.jackywang.tech/2019/08/25/%E5%AE%8C%E5%85%A8%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8/</id>
    <published>2019-08-25T12:03:12.000Z</published>
    <updated>2019-08-26T11:20:51.071Z</updated>
    
    <content type="html"><![CDATA[<p>读书笔记，Linux 系统编程 第六章高级进程管理</p><span id="more"></span><h3 id="完全公平调度器"><a href="#完全公平调度器" class="headerlink" title="完全公平调度器"></a>完全公平调度器</h3><p>Linux调度器为完全公平调度器，简称为CFS。和最近华为鸿蒙提出的确定时延调度相反。</p><p>完全公平调度器和传统的Unix调度器有很大的区别。在大多数Unix系统中，包括引入CFS之前的Linux系统，在进程调度中存在两个基本的基于进程的因素：优先级和时间片。在传统的进程调度器中，会给每个就绪进程分配一个时间片。进程可能会一直运行直到消耗完分配给它的时间片。调度器会给每个进程分配优先级。进程调度器会先调度优先级高的进程，再调度优先级低的进程。这个调度算法非常简单，而且对于早期的基于时间片共享的Unix系统效果良好。但对于交互和公平性的系统而言，如现代计算机的桌面和移动设备，该算法就有些差强人意了。</p><p>完全公平调度器引入了一种不同的算法，成为公平调度，它消除了时间片作为处理器分配单元，而是给每个进程分配了处理器的分配比例。</p><p>算法逻辑如下：CFS最初给N个进程分别分配1&#x2F;N的处理器时间。然后CFS通过优先级（nice值）权衡每个进程的比例，调整分配。默认的优先级为0，权值是1，则比例不变。优先级的值设置的越小（优先级越高），权值就越高，就增加给该进程的处理器比例值；优先级的值设置的越高（优先级越低），权值越低，就减少分配给该进程的比例值。</p><p>通过这种方式，CFS就基于权值分配给了每个进程处理器比例。要确定每个进程真正的执行时间，CFS需要把比例划分为一个固定周期，这个周期叫目标延迟，表示系统的调度延迟。</p><p>举个例子：假设目标延迟设置为20ms，有两个优先级相同的进程，那每个进程分配到的时间就是10ms。这样CFS就会先执行一个进程运行10ms，再执行另一个进程运行10ms，不断反复。</p><p>如果当前有200个进程怎么办，延迟如果是20ms，那每个进程只能分配到100微秒。这样大部分时间就会浪费在切换进程的上下文，CFS引入最小粒度解决这个问题。</p><p>“最小粒度”是指任意进程运行时间的基准值。所有进程，不管分配到处理器的时间比例是多少，都会至少运行最小粒度的时间。这种机制可以保证不会大部分时间浪费在进程切换上。</p><p>通过给进程分配处理器资源比例，而不是固定的时间片，CFS可以实现公平性。CFS也支持可配置的时间延迟。CFS中，进程按配额运行，时间片是根据系统可运行的进程数动态变化的，解决了传统调度器对于交互进程和IO约束性进程所面临的很多问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;读书笔记，Linux 系统编程 第六章高级进程管理&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://www.jackywang.tech/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ApkBus开发者千人大会演讲记录</title>
    <link href="http://www.jackywang.tech/2019/05/05/ApkBus%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%83%E4%BA%BA%E5%A4%A7%E4%BC%9A%E6%BC%94%E8%AE%B2%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.jackywang.tech/2019/05/05/ApkBus%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%83%E4%BA%BA%E5%A4%A7%E4%BC%9A%E6%BC%94%E8%AE%B2%E8%AE%B0%E5%BD%95/</id>
    <published>2019-05-05T12:01:25.000Z</published>
    <updated>2019-08-25T12:07:12.263Z</updated>
    
    <content type="html"><![CDATA[<p>里程碑记录。</p><span id="more"></span><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/FE19CA41-2761-4467-AAB1-ADCEB3A805AA-7755-0000069DE2C01374.jpg"></p><p>4.20号被安卓巴士社区邀请做了一场千人演讲，今天把演讲内容记录下。</p><p>大家上午好，今天我分享的主题是关于Android工程效率方面的，仓库依赖管理器。</p><p><strong>个人简介</strong></p><p>我先简单介绍下，我常用的网络ID是墨镜猫和JackyWang，我在github的star，java方面的话有四千七百多，总的star在一万两千多，在深圳java分类排名应该可以排到前三。我之前在滴滴和乐视工作过，现在在TCL·雷鸟。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/3075B99B-C450-40F7-9569-395D22CFF2E0-7755-0000069E6D1837AE.jpg"></p><p><strong>开源贡献</strong></p><p>给大家说下我这几年对开源社区的贡献，原创的项目有7个，贡献的代码有39.4w行，和8个国家12个地区的开发者一起维护其中的3个项目，其中两个仓库在各自的类别里面排到了前三。</p><p>我是从14年开始做开源，一直到现在，中间换了一次ID，所以你们看到我的账号是从16年开始的。我14年开始做开源的时候，当时是做了一个小项目放了上去，后来就过了一年多时间，突然有一天有一个爱尔兰的程序员给我发邮件，说你做的这个开源项目还可以，正好我们这有一个可以合作的项目，后来我们就聊了聊，大概意思就是想让我根据我那个开源项目给他们做下定制，价钱大概是三千美金。这件事对我触动还是非常大的，开源社区就像你和世界上其他人沟通的一个窗口一样，可以把你和任意位置的人连接起来，并产生价值。从那之后就一直做开源到现在，收获的远比我之前想象的要多得多，认识了很多有趣的人、见识到了世界级的项目是什么样的还认识了像Facebook、微软这种级别企业的Hr，开源社区的价值还是非常大的。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/4201EA5C-5ACC-43FC-B270-BB558E67437B-7755-000006A10AA5814E.jpg"></p><p><strong>仓库维护的痛点</strong></p><p>接下来说下依赖管理器，我们先看下这张图，一个常见的依赖关系图，这个就像一个倒立的大树一样，每一个叶子都是一个仓库，树根就是主客户端，树里面每个叶子之间也有很复杂的依赖关系，如果这个时候监控这个叶子出现了问题，就像这样，依赖他的上面的十几个叶子都会受到影响。</p><p>假如你改动了一个仓库，比如这个监控仓库，受影响的有依赖他的十几个仓库，就是这个图里面红色箭头指的地方，每个受影响的仓库都得升级到修复过后的版本，去一一验证，而且这个过程非常容易反复，比如你修复了一个问题，对日志生效了，但对图像又产生了问题，再修复，再发版本，还要再把十几个仓库升级再去验证，不停的重复这个过程，浪费很多时间。</p><p>那怎么去提升仓库的维护效率，减少验证的次数？</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201634.png"></p><p><strong>解决方案</strong></p><p>那有没有更彻底更高效的方式，在主工程里面把十几个受影响的仓库一次性验证完，只验证一次行不行。</p><p>那怎么才能实现只验证一次呢？就是把受影响的线上仓库，转为本地的可修改可编辑的源码仓库。比如我现在要修复监控仓库，我把线上监控仓库转为本地源码仓库。</p><p>上面受影响的十几个仓库依赖的都是本地的源码仓库，而不是线上地址。这样有问题只需要在本地监控仓库修复，改完后对依赖监控的十几个仓库同时有效。这样就可以了，对吧？</p><p>那关键是怎么把线上仓库转为源码仓库，最原始的方式就是把线上的地址在工程里面注释掉，把源码工程include进来。这种方式对于较复杂的项目来说，成本太高，也不可维护。</p><p>我们是希望只需要一个开关，就可以灵活的切换线上线下依赖。打开就是本地源码工程，关闭就是线上依赖。我们看下该怎么去实现。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201708.png"></p><p><strong>关键点</strong></p><p><strong>配置语言怎么选？</strong></p><p>首先配置该怎么选？配置可选的方式有很多种，json、xml、dsl或者其他的配置语言。json、xml在结构化扩展方面还是挺强的，但是一旦结构变得复杂，可读性就会比较差，我们看下这个对比图，左边是DSL，右边是同样结构的JSON描述，很显然json阅读起来还是挺困难的，关于DSL有一句话挺有意思，“你以为这是一句话，其实这是一段脚本”</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201732.png"></p><p><strong>动态加载DSL</strong></p><p>解析json和xml其实都比较简单，就是读文件就好了，但是对于dsl这种怎么办？</p><p>关于dsl文件其实本质上还是一个脚本，关于dsl有句话也是这么说的，你以为这是一句话 其实这是一个脚本。所以我们首先还是去动态加载这个脚本，在groovy里面提供了groovyshell，可以加载任意的groovy脚本，调用evaluate方法就可以加载独立的groovy 脚本，evaluate方法可以接受脚本字符、文件、Uri都可以。加载脚本之后，我们还需要拿到我们在dsl里面配置的信息，就是pod里面的东西，就是在定义脚本的地方，定义一个接受闭包的函数，函数名为pod，当groovyshell去加载脚本的时候，遇到pod配置，就会被这个函数接收，然后就可以把我们在项目中配置的dsl信息拿到。</p><p>简单来讲，就是通过groovyshell去执行这个dsl脚本，每一个pod可以看成是一个函数调用，括号里面的就是传进去的参数值，调用这个函数的声明就是这样写，然后我们就可以拿到我们在项目中的配置。这样就完成了dsl的动态加载。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201757.png"></p><p><strong>动态包含任意地址本地仓库</strong></p><p>首先，包含进来的项目才能依赖，所以第一步我们需要能动态的include本地任意路径的源码模块。在gradle 初始化阶段加载settings.gradle 时候，去apply我们的插件，这个时候可以拿到settings实例，这个和配置阶段拿到的project是不一样的，settings里面有个很重要的接口include，include里面填上我们配置的项目名称就可以了，和我们直接在settings.gradle里面直接写include是一样的，不一样的是我们这个是动态的。然后需要对我们刚刚include进去的project指定路径，settings里面可以通过project拿到我们指定名称的项目描述，在这个描述里面可以配置路径，任意的本地路径。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201818.png"></p><p><strong>动态去除线上、添加本地仓库</strong></p><p>经过之前的准备，终于到了最后一步，按照我们的配置去修改这个依赖关系了。</p><p>第一步，怎么把线上的依赖去除掉？在gradle配置阶段，我们每一个project都会apply我们的插件，apply的时候我们就可以拿到当前project实例，这和上面那个初始化阶段是不一样的，那个拿的是settings实例，我们通过project里面的configuration，可以去配置我们需要去除的线上依赖信息，configuration的exclude接口接收的是一个map，在这个map里配置我们在DSL里面配置的name和group就可以了。</p><p>下一步，我们需要把我们之前include进来的project，添加到我们的项目中去，通过我们当前的project实例，拿到当前工程的依赖关系，这个依赖是一个DependencyHandler，这个handler使用来描述依赖关系的，通过handler的add接口就可以把我们的本地仓库依赖动态添加进去，add接口接收buildtype和project实例，buildtype就是我们平常依赖使用的compile api implementation这些东西。</p><p>总的来说，通过配置信息把我们需要去除的依赖填进去，通过DependencyHandler把我们本地的project依赖添加进去，这样就实现了动态替换，线上依赖切换为线下依赖。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201840.png"></p><p><strong>流程</strong></p><p>然后我们看下实现流程，大概分为两个流程，初始化阶段和配置阶段，在gradle初始化阶段会先解析dsl，然后把需要调试的模块include 进来，在这中间可以做很多事情，比如我想依赖的是问题修复的分支，那就配置下分支名称就可以，执行自定义的hook命令。在gradle配置阶段，根据我们dsl的配置信息，去在依赖树里去寻找需要替换的节点，就像一个毛毛虫一样，去反复的去查找需要替换的叶子，找到后发现需要替换，就把需要调试的线上模块替换成本地的模块。因为仓库变多后，dsl的配置变多，所以我这还有一个辅助生成dsl的任务，他会自动扫描当前哪些是我们可以调试的，比如我们内部的maven仓库，把依赖树的信息转换为dsl，这个功能目前还在测试阶段，还没开源出来。</p><p>总的来说，大致分为两个流程，初始化阶段先把工程include进来，配置阶段再把线上依赖去除，添加本地依赖。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201901.png"></p><p>我们回顾下，这个插件解决的是什么问题？解决的是maven仓库依赖复杂，修复的过程繁琐。那是怎么去做的？用DSL配置仓库的基本信息，在gradle初始化阶段插件动态include仓库的源码工程，在配置阶段插件动态去除线上依赖、动态添加本地依赖，这样就做到了动态替换的效果，提升我们的维护效率，对吧。</p><p><strong>效果</strong></p><p>我们看下效果，首先我们现在的主工程是monitor sample，在项目根目录配置一个dsl文件，内容的话就是这样，每一个仓库对应一个pod，pod里面有开关，项目的name和group就是对应一个线上地址（图里面线上地址和pod对应）然后把需要调试的模块打开，重新sync工程，这时候上面就会出现本地的源码仓库，然后线上仓库就会被转为线下源码仓库，这时候可以对需要修复的仓库编辑、调试、验证功能、发布，只需要验证一次，节省很多时间。</p><p>我在举一个实际的例子吧，比如说我们现在有一个30人的团队，这三十人分成6个业务线，每个业务线都依赖了我们底层的网络库，网络库针对每个业务线都有相应的缓存及加密策略。如果这时候需要修改网络库的缓存策略，先在网络库的源工程里面去做修改，然后再发布到内网的maven服务器，然后再升级各个业务线的网络库版本号，再去验证，如果修改的功能不能满足需求，还得重新走上面的流程，浪费很多时间。那把网络库的依赖通过插件转为本地依赖，是不是就可以一次验证完了？对各个业务线验证完成之后再发布，不会重复的去走发布-验证这个流程，节省很多时间。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201921.png"></p><p>今天分享基本就是这些，然后这些是我的联系方式github、个人网站和我的微信，大家如果有疑问在交流群里或微信问我都可以，谢谢大家。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510201940.png"></p><h4 id="花絮"><a href="#花絮" class="headerlink" title="花絮"></a>花絮</h4><p>这张图片是上午场的讲师们的合影。</p><p>左三是gityuan，其余都是一线公司的大牛们。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/IMG_1668.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;里程碑记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随记" scheme="http://www.jackywang.tech/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 实践及原理</title>
    <link href="http://www.jackywang.tech/2019/01/30/Kotlin-%E5%AE%9E%E8%B7%B5%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <id>http://www.jackywang.tech/2019/01/30/Kotlin-%E5%AE%9E%E8%B7%B5%E5%8F%8A%E5%8E%9F%E7%90%86/</id>
    <published>2019-01-30T02:59:25.000Z</published>
    <updated>2019-05-10T12:07:05.092Z</updated>
    
    <content type="html"><![CDATA[<p>关于Kotlin在项目中的实践经验，及在Android平台的编译原理</p><span id="more"></span><h3 id="Kotlin-实践及原理"><a href="#Kotlin-实践及原理" class="headerlink" title="Kotlin 实践及原理"></a>Kotlin 实践及原理</h3><h4 id="语法回顾"><a href="#语法回顾" class="headerlink" title="语法回顾"></a>语法回顾</h4><h6 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Amit Shekhar&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Amit Shekhar&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Amit Shekhar&quot;</span></span><br><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Amit Shekhar&quot;</span></span><br></pre></td></tr></table></figure><h6 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (text != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> text.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> length = text?.length()</span><br></pre></td></tr></table></figure><h6 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> <span class="string">&quot;Amit&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">lastName</span> <span class="operator">=</span> <span class="string">&quot;Shekhar&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;My name is: &quot;</span> + firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> firstName = <span class="string">&quot;Amit&quot;</span></span><br><span class="line"><span class="keyword">val</span> lastName = <span class="string">&quot;Shekhar&quot;</span></span><br><span class="line"><span class="keyword">val</span> message = <span class="string">&quot;My name is: <span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br></pre></td></tr></table></figure><h6 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> x &gt; <span class="number">5</span> ? <span class="string">&quot;x &gt; 5&quot;</span> : <span class="string">&quot;x &lt;= 5&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> text = <span class="keyword">if</span> (x &gt; <span class="number">5</span>) <span class="string">&quot;x &gt; 5&quot;</span> <span class="keyword">else</span> <span class="string">&quot;x &lt;= 5&quot;</span></span><br></pre></td></tr></table></figure><h6 id="更灵活的case语句"><a href="#更灵活的case语句" class="headerlink" title="更灵活的case语句"></a>更灵活的case语句</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="comment">// some score;</span></span><br><span class="line">String grade;</span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        grade = <span class="string">&quot;Excellent&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        grade = <span class="string">&quot;Good&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        grade = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        grade = <span class="string">&quot;Fail&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        grade = <span class="string">&quot;Fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="comment">// some score</span></span><br><span class="line"><span class="keyword">var</span> grade = <span class="keyword">when</span> (score) &#123;</span><br><span class="line">    <span class="number">9</span>, <span class="number">10</span> -&gt; <span class="string">&quot;Excellent&quot;</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">6.</span><span class="number">.8</span> -&gt; <span class="string">&quot;Good&quot;</span></span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;OK&quot;</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span> -&gt; <span class="string">&quot;Fail&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">&quot;Fail&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as a single-expression function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">()</span></span>: <span class="built_in">Int</span> = score</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="Get-Set-构造器"><a href="#Get-Set-构造器" class="headerlink" title="Get Set 构造器"></a>Get Set 构造器</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Developer</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Developer</span> <span class="variable">developer</span> <span class="operator">=</span> (Developer) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != developer.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="literal">null</span> ? name.equals(developer.name) : developer.name == <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Developer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Developer</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="类继承、实现接口"><a href="#类继承、实现接口" class="headerlink" title="类继承、实现接口"></a>类继承、实现接口</h6><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> <span class="keyword">implements</span> <span class="title class_">IHome</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="type">Parent</span>(), IHome &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="与Java互操作"><a href="#与Java互操作" class="headerlink" title="与Java互操作"></a>与Java互操作</h4><h6 id="相互调用"><a href="#相互调用" class="headerlink" title="相互调用"></a>相互调用</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(source: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = ArrayList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="comment">// “for”-循环用于 Java 集合：</span></span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">        list.add(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作符约定同样有效：</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span>.source.size - <span class="number">1</span>) &#123;</span><br><span class="line">        list[i] = source[i] <span class="comment">// 调用 get 和 set</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="空安全与平台类型"><a href="#空安全与平台类型" class="headerlink" title="空安全与平台类型"></a>空安全与平台类型</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = ArrayList&lt;String&gt;() <span class="comment">// 非空（构造函数结果）</span></span><br><span class="line">list.add(<span class="string">&quot;Item&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> size = list.size <span class="comment">// 非空（原生 int）</span></span><br><span class="line"><span class="keyword">val</span> item = list[<span class="number">0</span>] <span class="comment">// 推断为平台类型（普通 Java 对象）</span></span><br><span class="line">item.substring(<span class="number">1</span>) <span class="comment">// 允许，如果 item == null 可能会抛出异常</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件 example.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Obj &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> CONST = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> VERSION = <span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> MAX = <span class="number">239</span></span><br><span class="line"></span><br><span class="line">int c = Obj.CONST;</span><br><span class="line">int d = ExampleKt.MAX;</span><br><span class="line">int v = C.VERSION;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="kotlin-实践经验"><a href="#kotlin-实践经验" class="headerlink" title="kotlin 实践经验"></a>kotlin 实践经验</h4><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>语法简洁，能比java减少40%的代码，也能节约大量的时间</li><li>语法级别的安全</li><li>目前版本已较为稳定</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>可能会有额外的开销</li><li>少量的特性支持的还不健全，尤其在与Java互操作上，比如lateinit特性</li></ul><h5 id="坑、隐藏开销"><a href="#坑、隐藏开销" class="headerlink" title="坑、隐藏开销"></a>坑、隐藏开销</h5><p>kotlin代码是很简洁，但是简洁下面有时候会隐藏较大的开销。</p><p><strong>伴生对象</strong></p><p>如果我们需要创建类似Java中的静态成员，需要创建伴生对象，伴生对象通过<code>companion object </code> 创建，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> version = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转换为同等的Java代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">version</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Test.<span class="type">Companion</span> <span class="variable">Companion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>.Companion((DefaultConstructorMarker)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Companion</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> Test.version;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="title function_">Companion</span><span class="params">()</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Companion</span><span class="params">(DefaultConstructorMarker $constructor_marker)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是会多产生一次的函数调用开销，不过可以把<code>val version</code> 改为 <code>const val version</code> 避免这个问题</p><p><strong>装箱拆箱</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a: IntArray = intArrayOf(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> b: Array&lt;<span class="built_in">Int</span>&gt; = arrayOf(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> c: Array&lt;<span class="built_in">Int</span>?&gt; = arrayOf(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转为Java如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer[] b = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer[] c = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;(Integer)<span class="literal">null</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后两种产生了装箱处理，产生开销</p><p><strong>For循环</strong></p><p>kotlin 提供了downTo step until reversed函数简单使用循环，但这些函数组合使用也有可能产生较多的临时对象。</p><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>Tools -&gt;Kotlin -&gt;Show Kotlin Bytecode -&gt; Decompile</p><h4 id="Kotlin-编译原理"><a href="#Kotlin-编译原理" class="headerlink" title="Kotlin 编译原理"></a>Kotlin 编译原理</h4><p>我们对kotlin比较大的疑问可能是kotlin是怎么和java混编的？或者说kotlin是怎么生成字节码的</p><p>kotlin整个都是开源的，可以从github clone下来，地址：<a href="https://github.com/JetBrains/kotlin">https://github.com/JetBrains/kotlin</a></p><p>整个工程很庞大，源代码大概有四百多万行，可以使用 IntelliJ IDEA查看整个工程，具体操作可以看github 项目主页的建议。</p><p><strong>编译流程图：</strong></p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200651.png"></p><p>kotlin的maven id 为kotlin-gradle-plugin，我们做下全局搜索，发现路径为：root&#x2F;libraries&#x2F;tools&#x2F;kotlin-gradle-plugin</p><p>每个插件都会有入口类，我们在module配置时都会添加：apply plugin: ‘kotlin-android’，kotlin-android代表的就是配置入口类文件的名字，所以我们看下下kotlin-android.properties文件内容，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation-<span class="keyword">class</span>=org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到插件入口类为 KotlinAndroidPluginWrapper，接下来我们就从这个入口类分析下kotlin编译过程。</p><p>KotlinAndroidPluginWrapper 源码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">KotlinAndroidPluginWrapper</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span>(</span><br><span class="line">    fileResolver: FileResolver,</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> registry: ToolingModelBuilderRegistry</span><br><span class="line">) : KotlinBasePluginWrapper(fileResolver) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPlugin</span><span class="params">(project: <span class="type">Project</span>, kotlinGradleBuildServices: <span class="type">KotlinGradleBuildServices</span>)</span></span>: Plugin&lt;Project&gt; =</span><br><span class="line">        KotlinAndroidPlugin(kotlinPluginVersion, registry)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>真正的实现是在 KotlinAndroidPlugin 中，源码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">KotlinAndroidPlugin</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> kotlinPluginVersion: String,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> registry: ToolingModelBuilderRegistry</span><br><span class="line">) : Plugin&lt;Project&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(project: <span class="type">Project</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> androidTarget = KotlinAndroidTarget(<span class="string">&quot;&quot;</span>, project)</span><br><span class="line">        <span class="keyword">val</span> tasksProvider = AndroidTasksProvider(androidTarget.targetName)</span><br><span class="line"></span><br><span class="line">        applyToTarget(</span><br><span class="line">            project, androidTarget, tasksProvider,</span><br><span class="line">            kotlinPluginVersion</span><br><span class="line">        )</span><br><span class="line">        registry.register(KotlinModelBuilder(kotlinPluginVersion, androidTarget))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">applyToTarget</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            kotlinTarget: <span class="type">KotlinAndroidTarget</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            tasksProvider: <span class="type">KotlinTasksProvider</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            kotlinPluginVersion: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span> &#123;</span><br><span class="line"><span class="comment">// 省略无关代码</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">val</span> variantProcessor = <span class="keyword">if</span> (compareVersionNumbers(version, legacyVersionThreshold) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LegacyAndroidAndroidProjectHandler(kotlinTools)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> android25ProjectHandlerClass = Class.forName(<span class="string">&quot;org.jetbrains.kotlin.gradle.plugin.Android25ProjectHandler&quot;</span>)</span><br><span class="line">                <span class="keyword">val</span> ctor = android25ProjectHandlerClass.constructors.single &#123;</span><br><span class="line">                    it.parameterTypes.contentEquals(arrayOf(kotlinTools.javaClass))</span><br><span class="line">                &#125;</span><br><span class="line">                ctor.newInstance(kotlinTools) <span class="keyword">as</span> AbstractAndroidProjectHandler&lt;*&gt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            variantProcessor.handleProject(project, kotlinTarget)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插件加载首先执行的是apply函数，跟进applyToTarget函数，省略掉无关代码，重点在最后一句handleProject</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handleProject</span><span class="params">(project: <span class="type">Project</span>, kotlinAndroidTarget: <span class="type">KotlinAndroidTarget</span>)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ignore ..</span></span><br><span class="line">  forEachVariant(project) &#123;</span><br><span class="line">         processVariant(</span><br><span class="line">            it, kotlinAndroidTarget, project, ext, plugin, kotlinOptions, kotlinConfigurationTools.kotlinTasksProvider</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">// ignore ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>省略掉无关代码，可以代码在processVariant，跟进去看下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">processVariant</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    variantData: <span class="type">V</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    target: <span class="type">KotlinAndroidTarget</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    androidExt: <span class="type">BaseExtension</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    androidPlugin: <span class="type">BasePlugin</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootKotlinOptions: <span class="type">KotlinJvmOptionsImpl</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    tasksProvider: <span class="type">KotlinTasksProvider</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    <span class="comment">// 创建 kotlin 任务</span></span><br><span class="line">    <span class="keyword">val</span> kotlinTask = tasksProvider.createKotlinJVMTask(project, kotlinTaskName, compilation)</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    wireKotlinTasks(project, compilation, androidPlugin, androidExt, variantData, javaTask, kotlinTask)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中会创建 kotlin 任务，创建任务入口先留意一下，先看下 wireKotlinTasks 实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">wireKotlinTasks</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    compilation: <span class="type">KotlinJvmAndroidCompilation</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    androidPlugin: <span class="type">BasePlugin</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    androidExt: <span class="type">BaseExtension</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    variantData: <span class="type">BaseVariantData</span>&lt;<span class="type">out</span> <span class="type">BaseVariantOutputData</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    javaTask: <span class="type">AbstractCompile</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    kotlinTask: <span class="type">KotlinCompile</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    kotlinTask.dependsOn(*javaTask.dependsOn.toTypedArray())</span><br><span class="line">    </span><br><span class="line">    configureJavaTask(kotlinTask, javaTask, logger)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>configureJavaTask 比较可疑，跟进去看下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureJavaTask</span><span class="params">(kotlinTask: <span class="type">KotlinCompile</span>, javaTask: <span class="type">AbstractCompile</span>, logger: <span class="type">Logger</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    javaTask.dependsOn(kotlinTask)</span><br><span class="line"><span class="comment">// ignore ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到函数核心是定义了kotlin task在java task之前执行，ok，那我们接下来跟进kotlin task的实现，我们返回上面的创建kotlin task的地方：<code>tasksProvider.createKotlinJVMTask(project, kotlinTaskName, compilation)</code>，跟进去：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">createKotlinJVMTask</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    project: <span class="type">Project</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    compilation: <span class="type">KotlinCompilation</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: KotlinCompile &#123;</span><br><span class="line">    <span class="keyword">val</span> properties = PropertiesProvider(project)</span><br><span class="line">    <span class="keyword">val</span> taskClass = taskOrWorkersTask&lt;KotlinCompile, KotlinCompileWithWorkers&gt;(properties)</span><br><span class="line">    <span class="keyword">return</span> project.tasks.create(name, taskClass).apply &#123;</span><br><span class="line">        configure(<span class="keyword">this</span>, project, properties, compilation)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致意思就是根据任务名称创建任务，任务名称就来自泛型中定义的两个，那我们选择KotlinCompileWithWorkers，看下是如何定义的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">KotlinCompileWithWorkers</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span>(</span><br><span class="line">    <span class="meta">@Suppress(<span class="string">&quot;UnstableApiUsage&quot;</span>)</span> <span class="keyword">private</span> <span class="keyword">val</span> workerExecutor: WorkerExecutor</span><br><span class="line">) : KotlinCompile() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compilerRunner</span><span class="params">()</span></span> = GradleCompilerRunnerWithWorkers(<span class="keyword">this</span>, workerExecutor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看来是覆写了父类的compilerRunner，我们跟进去看看GradleCompilerRunnerWithWorkers的实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">GradleCompilerRunnerWithWorkers</span>(</span><br><span class="line">    task: Task,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> workersExecutor: WorkerExecutor</span><br><span class="line">) : GradleCompilerRunner(task) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">runCompilerAsync</span><span class="params">(workArgs: <span class="type">GradleKotlinCompilerWorkArguments</span>)</span></span> &#123;</span><br><span class="line">        project.logger.kotlinDebug &#123; <span class="string">&quot;Starting Kotlin compiler work from task &#x27;<span class="subst">$&#123;task.path&#125;</span>&#x27;&quot;</span> &#125;</span><br><span class="line">        <span class="comment">// todo: write tests with Workers enabled;</span></span><br><span class="line">        workersExecutor.submit(GradleKotlinCompilerWork::<span class="keyword">class</span>.java) &#123; config -&gt;</span><br><span class="line">            config.isolationMode = IsolationMode.NONE</span><br><span class="line">            config.forkMode = ForkMode.NEVER</span><br><span class="line">            config.params(workArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心是提交了一个  runnable，这就比较明确了，我们看下GradleKotlinCompilerWork的实现，重点看run的实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ignore ..</span></span><br><span class="line">    <span class="keyword">val</span> exitCode = <span class="keyword">try</span> &#123;</span><br><span class="line">        compileWithDaemonOrFallbackImpl()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">        clearLocalStateDirectories(log, localStateDirectories, <span class="string">&quot;exception when running compiler&quot;</span>)</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (buildFile != <span class="literal">null</span> &amp;&amp; System.getProperty(DELETE_MODULE_FILE_PROPERTY) != <span class="string">&quot;false&quot;</span>) &#123;</span><br><span class="line">            buildFile.delete()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ignore ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>run 里面的核心就是compileWithDaemonOrFallbackImpl函数，跟进去：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">compileWithDaemonOrFallbackImpl</span><span class="params">()</span></span>: ExitCode &#123;</span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">if</span> (executionStrategy == DAEMON_EXECUTION_STRATEGY) &#123;</span><br><span class="line">            <span class="keyword">val</span> daemonExitCode = compileWithDaemon()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心代码为：compileWithDaemon()，跟进去：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">compileWithDaemon</span><span class="params">()</span></span>: ExitCode? &#123;</span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">    <span class="keyword">val</span> targetPlatform = <span class="keyword">when</span> (compilerClassName) &#123;</span><br><span class="line">        KotlinCompilerClass.JVM -&gt; CompileService.TargetPlatform.JVM</span><br><span class="line">        KotlinCompilerClass.JS -&gt; CompileService.TargetPlatform.JS</span><br><span class="line">        KotlinCompilerClass.METADATA -&gt; CompileService.TargetPlatform.METADATA</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unknown compiler type <span class="variable">$compilerClassName</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> exitCode = <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> res = <span class="keyword">if</span> (isIncremental) &#123;</span><br><span class="line">            incrementalCompilationWithDaemon(daemon, sessionId, targetPlatform)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nonIncrementalCompilationWithDaemon(daemon, sessionId, targetPlatform)</span><br><span class="line">        &#125;</span><br><span class="line">        exitCodeFromProcessExitCode(log, res.<span class="keyword">get</span>())</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Throwable) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;Compilation with Kotlin compile daemon was not successful&quot;</span>)</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ignore</span></span><br><span class="line">    <span class="keyword">return</span> exitCode</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选择编译平台，根据编译方式执行不同函数，我们选择nonIncrementalCompilationWithDaemon跟进去看下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">nonIncrementalCompilationWithDaemon</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    daemon: <span class="type">CompileService</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    sessionId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    targetPlatform: <span class="type">CompileService</span>.<span class="type">TargetPlatform</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: CompileService.CallResult&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ignore</span></span><br><span class="line">    <span class="keyword">return</span> daemon.compile(sessionId, compilerArgs, compilationOptions, servicesFacade, compilationResults = <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续，目前跟进到CompileServiceImpl#compile，忽略无关重点如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">doCompile(sessionId, daemonReporter, tracer = <span class="literal">null</span>) &#123; _, _ -&gt;</span><br><span class="line">            <span class="keyword">val</span> compiler = <span class="keyword">when</span> (targetPlatform) &#123;</span><br><span class="line">                CompileService.TargetPlatform.JVM -&gt; K2JVMCompiler()</span><br><span class="line">                CompileService.TargetPlatform.JS -&gt; K2JSCompiler()</span><br><span class="line">                CompileService.TargetPlatform.METADATA -&gt; K2MetadataCompiler()</span><br><span class="line">            &#125; <span class="keyword">as</span> CLICompiler&lt;CommonCompilerArguments&gt;</span><br><span class="line">                                                     </span><br><span class="line">            compiler.exec(messageCollector, Services.EMPTY, k2PlatformArgs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续，忽略意义不大的跳转到K2JVMCompiler#doExecute，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doExecute</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    arguments: <span class="type">K2JVMCompilerArguments</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    configuration: <span class="type">CompilerConfiguration</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootDisposable: <span class="type">Disposable</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    paths: <span class="type">KotlinPaths</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: ExitCode &#123;</span><br><span class="line">  <span class="comment">// ignore</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arguments.buildFile != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            KotlinToJVMBytecodeCompiler.configureSourceRoots(configuration, moduleChunk.modules, buildFile)</span><br><span class="line"></span><br><span class="line">            KotlinToJVMBytecodeCompiler.compileModules(environment, buildFile, moduleChunk.modules)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arguments.script) &#123;</span><br><span class="line">            <span class="keyword">return</span> KotlinToJVMBytecodeCompiler.compileAndExecuteScript(environment, scriptArgs)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            KotlinToJVMBytecodeCompiler.compileBunchOfSources(environment)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: CompilationException) &#123;</span><br><span class="line">        messageCollector.report(</span><br><span class="line">            EXCEPTION,</span><br><span class="line">            OutputMessageUtil.renderException(e),</span><br><span class="line">            MessageUtil.psiElementToMessageLocation(e.element)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> INTERNAL_ERROR</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的KotlinToJVMBytecodeCompiler看起来是比较重要，跟进去其中一个分支看下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">compileBunchOfSources</span><span class="params">(environment: <span class="type">KotlinCoreEnvironment</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"><span class="comment">// 词法 语法 分析</span></span><br><span class="line">    <span class="keyword">val</span> generationState = analyzeAndGenerate(environment) ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">// 查找主类</span></span><br><span class="line">    <span class="keyword">val</span> mainClass = findMainClass(generationState, environment.getSourceFiles())</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writeOutput(environment.configuration, generationState.factory, mainClass)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        generationState.destroy()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看来已经找到关键函数入口了，跟进去analyzeAndGenerate，转到KotlinCodegenFacade#doGenerateFiles，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static void doGenerateFiles(</span><br><span class="line">        <span class="meta">@NotNull</span> Collection&lt;KtFile&gt; files,</span><br><span class="line">        <span class="meta">@NotNull</span> GenerationState state,</span><br><span class="line">        <span class="meta">@NotNull</span> CompilationErrorHandler errorHandler</span><br><span class="line">) &#123;</span><br><span class="line">    state.getCodegenFactory().generateModule(state, files, errorHandler);</span><br><span class="line"></span><br><span class="line">    CodegenFactory.Companion.doCheckCancelled(state);</span><br><span class="line">    state.getFactory().done();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跟进去CodegenFactory，关注generate开头的函数，又经过无数跳转到，MemberCodegen#genSimpleMember：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void genSimpleMember(<span class="meta">@NotNull</span> KtDeclaration declaration) &#123;</span><br><span class="line">    <span class="keyword">if</span> (declaration instanceof KtNamedFunction) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            functionCodegen.gen((KtNamedFunction) declaration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ProcessCanceledException | CompilationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new CompilationException(<span class="string">&quot;Failed to generate function &quot;</span> + declaration.getName(), e, declaration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (declaration instanceof KtProperty) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            propertyCodegen.gen((KtProperty) declaration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ProcessCanceledException | CompilationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new CompilationException(<span class="string">&quot;Failed to generate property &quot;</span> + declaration.getName(), e, declaration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的生成细节，如果是function就由functionCodegen生成，如果属性就由propertyCodegen生成，跟进去functionCodegen：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void gen(<span class="meta">@NotNull</span> KtNamedFunction function) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (owner.getContextKind() != OwnerKind.DEFAULT_IMPLS || function.hasBody()) &#123;</span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">        generateMethod(JvmDeclarationOriginKt.OtherOrigin(function, functionDescriptor), functionDescriptor, strategy);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>忽略无关的跳转，转到：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void generateMethodBody(</span><br><span class="line">        <span class="meta">@NotNull</span> JvmDeclarationOrigin origin,</span><br><span class="line">        <span class="meta">@NotNull</span> FunctionDescriptor functionDescriptor,</span><br><span class="line">        <span class="meta">@NotNull</span> MethodContext methodContext,</span><br><span class="line">        <span class="meta">@NotNull</span> FunctionGenerationStrategy strategy,</span><br><span class="line">        <span class="meta">@NotNull</span> MethodVisitor mv,</span><br><span class="line">        <span class="meta">@NotNull</span> JvmMethodSignature jvmSignature,</span><br><span class="line">        boolean staticInCompanionObject</span><br><span class="line">) &#123;</span><br><span class="line">    OwnerKind contextKind = methodContext.getContextKind();</span><br><span class="line">    <span class="keyword">if</span> (!state.getClassBuilderMode().generateBodies || isAbstractMethod(functionDescriptor, contextKind)) &#123;</span><br><span class="line">        generateLocalVariableTable(</span><br><span class="line">                mv,</span><br><span class="line">                jvmSignature,</span><br><span class="line">                functionDescriptor,</span><br><span class="line">                getThisTypeForFunction(functionDescriptor, methodContext, typeMapper),</span><br><span class="line">                new Label(),</span><br><span class="line">                new Label(),</span><br><span class="line">                contextKind,</span><br><span class="line">                typeMapper,</span><br><span class="line">                Collections.emptyList(),</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        mv.visitEnd();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!functionDescriptor.isExternal()) &#123;</span><br><span class="line">        generateMethodBody(mv, functionDescriptor, methodContext, jvmSignature, strategy, memberCodegen, state.getJvmDefaultMode(),</span><br><span class="line">                           state.getLanguageVersionSettings().supportsFeature(LanguageFeature.ReleaseCoroutines));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (staticInCompanionObject) &#123;</span><br><span class="line">        <span class="comment">// native @JvmStatic foo() in companion object should delegate to the static native function moved to the outer class</span></span><br><span class="line">        mv.visitCode();</span><br><span class="line">        FunctionDescriptor staticFunctionDescriptor = JvmStaticInCompanionObjectGenerator</span><br><span class="line">                .createStaticFunctionDescriptor(functionDescriptor);</span><br><span class="line">        Method accessorMethod = typeMapper.mapAsmMethod(memberCodegen.getContext().accessibleDescriptor(staticFunctionDescriptor, <span class="literal">null</span>));</span><br><span class="line">        Type owningType = typeMapper.mapClass((ClassifierDescriptor) staticFunctionDescriptor.getContainingDeclaration());</span><br><span class="line">        generateDelegateToStaticMethodBody(<span class="literal">false</span>, mv, accessorMethod, owningType.getInternalName(), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    endVisit(mv, <span class="literal">null</span>, origin.getElement());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中有几个地方 visitor 还有 visitEnd，我们看下具体的引用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.*;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.commons.InstructionAdapter;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.commons.Method;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.org.objectweb.asm.util.TraceMethodVisitor;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看来是利用ASM框架去生成字节码，例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果生成一个类使用ClassWriter</span></span><br><span class="line"><span class="type">ClassWriter</span> <span class="variable">cw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 定义类的方法</span></span><br><span class="line">cw.visitMethod(Opcodes.ACC_PUBLIC+Opcodes.ACC_ABSTRACT, <span class="string">&quot;compareTo&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;)I&quot;</span>,<span class="literal">null</span>, <span class="literal">null</span>).visitEnd();</span><br><span class="line"><span class="comment">// 完成</span></span><br><span class="line">cw.visitEnd(); </span><br><span class="line"><span class="comment">// 将cw转换成字节数组</span></span><br><span class="line"><span class="type">byte</span>[] data = cw.toByteArray();</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/test/Comparable.class&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">fout.write(data);</span><br><span class="line">fout.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok，kotlin的编译过程基本就是，插件 - kotlin任务 - 编译器 - 生成方法、属性 - 利用ASM生成字节码</p><h4 id="Kotlin-跨平台"><a href="#Kotlin-跨平台" class="headerlink" title="Kotlin 跨平台"></a>Kotlin 跨平台</h4><p>kotlin 在语法上是支持跨平台的，是编译期跨平台，而不是容器类跨平台，目前支持JS、iOS、Server。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于Kotlin在项目中的实践经验，及在Android平台的编译原理&lt;/p&gt;</summary>
    
    
    
    
    <category term="kotlin" scheme="http://www.jackywang.tech/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>加固</title>
    <link href="http://www.jackywang.tech/2018/10/30/%E5%8A%A0%E5%9B%BA/"/>
    <id>http://www.jackywang.tech/2018/10/30/%E5%8A%A0%E5%9B%BA/</id>
    <published>2018-10-30T11:50:07.000Z</published>
    <updated>2019-02-01T09:31:48.734Z</updated>
    
    <content type="html"><![CDATA[<p>加固需要什么样的知识？</p><span id="more"></span><h3 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h3><p>近期有机会研究了下加固技术，发现涉及的知识面非常广泛，专门记录下。</p><p>加固技术通常按代来分。</p><p>第一代就是我们通常可见的混淆，把代码转换为a b c d 这样的字符，这样做的目的就是增加阅读难度，看到的代码和实际的代码结构是有区别的，但是这样关键源码还是可以获取到的。</p><p>后来，想着能不能对代码进行加密，在运行时在解密，这样就有了第二代技术，就是针对Dex的加密或者变形，让破坏者得到的是坏掉的文件或者加密过的文件，相当于在第一代的时候，我们是把钱撕成几段，但是还是可以被别人拼成完好的钱的，后来我们就把钱锁到了保险柜里面，这样比第一代安全了些。</p><p>这个时候的关键就是该把保险柜的钥匙放在哪？加密算法如果放在Java层面还是容易被人反编拿到，放在C层看起来好像是安全了些，但是其他人还是可以试探性的获取相应的密钥，就像你是把钥匙放在门口的垫子下面，还是交给保姆，交给保姆也没办法保证熟人花言巧语把钥匙骗过来，对吧。但是相比把钱直接摆在外边已经安全了很多。</p><p>第二代的通用做法就是加壳，简单的理解就是打包的时候放进去的是加密的Dex文件，在运行的时候在动态解密，再用classloader动态加载，达到加密的目的。</p><p>涉及到的技术</p><ol><li>JVM 原理</li><li>Dalvik 原理</li><li>Art 优化原理</li><li>Api 各个版本的兼容性</li><li>等等</li></ol><h4 id="VMP技术"><a href="#VMP技术" class="headerlink" title="VMP技术"></a>VMP技术</h4><p>持续更新。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;加固需要什么样的知识？&lt;/p&gt;</summary>
    
    
    
    
    <category term="安全" scheme="http://www.jackywang.tech/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux I/O 多路复用</title>
    <link href="http://www.jackywang.tech/2018/09/10/Linux-I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>http://www.jackywang.tech/2018/09/10/Linux-I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</id>
    <published>2018-09-10T12:32:57.000Z</published>
    <updated>2019-02-01T09:31:48.747Z</updated>
    
    <content type="html"><![CDATA[<p>神秘的多路复用，我们看看在系统层级是怎么实现的？</p><span id="more"></span><blockquote><p> 读书笔记，Linux 系统编程第二章，I&#x2F;O 多路复用</p></blockquote><p>Linux 提供了三种I&#x2F;O多路复用方案：select、poll和epoll。</p><h3 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h3><p>更新中。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;神秘的多路复用，我们看看在系统层级是怎么实现的？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://www.jackywang.tech/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 引用搜索原理</title>
    <link href="http://www.jackywang.tech/2018/05/22/IntelliJ%20IDE%20%E6%90%9C%E7%B4%A2%E5%BC%95%E7%94%A8%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/"/>
    <id>http://www.jackywang.tech/2018/05/22/IntelliJ%20IDE%20%E6%90%9C%E7%B4%A2%E5%BC%95%E7%94%A8%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/</id>
    <published>2018-05-22T02:43:56.000Z</published>
    <updated>2019-02-01T09:31:48.712Z</updated>
    
    <content type="html"><![CDATA[<p>IntelliJ IDEA 如何实现引用搜索？</p><span id="more"></span><p>IntelliJ IDEA 我们都很熟悉，强大的开源IDE。Android Studio 就是基于IDEA社区版开发的。平常我们会经常使用到Find Usage 功能，查找一个类或者方法的引用，那我们看看它内部是如何实现的？</p><p>IDEA 在Github上是开源的，地址：<a href="https://github.com/JetBrains/intellij-community">https://github.com/JetBrains/intellij-community</a>。clone 下来可以直接用它自己打开，感觉很奇妙，自己可以开发自己:-D</p><p>IDEA整个源码量是非常庞大的，只是Java和Python源代码加起来就有<strong>四百多万行</strong>。从这样庞大的项目中找到某个功能的入口，寻找相应的测试用例是个比较好的方法，那我们试着搜下有没有Find Usage的测试用例，果然在com.intellij.java.psi.search包下有个类是FindUsagesTest，继续看下这个类里面有没有我们想要的入口，测试用例里面大部分都引用了一个函数：<code>ReferencesSearch.search</code>，看来感觉有点像，跟进去看看这个函数的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Searches for references to the specified element in the scope in which such references are expected to be found, according to</span></span><br><span class="line"><span class="comment"> * dependencies and access rules.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element the element (declaration) the references to which are requested.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the query allowing to enumerate the references.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Query&lt;PsiReference&gt; <span class="title function_">search</span><span class="params">(<span class="meta">@NotNull</span> PsiElement element)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> search(element, GlobalSearchScope.allScope(PsiUtilCore.getProjectInReadAction(element)), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是根据搜索的范围，去找到这个element的引用，注意这个函数返回的是一个Query接口。</p><p>搜索引用大概就是这个函数了，继续跟进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Query&lt;PsiReference&gt; <span class="title function_">search</span><span class="params">(<span class="meta">@NotNull</span> PsiElement element, <span class="meta">@NotNull</span> SearchScope searchScope, <span class="type">boolean</span> ignoreAccessScope)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> search(<span class="keyword">new</span> <span class="title class_">SearchParameters</span>(element, searchScope, ignoreAccessScope));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据上一步的参数组成搜索参数，忽略无关紧要的细节，继续。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Searches for references to the specified element according to the specified parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameters the parameters for the search (contain also the element the references to which are requested).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the query allowing to enumerate the references.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Query&lt;PsiReference&gt; <span class="title function_">search</span><span class="params">(<span class="meta">@NotNull</span> <span class="keyword">final</span> SearchParameters parameters)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> Query&lt;PsiReference&gt; result = INSTANCE.createQuery(parameters);</span><br><span class="line">  <span class="keyword">if</span> (parameters.isSharedOptimizer) &#123;</span><br><span class="line">    <span class="keyword">return</span> uniqueResults(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">SearchRequestCollector</span> <span class="variable">requests</span> <span class="operator">=</span> parameters.getOptimizer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">PsiElement</span> <span class="variable">element</span> <span class="operator">=</span> parameters.getElementToSearch();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> uniqueResults(<span class="keyword">new</span> <span class="title class_">MergeQuery</span>&lt;&gt;(result, <span class="keyword">new</span> <span class="title class_">SearchRequestQuery</span>(PsiUtilCore.getProjectInReadAction(element), requests)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步大概就是，创建了两个Query，然后进行了合并，返回UniqueResultsQuery，这里面的SearchRequestQuery感觉比较重要，先着重留意下。返回的Query，肯定是为了让上层调用查找接口，那我们看下这个Query里面的查找接口是如何实现的，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">  List&lt;T&gt; result = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">  Processor&lt;T&gt; processor = Processors.cancelableCollectProcessor(result);</span><br><span class="line">  forEach(processor);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个意思就比较清楚了，把一个结果的List作为引用经过处理，最后返回给上层。Processor只是把结果List进行暂存，处理还是在forEach里面，forEach里面还是调用了myOriginal的Query的forEach，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(<span class="meta">@NotNull</span> Set&lt;M&gt; processedElements, <span class="meta">@NotNull</span> Processor&lt;? <span class="built_in">super</span> T&gt; consumer)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> myOriginal.forEach(<span class="keyword">new</span> <span class="title class_">MyProcessor</span>(processedElements, consumer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myOriginal就是刚刚的MergeQuery，那看下MergeQuery里面的forEach做了什么，最后调用了processSubQuery，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;V <span class="keyword">extends</span> <span class="title class_">T</span>&gt; <span class="type">boolean</span> <span class="title function_">processSubQuery</span><span class="params">(<span class="meta">@NotNull</span> Query&lt;V&gt; subQuery, <span class="meta">@NotNull</span> <span class="keyword">final</span> Processor&lt;? <span class="built_in">super</span> T&gt; consumer)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> subQuery.forEach(consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是MergeQuery最后调用了各个子Query的forEach，上面我们注意到SearchRequestQuery嫌疑比较大，先跟进去看下，forEach最后调用到了processResults，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">processResults</span><span class="params">(<span class="meta">@NotNull</span> Processor&lt;? <span class="built_in">super</span> PsiReference&gt; consumer)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> PsiSearchHelper.getInstance(myProject).processRequests(myRequests, consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面调用到了PsiSearchHelper的processRequests，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processRequests</span><span class="params">(<span class="meta">@NotNull</span> SearchRequestCollector collector, <span class="meta">@NotNull</span> Processor&lt;? <span class="built_in">super</span> PsiReference&gt; processor)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="keyword">if</span> (!processGlobalRequestsOptimized(globals, progress, localProcessors)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RequestWithProcessor local : locals) &#123;</span><br><span class="line">      progress.checkCanceled();</span><br><span class="line">      <span class="keyword">if</span> (!processSingleRequest(local.request, local.refProcessor)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中省略掉了一些无关代码，注意到有个processGlobalRequestsOptimized还有个processSingleRequest，先看下processGlobalRequestsOptimized的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">processGlobalRequestsOptimized</span><span class="params">(<span class="meta">@NotNull</span> MultiMap&lt;Set&lt;IdIndexEntry&gt;, RequestWithProcessor&gt; singles,</span></span><br><span class="line"><span class="params">                                               <span class="meta">@NotNull</span> ProgressIndicator progress,</span></span><br><span class="line"><span class="params">                                               <span class="meta">@NotNull</span> <span class="keyword">final</span> Map&lt;RequestWithProcessor, Processor&lt;PsiElement&gt;&gt; localProcessors)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (singles.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">RequestWithProcessor</span>&gt; requests = singles.values();</span><br><span class="line">    <span class="keyword">if</span> (requests.size() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">RequestWithProcessor</span> <span class="variable">theOnly</span> <span class="operator">=</span> requests.iterator().next();</span><br><span class="line">      <span class="keyword">return</span> processSingleRequest(theOnly.request, theOnly.refProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>忽略掉无关代码，发现当请求为1的时候，还是调用了上层的processSingleRequest，那我们就先分析简单情况，跟进去看下实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">processSingleRequest</span><span class="params">(<span class="meta">@NotNull</span> PsiSearchRequest single, <span class="meta">@NotNull</span> Processor&lt;? <span class="built_in">super</span> PsiReference&gt; consumer)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> EnumSet&lt;Options&gt; options = EnumSet.of(Options.PROCESS_ONLY_JAVA_IDENTIFIERS_IF_POSSIBLE);</span><br><span class="line">  <span class="keyword">if</span> (single.caseSensitive) options.add(Options.CASE_SENSITIVE_SEARCH);</span><br><span class="line">  <span class="keyword">if</span> (shouldProcessInjectedPsi(single.searchScope)) options.add(Options.PROCESS_INJECTED_PSI);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bulkProcessElementsWithWord(single.searchScope, single.word, single.searchContext, options, single.containerName,</span><br><span class="line">                                     adaptProcessor(single, consumer)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先配置了请求参数，然后调用了bulkProcessElementsWithWord，先看下adaptProcessor实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BulkOccurrenceProcessor <span class="title function_">adaptProcessor</span><span class="params">(<span class="meta">@NotNull</span> PsiSearchRequest singleRequest,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@NotNull</span> Processor&lt;? <span class="built_in">super</span> PsiReference&gt; consumer)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">final</span> <span class="type">RequestResultProcessor</span> <span class="variable">wrapped</span> <span class="operator">=</span> singleRequest.processor;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BulkOccurrenceProcessor</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">execute</span><span class="params">(<span class="meta">@NotNull</span> PsiElement scope, <span class="meta">@NotNull</span> <span class="type">int</span>[] offsetsInScope, <span class="meta">@NotNull</span> StringSearcher searcher)</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">        <span class="keyword">return</span> LowLevelSearchUtil.processElementsAtOffsets(scope, searcher, !ignoreInjectedPsi,</span><br><span class="line">                                                           getOrCreateIndicator(), offsetsInScope,</span><br><span class="line">                                                           (element, offsetInElement) -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (ignoreInjectedPsi &amp;&amp; element <span class="keyword">instanceof</span> PsiLanguageInjectionHost) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">return</span> wrapped.processTextOccurrence(element, offsetInElement, consumer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>adaptProcessor最后还是调用了wrapped.processTextOccurrence调用，先留意下这个地方，从上一层继续向下看，bulkProcessElementsWithWord的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">bulkProcessElementsWithWord</span><span class="params">(<span class="meta">@NotNull</span> SearchScope searchScope,</span></span><br><span class="line"><span class="params">                                            <span class="meta">@NotNull</span> <span class="keyword">final</span> String text,</span></span><br><span class="line"><span class="params">                                            <span class="keyword">final</span> <span class="type">short</span> searchContext,</span></span><br><span class="line"><span class="params">                                            <span class="meta">@NotNull</span> EnumSet&lt;Options&gt; options,</span></span><br><span class="line"><span class="params">                                            <span class="meta">@Nullable</span> String containerName, <span class="meta">@NotNull</span> <span class="keyword">final</span> BulkOccurrenceProcessor processor)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (searchScope <span class="keyword">instanceof</span> GlobalSearchScope) &#123;</span><br><span class="line">    <span class="type">StringSearcher</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringSearcher</span>(text, options.contains(Options.CASE_SENSITIVE_SEARCH), <span class="literal">true</span>,</span><br><span class="line">                                                 searchContext == UsageSearchContext.IN_STRINGS,</span><br><span class="line">                                                 options.contains(Options.PROCESS_ONLY_JAVA_IDENTIFIERS_IF_POSSIBLE));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processElementsWithTextInGlobalScope((GlobalSearchScope)searchScope, searcher, searchContext,</span><br><span class="line">                                                options.contains(Options.CASE_SENSITIVE_SEARCH), containerName, progress, processor);</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> JobLauncher.getInstance().invokeConcurrentlyUnderProgress(Arrays.asList(scopeElements), progress, localProcessor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进去看下processElementsWithTextInGlobalScope的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">processElementsWithTextInGlobalScope</span><span class="params">(<span class="meta">@NotNull</span> <span class="keyword">final</span> GlobalSearchScope scope,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@NotNull</span> <span class="keyword">final</span> StringSearcher searcher,</span></span><br><span class="line"><span class="params">                                                     <span class="keyword">final</span> <span class="type">short</span> searchContext,</span></span><br><span class="line"><span class="params">                                                     <span class="keyword">final</span> <span class="type">boolean</span> caseSensitively,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@Nullable</span> String containerName,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@NotNull</span> ProgressIndicator progress,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@NotNull</span> <span class="keyword">final</span> BulkOccurrenceProcessor processor)</span> &#123;</span><br><span class="line">  progress.pushState();</span><br><span class="line">  <span class="type">boolean</span> result;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    progress.setText(PsiBundle.message(<span class="string">&quot;psi.scanning.files.progress&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> searcher.getPattern();</span><br><span class="line">    Set&lt;VirtualFile&gt; fileSet = <span class="keyword">new</span> <span class="title class_">THashSet</span>&lt;&gt;();</span><br><span class="line">    getFilesWithText(scope, searchContext, caseSensitively, text, fileSet);</span><br><span class="line"></span><br><span class="line">    progress.setText(PsiBundle.message(<span class="string">&quot;psi.search.for.word.progress&quot;</span>, text));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Processor&lt;PsiElement&gt; localProcessor = localProcessor(progress, searcher, processor);</span><br><span class="line">    ......</span><br><span class="line">    result = fileSet.isEmpty() || processPsiFileRoots(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(fileSet), fileSet.size(), <span class="number">0</span>, progress, localProcessor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    progress.popState();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>localProcessor比较可疑，跟进去看下，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Processor&lt;PsiElement&gt; <span class="title function_">localProcessor</span><span class="params">(<span class="meta">@NotNull</span> <span class="keyword">final</span> ProgressIndicator progress,</span></span><br><span class="line"><span class="params">                                                    <span class="meta">@NotNull</span> <span class="keyword">final</span> StringSearcher searcher,</span></span><br><span class="line"><span class="params">                                                    <span class="meta">@NotNull</span> <span class="keyword">final</span> BulkOccurrenceProcessor processor)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReadActionProcessor</span>&lt;PsiElement&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processInReadAction</span><span class="params">(PsiElement scopeElement)</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">      <span class="keyword">return</span> scopeElement.isValid() &amp;&amp;</span><br><span class="line">             processor.execute(scopeElement, LowLevelSearchUtil.getTextOccurrencesInScope(scopeElement, searcher, progress), searcher);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于，看到了processor的execute调用的地方，这个processor就是adaptProcessor返回的，执行的就是wrapped.processTextOccurrence，wrapped指向的processor就是SingleTargetRequestResultProcessor。</p><p>那这个wrapped是什么时候注入进来的呢？还记得在新建MergeQuery时有两个Query一个是Search，另一个就是ExecutorsQuery，<br>这个Query在执行时会根据参数通过一系列流程把wrapped指向SingleTargetRequestResultProcessor类型的Processor</p><p>所以，最后是执行的SingleTargetRequestResultProcessor的processTextOccurrence，看下实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processTextOccurrence</span><span class="params">(<span class="meta">@NotNull</span> PsiElement element, <span class="type">int</span> offsetInElement, <span class="meta">@NotNull</span> <span class="keyword">final</span> Processor&lt;? <span class="built_in">super</span> PsiReference&gt; consumer)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">final</span> List&lt;PsiReference&gt; references = ourReferenceService.getReferences(element,</span><br><span class="line">                                                                          <span class="keyword">new</span> <span class="title class_">PsiReferenceService</span>.Hints(myTarget, offsetInElement));</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进去getReferences实现，一路跳转…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PsiReferenceRegistrarImpl <span class="title function_">createRegistrar</span><span class="params">(Language language)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  List&lt;PsiReferenceProviderBean&gt; referenceProviderBeans = REFERENCE_PROVIDER_EXTENSION.allForLanguageOrAny(language);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> PsiReferenceProviderBean providerBean : referenceProviderBeans) &#123;</span><br><span class="line">    <span class="keyword">final</span> ElementPattern&lt;PsiElement&gt; pattern = providerBean.createElementPattern();</span><br><span class="line">    <span class="keyword">if</span> (pattern != <span class="literal">null</span>) &#123;</span><br><span class="line">      registrar.registerReferenceProvider(pattern, <span class="keyword">new</span> <span class="title class_">PsiReferenceProvider</span>() &#123;</span><br><span class="line"></span><br><span class="line">        PsiReferenceProvider myProvider;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PsiReference[] getReferencesByElement(<span class="meta">@NotNull</span> PsiElement element, <span class="meta">@NotNull</span> ProcessingContext context) &#123;</span><br><span class="line">          <span class="keyword">if</span> (myProvider == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            myProvider = providerBean.instantiate();</span><br><span class="line">            <span class="keyword">if</span> (myProvider == <span class="literal">null</span>) &#123;</span><br><span class="line">              myProvider = NULL_REFERENCE_PROVIDER;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> myProvider.getReferencesByElement(element, context);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registrar.markInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> registrar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用的是PsiReferenceProvider的getReferencesByElement，myProvider又是通过PsiReferenceProviderBean转化而来的，看下这里面做了什么事情，然后发现如下注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a &#123;<span class="doctag">@link</span> PsiReferenceProvider&#125; in plugin.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PsiReferenceProviderBean</span> <span class="keyword">extends</span> <span class="title class_">AbstractExtensionPointBean</span> <span class="keyword">implements</span> <span class="title class_">KeyedLazyInstance</span>&lt;PsiReferenceProviderBean&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ExtensionPointName&lt;PsiReferenceProviderBean&gt; EP_NAME =</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ExtensionPointName</span>&lt;&gt;(<span class="string">&quot;com.intellij.psi.referenceProvider&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Attribute(&quot;language&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> Language.ANY.getID();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Attribute(&quot;providerClass&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String className;</span><br></pre></td></tr></table></figure><p>原来是在plugin.xml 里面注册PsiReferenceProvider类型的Class，用时再去反射实例化调用，那我们现在看看有哪些类继承了PsiReferenceProvider，其中的JavaClassReferenceProvider应该是我们想要的实现，跟进getReferencesByElement，又是一路跳转到JavaClassReferenceSet的reparse，终于找到了类引用搜索最核心的东西，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reparse</span><span class="params">(<span class="meta">@NotNull</span> String str, <span class="meta">@NotNull</span> PsiElement element, <span class="keyword">final</span> <span class="type">boolean</span> isStaticImport, JavaClassReferenceSet context)</span> &#123;</span><br><span class="line">  myElement = element;</span><br><span class="line">  myContext = context;</span><br><span class="line">  List&lt;JavaClassReference&gt; referencesList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="type">int</span> <span class="variable">currentDot</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">referenceIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">allowDollarInNames</span> <span class="operator">=</span> isAllowDollarInNames();</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">allowSpaces</span> <span class="operator">=</span> isAllowSpaces();</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">allowGenerics</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">allowWildCards</span> <span class="operator">=</span> JavaClassReferenceProvider.ALLOW_WILDCARDS.getBooleanValue(getOptions());</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">allowGenericsCalculated</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">parsingClassNames</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (parsingClassNames) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nextDotOrDollar</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">curIndex</span> <span class="operator">=</span> currentDot + <span class="number">1</span>; curIndex &lt; str.length(); ++curIndex) &#123;</span><br><span class="line">      <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(curIndex);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ch == DOT || ch == DOLLAR &amp;&amp; allowDollarInNames) &#123;</span><br><span class="line">        nextDotOrDollar = curIndex;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ch == LT || ch == COMMA) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allowGenericsCalculated) &#123;</span><br><span class="line">          allowGenerics = !isStaticImport &amp;&amp; PsiUtil.isLanguageLevel5OrHigher(element);</span><br><span class="line">          allowGenericsCalculated = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (allowGenerics) &#123;</span><br><span class="line">          nextDotOrDollar = curIndex;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextDotOrDollar == -<span class="number">1</span>) &#123;</span><br><span class="line">      nextDotOrDollar = currentDot + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nextDotOrDollar; i &lt; str.length() &amp;&amp; Character.isJavaIdentifierPart(str.charAt(i)); ++i) nextDotOrDollar++;</span><br><span class="line">      parsingClassNames = <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> skipSpaces(nextDotOrDollar, str.length(), str, allowSpaces);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (j &lt; str.length()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(j);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">recognized</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">          j = skipSpaces(j + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">          <span class="keyword">if</span> (j &lt; str.length() &amp;&amp; str.charAt(j) == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            j = skipSpaces(j + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">            recognized = j == str.length();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> JavaClassReferenceProvider.JVM_FORMAT.getValue(getOptions());</span><br><span class="line">        <span class="keyword">if</span> (!recognized &amp;&amp; (aBoolean == <span class="literal">null</span> || !aBoolean.booleanValue())) &#123;</span><br><span class="line">          nextDotOrDollar = -<span class="number">1</span>; <span class="comment">// abort resolve</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextDotOrDollar != -<span class="number">1</span> &amp;&amp; nextDotOrDollar &lt; str.length()) &#123;</span><br><span class="line">      <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(nextDotOrDollar);</span><br><span class="line">      <span class="keyword">if</span> (c == LT) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">recognized</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> skipSpaces(nextDotOrDollar + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> str.lastIndexOf(GT);</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> skipSpacesBackward(j, <span class="number">0</span>, str, allowSpaces);</span><br><span class="line">        <span class="keyword">if</span> (end != -<span class="number">1</span> &amp;&amp; end &gt; start) &#123;</span><br><span class="line">          <span class="keyword">if</span> (myNestedGenericParameterReferences == <span class="literal">null</span>) myNestedGenericParameterReferences = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">          myNestedGenericParameterReferences.add(<span class="keyword">new</span> <span class="title class_">JavaClassReferenceSet</span>(</span><br><span class="line">            str.substring(start, end), myElement, myStartInElement + start, isStaticImport, myProvider, <span class="built_in">this</span>));</span><br><span class="line">          parsingClassNames = <span class="literal">false</span>;</span><br><span class="line">          j = skipSpaces(j + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">          recognized = j == str.length();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!recognized) &#123;</span><br><span class="line">          nextDotOrDollar = -<span class="number">1</span>; <span class="comment">// abort resolve</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (c == COMMA &amp;&amp; myContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (myContext.myNestedGenericParameterReferences == <span class="literal">null</span>) myContext.myNestedGenericParameterReferences = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> skipSpaces(nextDotOrDollar + <span class="number">1</span>, str.length(), str, allowSpaces);</span><br><span class="line">        myContext.myNestedGenericParameterReferences.add(<span class="keyword">new</span> <span class="title class_">JavaClassReferenceSet</span>(</span><br><span class="line">          str.substring(start), myElement, myStartInElement + start, isStaticImport, myProvider, <span class="built_in">this</span>));</span><br><span class="line">        parsingClassNames = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> nextDotOrDollar &gt; <span class="number">0</span> ? nextDotOrDollar : str.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">beginIndex</span> <span class="operator">=</span> skipSpaces(currentDot + <span class="number">1</span>, maxIndex, str, allowSpaces);</span><br><span class="line">    <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> skipSpacesBackward(maxIndex, beginIndex, str, allowSpaces);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">skipReference</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (allowWildCards &amp;&amp; str.charAt(beginIndex) == QUESTION) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> skipSpaces(beginIndex + <span class="number">1</span>, endIndex, str, allowSpaces);</span><br><span class="line">      <span class="keyword">if</span> (next != beginIndex + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyword</span> <span class="operator">=</span> str.startsWith(EXTENDS, next) ? EXTENDS : str.startsWith(SUPER, next) ? SUPER : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (keyword != <span class="literal">null</span>) &#123;</span><br><span class="line">          next = skipSpaces(next + keyword.length(), endIndex, str, allowSpaces);</span><br><span class="line">          beginIndex = next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (endIndex == beginIndex + <span class="number">1</span>) &#123;</span><br><span class="line">        skipReference = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!skipReference) &#123;</span><br><span class="line">      <span class="type">TextRange</span> <span class="variable">textRange</span> <span class="operator">=</span> TextRange.create(myStartInElement + beginIndex, myStartInElement + endIndex);</span><br><span class="line">      <span class="type">JavaClassReference</span> <span class="variable">currentContextRef</span> <span class="operator">=</span> createReference(</span><br><span class="line">        referenceIndex, str.substring(beginIndex, endIndex), textRange, isStaticImport);</span><br><span class="line">      referenceIndex++;</span><br><span class="line">      referencesList.add(currentContextRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((currentDot = nextDotOrDollar) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myReferences = referencesList.toArray(<span class="keyword">new</span> <span class="title class_">JavaClassReference</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很长，但是基本可以理解为就是一个简单的语言Parser，和我最初的猜想也是相符的，就是基于源文件字符解析，引用相关的信息都包含在返回的PsiReference列表里面。</p><p>IDEA 确实有一个优秀的架构，虽然也有槽点:-D</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IntelliJ IDEA 如何实现引用搜索？&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码分析" scheme="http://www.jackywang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件I/O</title>
    <link href="http://www.jackywang.tech/2018/05/16/Linux%20%E6%96%87%E4%BB%B6/"/>
    <id>http://www.jackywang.tech/2018/05/16/Linux%20%E6%96%87%E4%BB%B6/</id>
    <published>2018-05-16T13:11:41.000Z</published>
    <updated>2019-02-01T09:31:48.737Z</updated>
    
    <content type="html"><![CDATA[<p>文件如何进行读写？</p><span id="more"></span><blockquote><p> 读书笔记，Linux 系统编程 第二章 文件I&#x2F;O</p></blockquote><p>Unix 系统主要是通过文件表示的，因此这些章节会设计Unix系统的核心。</p><p>在对文件进行读写操作之前，首先需要打开文件。内核会为每个进程维护一个打开文件的列表，该列表就是文件表。文件表示由一些非负整数进行索引，这些非负整数称为文件描述符。列表的每一项是一个打开文件的信息，包括指向该文件索引节点内存拷贝的指针以及关联的元数据，如文件位置指针和访问模式。用户空间和内核空间都使用文件描述符作为唯一cookies，打开文件会返回文件描述符，后续操作都把文件描述符作为基本参数。</p><p>文件描述符使用C 语言的int类型表示。每个Linux 进程能开发的文件数是有上限的，文件描述符的范围从0开始，到上限值减一，默认情况下，上限值为1024，也可以对它进行配置，最大为1048576。因为负数不是合法的文件描述符，所以当函数出错不能返回有效的文件描述符时，通常会返回-1。</p><p>通常，每个进程至少包含三个文件描述符：0、1、2，除非显式关闭这些描述符。0表示标准输入、1表示标准输出、2表示标准错误。一般而言，stdin是连接到终端的输入设备（通常是键盘），而stdout和stderr是终端的屏幕。用户可以重定向这些文件描述符，甚至可以通过管道把一个程序的输出作为另一个程序的输入。shell正是通过这种方式实现重定向和管道的。</p><p>实际上，文件描述符也可以访问设备文件、管道、快速用户空间互斥、先进先出缓冲区和套接字。遵循一切皆文件的理念，几乎任何能够读写的东西都可以通过文件描述符来访问。</p><p>默认情况下，子进程会维护一份父进程的文件表副本。在副本中，打开文件列表和其访问模式、当前文件位置以及其他元数据，都和父进程维护的文件表相同，但是存在一点区别：当子进程关闭一个文件时，不会影响到父进程的文件表。虽然一般情况下子进程会自己持有一份文件表，但是子进程和父进程也可以共享文件表。</p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p><strong>系统调用open</strong><br>如果系统调用open执行成功，会返回文件描述符，指向路径名 name 所指定的文件。文件位置即文件的起始位置（0），文件打开方式是根据参数flags值来确定。</p><p>flags 参数是由一个或多个标志位的按位或组合。支持三种访问模式：O_RDONLY、O_WRONLY 或 O_RDWR，这三种模式分别表示为只读、只写或读写。</p><p>flags 参数还可以和以下的值进行按位或运算，修改打开文件的行为；</p><p>O_APPEND</p><p>文件以追加模式打开。也就是说，在每次写操作之前，将会更新文件位置指针，指向文件末尾。即使有另一个进程也在向该文件写数据，以追加模式打开的进程在最后一次写操作时，还是会更新文件位置指针，指向文件末尾。</p><p>O_ASYNC 这个标志位只适用于FIFO、管道、socket和终端，不适用于普通文件。</p><p>O_CLOEXEC  执行时关闭 标志位。在执行新的进程时，文件会自动关闭。</p><p>O_CREAT 当参数name指定的文件不存在时，内核自动创建。</p><p>O_DIRECT 打开文件用于直接I&#x2F;O</p><p>O_DIRECTORY 如果参数name不是目录，open调用会失败。</p><p>O_EXCL 当和标志位O_CREAT一起使用时，如果参数name指定的文件已经存在，会导致open调用失败，用于防止创建文件时出现竞争。</p><p>O_LARGEFILE 文件偏移使用64位整数表示，可以支持大于2GB文件。</p><p>O_NOATIME 在读文件时，不会更新该文件的最后访问时间。可以避免为了更新每个文件的索引节点而导致的大量写操作。<br>等等…</p><p><strong>新建文件所有者</strong></p><p>确定新建文件的所有者很简单：文件所有者的uid即创建该文件的进程的有效uid。</p><p><strong>creat函数</strong></p><p>因为有些参数组合经常使用，因为专门有个系统调用提供这个功能：int creat(const char *name, mode_t mode); 这个函数名creat少了个e。UNIX之父Ken Thompson开玩笑说他在UNIX设计中感到最遗憾的就是漏掉了这个字母。</p><p><strong>返回值和错误码</strong></p><p>系统调用open和creat在成功时都会返回文件描述符。出错时，返回-1，并把errno设置成相应的错误值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;文件如何进行读写？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://www.jackywang.tech/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android Pins 工程结构</title>
    <link href="http://www.jackywang.tech/2018/05/06/Android%20Pins%20%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/"/>
    <id>http://www.jackywang.tech/2018/05/06/Android%20Pins%20%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/</id>
    <published>2018-05-06T01:47:21.000Z</published>
    <updated>2019-05-10T12:01:16.925Z</updated>
    
    <content type="html"><![CDATA[<p>Pins 工程结构能解决什么问题？</p><span id="more"></span><p>近期我们听到一些团队在做工程化方面的事情，其中都提到了Pins 工程结构，最先提出这个概念的是微信团队：<a href="https://mp.weixin.qq.com/s/mkhCzeoLdev5TyO6DqHEdw">微信Android模块化架构重构实践</a>，在后来看到美团外卖也做了这个事情：<a href="https://tech.meituan.com/meituan_food_delivery_android_architecture_evolution.html">美团外卖Android平台化架构演进实践</a>。</p><p><strong>那Pins工程结构是什么？</strong></p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195725.png"></p><p>上面这张图就是Pins工程结构。</p><p><strong>那有什么用？或者能解决什么问题？</strong></p><p>如果你的产品有多条业务线，每一期产品有上百个需求，各个业务线业务之间有非常多的交集。比如，一个业务线引用了五个业务线，其他业务线也是类似的引用，依次类推，相互引用不重复的话为5的5次方等于3125，如果业务线增长这个复杂度也是呈几何数增长，那我们在现有的工程环境下如何做呢？简单的方法就是都放在同一个Gradle Module 里面相互引用，各个业务线之间用包名做区分，但是各个包之间也是可以相互引用，久而久之就会发现，代码变成了一锅粥…变成一锅粥的后果也是显然的，不能独立拆分，代码合并非常容易冲突浪费时间等等，各种后果。下图是微信业务之间的引用情况，实际情况可能比这更糟糕。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200106.png"></p><p>Pins结构就较好的解决了上面的问题，各个业务线之间都是一个Pins模块，模块之间<strong>根据规定引用该引用的</strong>，这样业务线之间的代码边界就会比较清楚。</p><p>接下来我们看下如何实现，这里只提供下简单思路。</p><p><strong>业务构建改造</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        <span class="keyword">def</span> dirs = [<span class="string">&#x27;p_widget&#x27;</span>, <span class="string">&#x27;p_theme&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p_shop&#x27;</span>, <span class="string">&#x27;p_shopcart&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p_submit_order&#x27;</span>,<span class="string">&#x27;p_multperson&#x27;</span>,<span class="string">&#x27;p_again_order&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p_location&#x27;</span>, <span class="string">&#x27;p_log&#x27;</span>,<span class="string">&#x27;p_ugc&#x27;</span>,<span class="string">&#x27;p_im&#x27;</span>,<span class="string">&#x27;p_share&#x27;</span>]</span><br><span class="line">        dirs.each &#123; dir -&gt;</span><br><span class="line">            java.srcDir(<span class="string">&quot;src/$dir/java&quot;</span>)</span><br><span class="line">            res.srcDir(<span class="string">&quot;src/$dir/res&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例就简单实现了Pins结构，指定各模块到路径到srcDir，p_shop、p_shopcart等Pins模块构建时会合并到主工程。上面只是一个简单示例，实际情况可以做很多动态化控制，比如动态生成以及扫描当前路径下的Pins模块、根据配置动态合成Pins模块等等。下面是一个稍微复杂的例子。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> src_dir = <span class="keyword">new</span> File(projectDir, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"><span class="comment">// 扫描当前模块下的Pins模块，并生成List</span></span><br><span class="line"><span class="keyword">def</span> p_module_names =</span><br><span class="line">            src_dir</span><br><span class="line">                    .list()</span><br><span class="line">                    .toList()</span><br><span class="line">                    .stream()</span><br><span class="line">                    .filter(</span><br><span class="line">                    <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="type">boolean</span> test(String name) &#123;</span><br><span class="line">                            <span class="keyword">return</span> name == <span class="string">&#x27;main&#x27;</span> || (name.startsWith(<span class="string">&#x27;p_&#x27;</span>) &amp;&amp; <span class="keyword">new</span> File(src_dir, name).isDirectory())</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList())</span><br><span class="line"><span class="comment">// 把生成的List合成为srcDir格式</span></span><br><span class="line"><span class="keyword">def</span> p_src_dirs =</span><br><span class="line">            p_module_names</span><br><span class="line">                    .stream()</span><br><span class="line">                    .map(</span><br><span class="line">                    <span class="keyword">new</span> Function() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        Object apply(Object module) &#123;</span><br><span class="line">                            <span class="keyword">return</span> [<span class="string">&#x27;src&#x27;</span>, module, <span class="string">&#x27;java&#x27;</span>].join(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> p_res_dirs =</span><br><span class="line">            p_module_names</span><br><span class="line">                    .stream()</span><br><span class="line">                    .map(</span><br><span class="line">                    <span class="keyword">new</span> Function() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        Object apply(Object module) &#123;</span><br><span class="line">                            <span class="keyword">return</span> [<span class="string">&#x27;src&#x27;</span>, module, <span class="string">&#x27;res&#x27;</span>].join(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList())</span><br><span class="line"><span class="comment">// 指定路径</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            manifest.srcFile <span class="string">&quot;src/main/AndroidManifest.xml&quot;</span></span><br><span class="line">            java.srcDirs = p_src_dirs</span><br><span class="line">            res.srcDirs = p_res_dirs</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>代码边界检查</strong></p><p>上面只是表面上把代码进行了分割，但是各Pins模块还是可以引用到其他模块的代码，一般的操作是根据模块的配置，在<strong>编译期</strong>做代码检查，检查是否引用了不该引用的模块。</p><p>那如何定义项目的配置，这个配置可以是文本文件、DSL等等，微信通过project.properties来指定编译依赖关系。</p><p>这里简单用groovy格式文件举例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">task code_check &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="comment">// 加载pins模块依赖文件</span></span><br><span class="line">        <span class="keyword">def</span> dependenciesFile = <span class="keyword">new</span> File(projectDir, <span class="string">&#x27;src/p_module1/dependencies.groovy&#x27;</span>)</span><br><span class="line">        <span class="keyword">def</span> ref = <span class="literal">null</span></span><br><span class="line">        dependenciesFile.readLines().each &#123;</span><br><span class="line">            ref = it</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扫描pins模块内部源文件</span></span><br><span class="line">        File javaDir = <span class="keyword">new</span> File(projectDir, <span class="string">&#x27;src/p_module1/java&#x27;</span>)</span><br><span class="line">        Files.walkFileTree(javaDir.toPath(), <span class="keyword">new</span> FileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult visitFile(Path file, BasicFileAttributes attrs) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                file.readLines().each &#123;</span><br><span class="line">                    <span class="keyword">if</span> (it.endsWith(ref)) &#123;</span><br><span class="line">                        System.err.println(<span class="string">&quot;p_module1模块引用了不能引用的模块！&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> FileVisitResult.TERMINATE</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult visitFileFailed(Path file, IOException exc) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            FileVisitResult postVisitDirectory(Path dir, IOException exc) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个任务，先从p_module1的dependencies文件里读出不能包含的模块，然后检索p_module1里面的文件是不是引用了这个模块，如果检查到就终止或抛出异常。</p><p>这里只是列举了一个思路，实现也比较粗暴，直接匹配的字符串。</p><p>当然，也可以做的比较完善，这些逻辑可以做在一个插件里，插件每次读取各个Pins模块的DSL配置（根据DSL的扩展性做更细粒度的依赖关系，比如只依赖另一个模块的某个包、某个类、某个资源等等），插件根据配置可以动态合成Pins，合成完Pins再做代码边界检查，边界检查可以用字符流匹配也可以用其他方式，提高字符流匹配准确性也可以做很多事情，比如匹配import行、类定义行、以及代码内的匹配（是真的字符串还是真的引用等等）。</p><p>Pins 工程的基本思路就是这样。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pins 工程结构能解决什么问题？&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程化" scheme="http://www.jackywang.tech/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>仓库源码依赖管理器（三）</title>
    <link href="http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2018-05-04T03:34:06.000Z</published>
    <updated>2019-02-01T09:31:48.744Z</updated>
    
    <content type="html"><![CDATA[<p>如何动态替换依赖？</p><span id="more"></span><p>前两篇我们说了下如何定义依赖描述文件，如何动态生成描述文件，那有了这些信息，我们该怎么去动态替换依赖？</p><p>如果要把线上依赖替换为本地Project依赖，先要把本地Project include进当前业务工程。在这之前先加载依赖描述文件进内存，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> shell = <span class="keyword">new</span> GroovyShell(<span class="variable language_">this</span>.getClass().getClassLoader())</span><br><span class="line">shell.evaluate(<span class="keyword">new</span> File(<span class="string">&quot;依赖描述文件路径&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>注：在依赖描述文件里，记得引用DSL使用的类，例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import xxx.Module</span><br><span class="line">@groovy.transform.BaseScript Module module</span><br></pre></td></tr></table></figure><p>然后循环迭代依赖描述 List，根据描述信息include相应的工程，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> projectName = <span class="string">&quot;:模块名字&quot;</span></span><br><span class="line">settings.include(projectName)</span><br><span class="line">settings.project(projectName).projectDir = <span class="keyword">new</span> File(<span class="string">&quot;模块本地路径&quot;</span>)</span><br></pre></td></tr></table></figure><p>到这一步，需要包含的Project已经包含了进来，在AS工程栏就可以看到包括进来的模块了。</p><p>需要替换的模块已经包含进来了，下一步就是根据依赖描述配置信息替换线上依赖，基本思路如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">project.afterEvaluate &#123;</span><br><span class="line">    <span class="comment">//寻找当前节点</span></span><br><span class="line">    <span class="keyword">def</span> currentItem = modules.find &#123;</span><br><span class="line">        project.name == it.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentItem == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 寻找子节点</span></span><br><span class="line">    List&lt;String&gt; seeds = currentItem.seeds</span><br><span class="line">    <span class="keyword">if</span> (seeds == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 迭代子节点</span></span><br><span class="line">    seeds.each &#123; seedName -&gt;</span><br><span class="line">        <span class="comment">// 寻找子节点对象</span></span><br><span class="line">        <span class="keyword">def</span> seed = modules.find &#123;</span><br><span class="line">            it.name == seedName</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (seed == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (seed.on_off) &#123;</span><br><span class="line">            <span class="comment">// 根据模块名字和group去除线上依赖</span></span><br><span class="line">            Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;()</span><br><span class="line">            map.put(<span class="string">&quot;module&quot;</span>, seed.name)</span><br><span class="line">            map.put(<span class="string">&quot;group&quot;</span>, <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">            project.configurations.compile.exclude(map)</span><br><span class="line">            <span class="comment">// 添加本地Project依赖</span></span><br><span class="line">            project.dependencies.add(<span class="string">&quot;api&quot;</span>, project.dependencies.project([<span class="attr">path:</span> <span class="string">&quot;:&quot;</span> + seed.name]))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在线上依赖已经替换为本地模块，在代码里点击相应模块的引用已经自动跳转到本地。</p><p>仓库源码依赖管理器基本的功能已经完成了，如果需要调试模块的本地代码，只需要在源码依赖描述里把相应模块开关打开即可，是不是很方便？</p><p>仓库源码依赖管理器大概就是这些内容。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何动态替换依赖？&lt;/p&gt;</summary>
    
    
    
    
    <category term="依赖管理器" scheme="http://www.jackywang.tech/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>仓库源码依赖管理器（二）</title>
    <link href="http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2018-05-04T02:47:50.000Z</published>
    <updated>2019-02-01T09:31:48.682Z</updated>
    
    <content type="html"><![CDATA[<p>如何动态生成依赖描述？</p><span id="more"></span><p>上一篇我们定义了依赖描述的基本格式，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off true</span><br><span class="line">    name &quot;我是名字&quot;</span><br><span class="line">    path &quot;/path&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想做的更通用，能让其他业务工程方便的接入仓库源码依赖，那每一次接入的时候都要编写大量的依赖描述，而且每一次依赖变了，都需要手动修改描述文件。那可不可以动态生成依赖描述？</p><p>我们都知道有一个androidDependencies任务，执行任务会把工程的依赖在控制台输出，如果我们实现类似的任务，可以扫描出当前的依赖关系，然后根据我们的依赖描述定义输出为DSL文件就可以解决了。</p><p>我们在任务执行期间可以拿到project config 信息，然后根据第一级的依赖信息生成节点依赖信息，然后递归查找当前节点的子节点，最后就可以生成类似树状的依赖关系，基本思路如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project.configurations.each &#123; config -&gt;</span><br><span class="line">    // 这里可以添加些异常检查</span><br><span class="line">    config.resolvedConfiguration.firstLevelModuleDependencies.each &#123; dep -&gt;</span><br><span class="line">        def generateModuleDep</span><br><span class="line">        generateModuleDep = &#123; resolvedDep -&gt;</span><br><span class="line">            // 这里可以根据 resolvedDep moduleGroup moduleName 等信息生成当前依赖信息</span><br><span class="line">            resolvedDep.children.each &#123; childResolvedDep -&gt;</span><br><span class="line">                if (resolvedDep in childResolvedDep.getParents()) &#123;</span><br><span class="line">                    // 子节点递归扫描依赖</span><br><span class="line">                    generateModuleDep(childResolvedDep)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        generateModuleDep(dep)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点的信息可以按照实际情况存储到相应的数据结构中，我这里是把节点的对象直接存到List中。</p><p>现在我们已经获取到各个节点的信息了，那我们怎么把节点信息导出为文件呢？</p><p>groovy 支持使用模板生成字符串，生成文件当然也是可以的。</p><p>先定义一个依赖描述模板，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off $&#123;on_off&#125;</span><br><span class="line">    name $&#123;name&#125;</span><br><span class="line">    path $&#123;path&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一步定义一个节点信息Map，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def binding = [</span><br><span class="line">        on_off    : true, // 节点信息的开关值</span><br><span class="line">        name      : &quot;节点信息的名字&quot;,</span><br><span class="line">        path      : &quot;节点的路径&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最后根据上面定义的模板和节点信息Map，输出格式化的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def template = new StreamingTemplateEngine().createTemplate(&quot;描述依赖模板&quot;)</span><br><span class="line">String response = template.make(&quot;节点信息Map&quot;)</span><br></pre></td></tr></table></figure><p>模板引擎的make函数返回就是已经填好内容的格式化字符串，根据输出的字符串就可以输出到依赖描述文件。</p><p>现在在业务工程执行当前的任务，就可以动态生成依赖描述文件。</p><p>下一篇我们将结合这两篇的内容说下如何动态替换依赖。</p><p><a href="http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/">仓库源码依赖管理器（三）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何动态生成依赖描述？&lt;/p&gt;</summary>
    
    
    
    
    <category term="依赖管理器" scheme="http://www.jackywang.tech/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>仓库源码依赖管理器（一）</title>
    <link href="http://www.jackywang.tech/2018/05/03/%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.jackywang.tech/2018/05/03/%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2018-05-03T04:18:36.000Z</published>
    <updated>2019-02-01T09:31:48.738Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇我们先看下如何定义依赖描述。</p><span id="more"></span><p>如果我们平常经常维护主工程的基础仓库，经常会遇到修改仓库后无法很好的验证修改的效果，要么是把仓库工程作为单独的git submodule嵌入到业务工程，或者是简单粗暴，直接把线上依赖注释掉，添加本地仓库的路径。</p><p>那么有没有一种好的方法，可以做到本地源码依赖和线上依赖无缝切换。</p><p>了解过iOS开发的都知道，iOS依赖是直接下载依赖仓库的源码，本地依赖直接编译，依赖管理器叫CocoaPods，Android 平台是通过Gradle 从 Maven 或者JCenter 下载二进制文件。那在Android 平台上如何实现依赖仓库源码文件？</p><p>依赖管理器大概由几部分组成，依赖描述文件、发布规范等。依赖描述文件各个依赖管理器采用的格式都有所不同，Json 、 XML 、DSL 等等。各种表达方式各有各的优点，Json XML 结构工程表达比较丰富，但是可读性较差，当工程有几十个依赖项Json XML 简直无法直视，DSL虽然在工程结构表达上较弱，但在可读性理解上优点非常明显，cocoapods 就采用了这种表达方式，非常优美，如下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">&#x27;8.0&#x27;</span></span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">target <span class="string">&#x27;MyApp&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">&#x27;AFNetworking&#x27;</span>, <span class="string">&#x27;~&gt; 2.6&#x27;</span></span><br><span class="line">  pod <span class="string">&#x27;ORStackView&#x27;</span>, <span class="string">&#x27;~&gt; 3.0&#x27;</span></span><br><span class="line">  pod <span class="string">&#x27;SwiftyJSON&#x27;</span>, <span class="string">&#x27;~&gt; 2.3&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>看着这种依赖关系描述，心情也会舒畅好多。</p><p>那么在Android 平台能不能实现类似的效果？Android 构建使用的是groovy语言，而且groovy对DSL支持的还不错，所以利用groovy DSL特性描述依赖关系就可以了，你以为它是一段描述，其实它是一个可执行脚本。</p><p>我们需要一个模块的描述，包括开关、名字、路径等等，类似如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off <span class="literal">true</span></span><br><span class="line">    name <span class="string">&quot;我是名字&quot;</span></span><br><span class="line">    path <span class="string">&quot;/path&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，有了定义怎么实现？</p><p>我们看上面的依赖描述，其实都是一个个函数调用，比如 module 就可以是一个函数，函数的参数是一个闭包，同理on_off、name等等也是函数调用，在函数后面的即为函数的参数。</p><p>是不是很有意思？一句话就可以作为一个脚本执行。</p><p>所以，我们需要定义我们依赖描述中要用到的函数，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> on_off</span><br><span class="line">    String name</span><br><span class="line">    String path</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> on_off(<span class="type">boolean</span> on_off) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.on_off = on_off</span><br><span class="line">        println(<span class="string">&quot;module on_off:&quot;</span> + on_off)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> name(String name) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.name = name</span><br><span class="line">        println(<span class="string">&quot;module name:&quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> path(String path) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.path = path</span><br><span class="line">        println(<span class="string">&quot;module path:&quot;</span> + path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module module(<span class="meta">@DelegatesTo</span>(strategy = Closure.DELEGATE_FIRST, value = Module) Closure script) &#123;</span><br><span class="line">    script.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">    Module module = <span class="keyword">new</span> Module()</span><br><span class="line">    script.delegate = module</span><br><span class="line">    script()</span><br><span class="line">    <span class="keyword">return</span> script.delegate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名为module的函数接收一个闭包，闭包代理为Module类，闭包内的函数自动执行代理类函数调用，类和函数定义完成后，然后在控制台试验下（Android Studio -&gt; Tools -&gt; Groovy Console），在定义的类和函数下面写上如下的DSL生命，执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module &#123;</span><br><span class="line">    on_off true</span><br><span class="line">    name &quot;我是名字&quot;</span><br><span class="line">    path &quot;我是路径&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br>module on_off:true<br>module name:我是名字<br>module path:我是路径</p><p>看来我们定义的DSL已经成功被解析。</p><p>依赖描述已经定义完成，下一篇会说下如何动态生成依赖描述文件。</p><p><a href="http://www.jackywang.tech/2018/05/04/%E4%BB%93%E5%BA%93%E6%BA%90%E7%A0%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/">仓库源码依赖管理器（二）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一篇我们先看下如何定义依赖描述。&lt;/p&gt;</summary>
    
    
    
    
    <category term="依赖管理器" scheme="http://www.jackywang.tech/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>善变的架构</title>
    <link href="http://www.jackywang.tech/2018/03/08/%E5%96%84%E5%8F%98%E7%9A%84%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.jackywang.tech/2018/03/08/%E5%96%84%E5%8F%98%E7%9A%84%E6%9E%B6%E6%9E%84/</id>
    <published>2018-03-08T12:14:49.000Z</published>
    <updated>2019-05-10T11:57:39.743Z</updated>
    
    <content type="html"><![CDATA[<p>架构会有多善变？</p><span id="more"></span><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195615.png"></p><p>上图是一个常见的App分层架构，之后随着业务发展，架构会如何变化呢？</p><p>再看微信在两个阶段结构图：</p><p>阶段1：</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195637.png"></p><p>阶段2：<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195658.png"></p><p>可以看到微信在阶段1架构类似于常见的App分层架构，但是随着业务不断膨胀，发展到阶段2某些模块发生了劣化。为什么会出现这种问题？架构随着业务不断发展，最上层业务模块横向进行扩展，某一个业务并不会劣化，同理，最底层的组件，也不会出现较大的劣化。随着平行的业务模块交互越来越多，依赖的业务功能按照普通做法只能下沉到中间模块，这时劣化就渐渐的开始。</p><p>明确了问题，那该如何解决？Gradle Module 只能一个模块依赖另一个模块，而不能再细化模块的依赖，那我们只能自定义依赖关系。<br>在Module 里面划分小模块，分离Java Res Manifest 等资源，在property文件中定义该依赖哪些东西，在编译期检查依赖的合理性。如下图：</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195725.png"></p><p>这样就可以细化模块之间的依赖范围，模块之间也可以相互依赖。依赖并保持克制。</p><p>良好的架构除了要保持代码和规范的良好性，还应该做到哪些事情？</p><p>单端单产品按业务复杂度大概分为三种规模，十人之下、三十人左右、百人团队。十人左右团队考虑的更多是怎么快速的迭代业务，架构考虑更多的是如何辅助业务发展。三十人团队考虑的更多的是怎么样保持业务的并行进展，架构考虑更多的是如何使各业务线耦合度更低、沟通更顺畅、业务性能可控，取决于架构的复用、解耦、稳定及监控能力，如果架构做不到上述几点，将会拖累业务的发展，甚至导致业务失控。百人团队考虑的更多是业务并行及可控性，架构考虑更多的会是产品整个生命周期的并行及支撑体系，例如，研发支撑：在线定位用户操作的链路，测试支撑：自动化测试脚本，运维支撑：稳定性分析、舆情监控，发布支撑：更精确的灰度验证、实时发布。</p><p>完整的产品生命周期包括，工程期、运行期、运维期，良好的架构应该有解决上述各个时期问题的能力。比如在工程编码期，编码规范及代码风格检查的工具。在工程编译期，检查模块之间依赖、生成辅助代码的能力。在运行期，监控App性能、压测模块的能力。在运维期，包大小预警、打包平台、在线提取用户异常业务日志、实时修复能力。</p><p>架构，善变。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;架构会有多善变？&lt;/p&gt;</summary>
    
    
    
    
    <category term="架构" scheme="http://www.jackywang.tech/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>容器框架Atlas原理解析</title>
    <link href="http://www.jackywang.tech/2017/12/17/%E5%AE%B9%E5%99%A8%E6%A1%86%E6%9E%B6Atlas%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.jackywang.tech/2017/12/17/%E5%AE%B9%E5%99%A8%E6%A1%86%E6%9E%B6Atlas%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2017-12-17T10:03:03.000Z</published>
    <updated>2019-02-01T09:31:48.661Z</updated>
    
    <content type="html"><![CDATA[<p>优秀的架构在于解决产品编码期、运行期、测试期及后期运维的各种问题。</p><span id="more"></span><p>一个产品，当只有一两个工程师，这时没什么问题。当达到10人左右，沟通成本、协作效率、软件质量问题开始显现。当达到30+人，多业务线并行，开发效率、线上事故、代码合板等问题已经开始成为了产品瓶颈。那我们该怎么解决？</p><p>Atlas是在手淘架构不断发展演化出来的一个解决方案，比较适用于多业务线产品。Atlas把各个业务线分为多个bundle，bundle之间共享资源放在Host中，这样在编码编译期做到了天然隔离。在工程期，各bundle和host独立编译开发。运行期，按需加载bundle。运维期，动态部署业务需求、灵活精确灰度测试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;优秀的架构在于解决产品编码期、运行期、测试期及后期运维的各种问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="架构" scheme="http://www.jackywang.tech/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Android业务中间层该如何设计？</title>
    <link href="http://www.jackywang.tech/2017/10/11/Android%E4%B8%9A%E5%8A%A1%E4%B8%AD%E9%97%B4%E5%B1%82%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F/"/>
    <id>http://www.jackywang.tech/2017/10/11/Android%E4%B8%9A%E5%8A%A1%E4%B8%AD%E9%97%B4%E5%B1%82%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F/</id>
    <published>2017-10-11T11:04:45.000Z</published>
    <updated>2019-05-10T12:04:30.809Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个产品需要有多个业务线，各业务线之间如何协作才是最高效的？</p><span id="more"></span><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200345.png"></p><p>上图是比较常见的业务组装方式，如果需要添加某个业务，把相应的View直接写在Layout里，然后处理业务逻辑。但是如果业务模块多达几十个，散落的逻辑有几千行，这时该如何设计才能保证各业务的稳定和可扩展性？</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510200408.png"></p><p>公共业务应该是各个业务积木堆积组成，各个积木之间是黑盒状态，只能通过“窗口”向外提供服务，以及发布需求。中间层委托、代理信息的传递。</p><p>中间层在Android平台该如何设计？</p><ul><li>Android平台起点及终点都是和界面的生命周期息息相关，中间层作为业务&#x2F;界面的承载模型，所以应该继承自View。</li><li>各个业务积木之间是独立、隔离、和动态的，业务积木通过中间承载模型加载&#x2F;卸载也应该是动态的。</li><li>中间层作为界面承载模型，所以也是有生命周期的，且依赖于外部。</li><li>中间层除了承载、通信职责，也应该随着外部环境变化，去影响业务积木的改变。</li></ul><p><strong>对外协议</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 委托协议</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jacky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对外暴露的协议</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBusinessDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    IBusinessDelegate <span class="title function_">setup</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IBusinessDelegate <span class="title function_">setupBusiness1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IBusinessDelegate <span class="title function_">setupBusiness2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IBusinessDelegate <span class="title function_">setupBusiness3</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IBusinessDelegate <span class="title function_">setupBusiness4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">event1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">event2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中间层实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 委托</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jacky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 委托，隔离各业务间的耦合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessDelegate</span> <span class="keyword">extends</span> <span class="title class_">RelativeLayout</span> <span class="keyword">implements</span> <span class="title class_">IBusinessDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Context&gt; mContextReference;</span><br><span class="line">    <span class="keyword">private</span> TimingChestContract.Presenter mTimingChestPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessDelegate</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessDelegate</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessDelegate</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBusinessDelegate <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">        mContextReference = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(getContext());</span><br><span class="line">        removeAllViews();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- 动态加载挂件 Start ----</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBusinessDelegate <span class="title function_">setupBusiness1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TimingChestView</span> <span class="variable">chestView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimingChestView</span>(mContextReference.get());</span><br><span class="line">        mTimingChestPresenter = <span class="keyword">new</span> <span class="title class_">TimingChestPresenter</span>(chestView, <span class="keyword">new</span> <span class="title class_">TimingChestModel</span>());</span><br><span class="line">        chestView.setPresenter(mTimingChestPresenter);</span><br><span class="line">        <span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LayoutParams</span>(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);</span><br><span class="line">        addView(chestView, params);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBusinessDelegate <span class="title function_">setupBusiness2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBusinessDelegate <span class="title function_">setupBusiness3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBusinessDelegate <span class="title function_">setupBusiness4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---- 动态加载挂件 End ----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- 接收事件 Start ----</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">event1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">event2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---- 接收事件 End ----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- 生命周期 Start ----</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!EventBus.getDefault().isRegistered(<span class="built_in">this</span>)) &#123;</span><br><span class="line">            EventBus.getDefault().register(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onCreate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onResume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onPause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        EventBus.getDefault().unregister(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mTimingChestPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTimingChestPresenter.onDestroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---- 生命周期 End ----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>委托作为中间层的呈现方式，动态加载业务积木，并感应外部环境变化反应到业务积木。通过这种方式，业务积木就有了很好的稳定性和扩展性。并辅以辅助手段，使委托变得异常强大。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果一个产品需要有多个业务线，各业务线之间如何协作才是最高效的？&lt;/p&gt;</summary>
    
    
    
    
    <category term="架构" scheme="http://www.jackywang.tech/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于Dalvik，我们该知道些什么？</title>
    <link href="http://www.jackywang.tech/2017/08/21/%E5%85%B3%E4%BA%8EDalvik%EF%BC%8C%E6%88%91%E4%BB%AC%E8%AF%A5%E7%9F%A5%E9%81%93%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.jackywang.tech/2017/08/21/%E5%85%B3%E4%BA%8EDalvik%EF%BC%8C%E6%88%91%E4%BB%AC%E8%AF%A5%E7%9F%A5%E9%81%93%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2017-08-21T12:51:54.000Z</published>
    <updated>2019-05-10T11:51:49.246Z</updated>
    
    <content type="html"><![CDATA[<p>Dalvik和JVM的区别<br>Dex文件的结构<br>Dalvik如何加载Class</p><span id="more"></span><h2 id="Dalvik和JVM的区别"><a href="#Dalvik和JVM的区别" class="headerlink" title="Dalvik和JVM的区别"></a>Dalvik和JVM的区别</h2><p>Dalvik和JVM最主要区别是它们分别具有不同的类文件格式和指令集。Dalvik使用的是dex（Dalvik Executable）格式的类文件，而Java虚拟机使用的是class格式的类文件。</p><p>Dalvik的指令是基于寄存器的，而JVM的指令是基于堆栈的，因此Dalvik需要更多的指令空间。这样的区别其实各有优劣，JVM需要占用更多的CPU时间，而Dalvik的数据缓冲更容易失效。</p><h2 id="Dex文件结构"><a href="#Dex文件结构" class="headerlink" title="Dex文件结构"></a>Dex文件结构</h2><p>先看一张Class文件和Dex文件对比图：<br><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/20190510195008.png"></p><p>Dex这么设计可以使文件更紧凑，减少拢余，还可以共享资源，进而减少文件大小。</p><p>各个字段含义如下：</p><table><thead><tr><th align="left">数据名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">header</td><td align="left">Dex文件头部，记录整个Dex文件的相关属性</td></tr><tr><td align="left">string_ids</td><td align="left">字符串数据索引，记录了每个字符串在数据区的偏移量</td></tr><tr><td align="left">type_ids</td><td align="left">类似数据索引，记录了每个类型的字符串索引</td></tr><tr><td align="left">proto_ids</td><td align="left">原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表</td></tr><tr><td align="left">field_ids</td><td align="left">字段数据索引，记录了所属类、类型以及方法名</td></tr><tr><td align="left">method_ids</td><td align="left">类方法索引，记录方法所属类名、方法声明以及方法名等信息</td></tr><tr><td align="left">class_defs</td><td align="left">类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量</td></tr><tr><td align="left">data</td><td align="left">数据区，保存了各个类的真实数据</td></tr><tr><td align="left">link_data</td><td align="left">链接数据区</td></tr></tbody></table><h2 id="Dalvik如何加载Class"><a href="#Dalvik如何加载Class" class="headerlink" title="Dalvik如何加载Class"></a>Dalvik如何加载Class</h2><h3 id="解析Dex"><a href="#解析Dex" class="headerlink" title="解析Dex"></a>解析Dex</h3><p>加载之前需要有一个解析过程，Dex文件大体可以分为三大部分：头部、索引、数据。通过头部可以找到索引的数目、位置和数据的起始位置。然后，Dalvik会调用dexFileParse函数对它进行分析，分析的结果放到DexFile数据结构中。</p><h3 id="加载Dex"><a href="#加载Dex" class="headerlink" title="加载Dex"></a>加载Dex</h3><p>存储的数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Object</span> &#123;</span></span><br><span class="line">    ClassObject* clazz;  <span class="comment">// 类型对象</span></span><br><span class="line">    Lock lock;           <span class="comment">// 锁对象</span></span><br><span class="line">&#125; Object;</span><br></pre></td></tr></table></figure><p>clazz指向ClassObject对象，里面还包含一个Lock对象。如果其它线程想要获取它的锁，只有等当前线程释放掉才可以。</p><p>从Dex数据区读取过程中，会在内存中分配几个内存区域，用于存放directMethod、virtualMethod、sfield、ifield。等得到索引后，加载实际是由loadClassFromDex完成，它首先会先读取class的具体信息，再加载directMethod、virtualMethod、sfield、ifield，然后会为ClassObject数据结构分配内存，并读取Dex文件相关信息。等加载完成后，将加载的class放入哈希表中方便下次快速查找。</p><p><img src="https://img-1258598664.cos.ap-shenzhen-fsi.myqcloud.com/gongzh.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dalvik和JVM的区别&lt;br&gt;Dex文件的结构&lt;br&gt;Dalvik如何加载Class&lt;/p&gt;</summary>
    
    
    
    
    <category term="虚拟机" scheme="http://www.jackywang.tech/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
</feed>
